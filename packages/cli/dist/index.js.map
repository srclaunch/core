{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/StringChecks.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/configuration/DocNodeManager.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/details/Standardization.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/configuration/TSDocTagDefinition.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/details/StandardTags.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/configuration/TSDocValidationConfiguration.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocNode.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/BuiltInDocNodes.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/TSDocMessageId.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/configuration/TSDocConfiguration.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/details/ModifierTagSet.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/details/StandardModifierTagSet.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocNodeContainer.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocParagraph.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocSection.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocBlock.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/Token.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocExcerpt.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocBlockTag.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocCodeSpan.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/emitters/StringBuilder.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocParamCollection.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/transforms/TrimSpacesTransform.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/transforms/DocNodeTransforms.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/emitters/TSDocEmitter.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocComment.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocDeclarationReference.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocErrorText.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocEscapedText.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocFencedCode.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocHtmlAttribute.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocHtmlEndTag.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocHtmlStartTag.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocInlineTagBase.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocInheritDocTag.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocInlineTag.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocLinkTag.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocMemberIdentifier.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocMemberReference.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocMemberSelector.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocMemberSymbol.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocParamBlock.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocPlainText.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/DocSoftBreak.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/nodes/index.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/emitters/PlainTextEmitter.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/TextRange.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/ParserMessage.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/ParserMessageLog.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/ParserContext.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/TokenSequence.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/LineExtractor.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/Tokenizer.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/TokenReader.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/NodeParser.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/ParagraphSplitter.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/parser/TSDocParser.ts", "../../../node_modules/.pnpm/@microsoft+tsdoc@0.14.1/node_modules/@microsoft/tsdoc/src/index.ts", "../../../node_modules/.pnpm/tslib@2.4.0/node_modules/tslib/tslib.js", "../../../node_modules/.pnpm/lower-case@2.0.2/node_modules/lower-case/src/index.ts", "../../../node_modules/.pnpm/no-case@3.0.4/node_modules/no-case/src/index.ts", "../../../node_modules/.pnpm/pascal-case@3.1.2/node_modules/pascal-case/src/index.ts", "../../../node_modules/.pnpm/camel-case@4.1.2/node_modules/camel-case/src/index.ts", "../../../node_modules/.pnpm/upper-case-first@2.0.2/node_modules/upper-case-first/src/index.ts", "../../../node_modules/.pnpm/capital-case@1.0.4/node_modules/capital-case/src/index.ts", "../../../node_modules/.pnpm/upper-case@2.0.2/node_modules/upper-case/src/index.ts", "../../../node_modules/.pnpm/constant-case@3.0.4/node_modules/constant-case/src/index.ts", "../../../node_modules/.pnpm/dot-case@3.0.4/node_modules/dot-case/src/index.ts", "../../../node_modules/.pnpm/header-case@2.0.4/node_modules/header-case/src/index.ts", "../../../node_modules/.pnpm/param-case@3.0.4/node_modules/param-case/src/index.ts", "../../../node_modules/.pnpm/path-case@3.0.4/node_modules/path-case/src/index.ts", "../../../node_modules/.pnpm/sentence-case@3.0.4/node_modules/sentence-case/src/index.ts", "../../../node_modules/.pnpm/snake-case@3.0.4/node_modules/snake-case/src/index.ts", "../../../node_modules/.pnpm/change-case@4.1.2/node_modules/change-case/src/index.ts", "../../../node_modules/.pnpm/pluralize@8.0.0/node_modules/pluralize/pluralize.js", "../src/index.ts", "../src/commands/build.ts", "../../types/src/activity/index.ts", "../../types/src/analytics/web/index.ts", "../../types/src/analytics/index.ts", "../../types/src/build/format.ts", "../../types/src/environment/platform.ts", "../../types/src/build/target.ts", "../../types/src/build/tool.ts", "../../types/src/business/commerce/payment-method/index.ts", "../../types/src/business/commerce/subscription/index.ts", "../../types/src/changeset/index.ts", "../../types/src/communications/chat/message.ts", "../../types/src/communications/medium.ts", "../../types/src/condition/primitive/application.ts", "../../types/src/condition/primitive/boolean.ts", "../../types/src/condition/primitive/color.ts", "../../types/src/condition/primitive/date.ts", "../../types/src/condition/primitive/format.ts", "../../types/src/condition/primitive/i18n/currency.ts", "../../types/src/condition/primitive/i18n/language.ts", "../../types/src/condition/primitive/i18n/locale.ts", "../../types/src/condition/primitive/menu.ts", "../../types/src/condition/primitive/network.ts", "../../types/src/condition/primitive/number.ts", "../../types/src/condition/primitive/pii.ts", "../../types/src/condition/primitive/places/transportation/airport.ts", "../../types/src/condition/primitive/standards.ts", "../../types/src/condition/primitive/string.ts", "../../types/src/condition/index.ts", "../../types/src/data/data-point/index.ts", "../../types/src/data/model/defaults.ts", "../../types/src/data/model/index.ts", "../../types/src/data/primitive/index.ts", "../../types/src/deployment/infrastructure.ts", "../../types/src/deployment/platform.ts", "../../types/src/deployment/strategy.ts", "../../types/src/development/formatter.ts", "../../types/src/development/linter.ts", "../../types/src/development/sdk.ts", "../../types/src/development/static-typing.ts", "../../types/src/documentation/type.ts", "../../types/src/environment/index.ts", "../../types/src/error/exception/remediation.ts", "../../types/src/i18n/locale/country.ts", "../../types/src/i18n/currency/index.ts", "../../types/src/i18n/language/index.ts", "../../types/src/i18n/time/region.ts", "../../types/src/i18n/time/timezone.ts", "../../types/src/i18n/time/timezones.ts", "../../types/src/i18n/locale/region.ts", "../../types/src/i18n/locale/countries.ts", "../../types/src/i18n/locale/locales.ts", "../../types/src/i18n/time/regions.ts", "../../types/src/legal/license.ts", "../../types/src/logging/level.ts", "../../types/src/networking/http/request/index.ts", "../../types/src/networking/http/response/index.ts", "../../types/src/onboarding/index.ts", "../../types/src/package/index.ts", "../../types/src/platform/desktop/index.ts", "../../types/src/platform/mobile/index.ts", "../../types/src/problem/index.ts", "../../types/src/project/index.ts", "../../types/src/queue/index.ts", "../../types/src/release/index.ts", "../../types/src/routing/index.ts", "../../types/src/run/index.ts", "../../types/src/service/index.ts", "../../types/src/storage/file-system.ts", "../../types/src/test/index.ts", "../../types/src/things/device.ts", "../../types/src/ui/modal.ts", "../../types/src/ui/notification.ts", "../../types/src/user/authentication/verification.ts", "../../types/src/user/role.ts", "../../types/src/workflow/index.ts", "../src/lib/build/esbuild.ts", "../src/constants/build.ts", "../src/lib/build/formats.ts", "../src/lib/build/types.ts", "../src/lib/build/vite.ts", "../src/constants/dev.ts", "../src/lib/runners/web-application/runner.ts", "../src/lib/process/index.ts", "../src/lib/command.ts", "../src/commands/changesets.tsx", "../src/lib/changesets.ts", "../src/lib/git.ts", "../src/commands/config.ts", "../src/commands/create.ts", "../src/lib/generators/srclaunch/project/index.ts", "../src/lib/generators/srclaunch/project/web-application.ts", "../src/lib/codegen.ts", "../../../node_modules/.pnpm/mustache@4.2.0/node_modules/mustache/mustache.mjs", "../src/lib/templates/dx/eslint-config.ts", "../src/lib/templates/dx/prettier-config.ts", "../src/lib/templates/dx/prettier-ignore.ts", "../src/lib/templates/dx/stylelint-config.ts", "../src/lib/templates/dx/turbo-config.ts", "../src/lib/templates/dx/typescript-config.ts", "../src/lib/templates/package/gitignore.ts", "../src/lib/templates/package/package-config.ts", "../src/lib/templates/project/changelog.ts", "../src/lib/templates/project/license.ts", "../src/lib/templates/project/readme.ts", "../src/lib/templates/srclaunch/workspace-config.ts", "../src/lib/templates/workspace/pnpm-workspace.ts", "../src/lib/generators/srclaunch/workspace/index.ts", "../src/lib/templates/ci-cd/github-action.ts", "../src/lib/templates/dx/editor-config.ts", "../src/lib/templates/dx/eslint-ignore.ts", "../src/lib/templates/dx/typescript-type-definition.ts", "../src/lib/templates/srclaunch/model.ts", "../src/commands/deploy.ts", "../src/lib/deploy/github-pages.ts", "../src/commands/dev.tsx", "../src/containers/DevelopmentContainer.tsx", "../src/components/Scrollable.tsx", "../src/components/StatusButton.tsx", "../src/components/Button.tsx", "../src/components/StatusOrb.tsx", "../src/components/Tabs.tsx", "../src/lib/config.ts", "../src/lib/runners/index.ts", "../src/lib/docs/generate.ts", "../src/containers/AppContainer.tsx", "../src/components/FullScreen.tsx", "../src/commands/docs.ts", "../src/commands/generate.ts", "../src/lib/generate/index.ts", "../src/lib/generate/sdk/models.ts", "../src/lib/project/create.ts", "../src/prompts/generators/srclaunch/project.ts", "../src/commands/help.ts", "../src/commands/infrastructure.ts", "../src/commands/install.ts", "../src/commands/models.ts", "../src/lib/models/build/clean.ts", "../src/lib/models/build/index.ts", "../src/lib/models/build/outputs/core-api.ts", "../src/lib/models/build/outputs/http-client.ts", "../src/lib/models/build/outputs/redux.ts", "../src/lib/models/build/outputs/sequelize.ts", "../src/lib/models/build/exports.ts", "../src/lib/models/build/types.ts", "../src/lib/models/build/outputs/types.ts", "../src/lib/models/build/stubs/index.ts", "../src/lib/models/build/outputs/srclaunch.ts", "../src/lib/models/build/stubs/models.ts", "../src/lib/models/list.ts", "../src/commands/project.ts", "../src/lib/cli.ts", "../src/lib/project/clean.ts", "../src/lib/project/dependencies.ts", "../src/constants/dependencies.ts", "../src/constants/dev-dependencies.ts", "../src/lib/project/tooling.ts", "../src/constants/formatters.ts", "../src/constants/linters.ts", "../src/constants/static-typing.ts", "../src/commands/release.ts", "../src/lib/release/index.ts", "../src/commands/run.ts", "../src/commands/test.ts", "../src/lib/test/ava.ts", "../src/lib/test/index.ts", "../src/lib/test/coverage.ts", "../src/lib/test/jest.ts", "../src/lib/test/tape.ts", "../src/lib/test/vitest.ts", "../src/lib/flags.ts"],
  "sourcesContent": ["/**\r\n * Helpers for validating various text string formats.\r\n */\r\nexport class StringChecks {\r\n  private static readonly _tsdocTagNameRegExp: RegExp = /^@[a-z][a-z0-9]*$/i;\r\n\r\n  private static readonly _urlSchemeRegExp: RegExp = /^[a-z][a-z0-9]*\\:\\/\\//i;\r\n  private static readonly _urlSchemeAfterRegExp: RegExp = /^[a-z][a-z0-9]*\\:\\/\\/./i;\r\n\r\n  // HTML element definitions:\r\n  // https://spec.commonmark.org/0.29/#tag-name\r\n  // https://www.w3.org/TR/html5/syntax.html#tag-name\r\n  // https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\r\n  //\r\n  // We use the CommonMark spec:\r\n  // \"A tag name consists of an ASCII letter followed by zero or more ASCII letters, digits, or hyphens (-).\"\r\n  private static readonly _htmlNameRegExp: RegExp = /^[a-z]+[a-z0-9\\-]*$/i;\r\n\r\n  // Note: In addition to letters, numbers, underscores, and dollar signs, modern ECMAScript\r\n  // also allows Unicode categories such as letters, combining marks, digits, and connector punctuation.\r\n  // These are mostly supported in all environments except IE11, so if someone wants it, we would accept\r\n  // a PR to allow them (although the test surface might be somewhat large).\r\n  private static readonly _identifierBadCharRegExp: RegExp = /[^a-z0-9_$]/i;\r\n\r\n  // Identifiers most not start with a number.\r\n  private static readonly _identifierNumberStartRegExp: RegExp = /^[0-9]/;\r\n\r\n  // For detailed notes about NPM package name syntax, see:\r\n  // tslint:disable-next-line:max-line-length\r\n  // https://github.com/Microsoft/web-build-tools/blob/a417ca25c63aca31dba43a34d39cc9cd529b9c78/libraries/node-core-library/src/PackageName.ts\r\n  private static readonly _validPackageNameRegExp: RegExp = /^(?:@[a-z0-9\\-_\\.]+\\/)?[a-z0-9\\-_\\.]+$/i;\r\n\r\n  private static readonly _systemSelectors: Set<string> = new Set<string>([\r\n    // For classes:\r\n    'instance',\r\n    'static',\r\n    'constructor',\r\n\r\n    // For merged declarations:\r\n    'class',\r\n    'enum',\r\n    'function',\r\n    'interface',\r\n    'namespace',\r\n    'type',\r\n    'variable'\r\n  ]);\r\n\r\n  /**\r\n   * Tests whether the input string is a valid TSDoc tag name; if not, returns an error message.\r\n   * TSDoc tag names start with an at-sign (\"@\") followed by ASCII letters using\r\n   * \"camelCase\" capitalization.\r\n   */\r\n  public static explainIfInvalidTSDocTagName(tagName: string): string | undefined {\r\n    if (tagName[0] !== '@') {\r\n      return 'A TSDoc tag name must start with an \"@\" symbol';\r\n    }\r\n\r\n    if (!StringChecks._tsdocTagNameRegExp.test(tagName)) {\r\n      return 'A TSDoc tag name must start with a letter and contain only letters and numbers';\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Throws an exception if the input string is not a valid TSDoc tag name.\r\n   * TSDoc tag names start with an at-sign (\"@\") followed by ASCII letters using\r\n   * \"camelCase\" capitalization.\r\n   */\r\n  public static validateTSDocTagName(tagName: string): void {\r\n    const explanation: string | undefined = StringChecks.explainIfInvalidTSDocTagName(tagName);\r\n    if (explanation) {\r\n      throw new Error(explanation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string is a URL form supported inside an \"@link\" tag; if not,\r\n   * returns an error message.\r\n   */\r\n  public static explainIfInvalidLinkUrl(url: string): string | undefined {\r\n    if (url.length === 0) {\r\n      return 'The URL cannot be empty';\r\n    }\r\n    if (!StringChecks._urlSchemeRegExp.test(url)) {\r\n      return (\r\n        'An @link URL must begin with a scheme comprised only of letters and numbers followed by \"://\".' +\r\n        ' (For general URLs, use an HTML \"<a>\" tag instead.)'\r\n      );\r\n    }\r\n    if (!StringChecks._urlSchemeAfterRegExp.test(url)) {\r\n      return 'An @link URL must have at least one character after \"://\"';\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string is a valid HTML element or attribute name.\r\n   */\r\n  public static explainIfInvalidHtmlName(htmlName: string): string | undefined {\r\n    if (!StringChecks._htmlNameRegExp.test(htmlName)) {\r\n      return 'An HTML name must be an ASCII letter followed by zero or more letters, digits, or hyphens';\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Throws an exception if the input string is a not valid HTML element or attribute name.\r\n   */\r\n  public static validateHtmlName(htmlName: string): void {\r\n    const explanation: string | undefined = StringChecks.explainIfInvalidHtmlName(htmlName);\r\n    if (explanation) {\r\n      throw new Error(explanation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string is a valid NPM package name.\r\n   */\r\n  public static explainIfInvalidPackageName(packageName: string): string | undefined {\r\n    if (packageName.length === 0) {\r\n      return 'The package name cannot be an empty string';\r\n    }\r\n\r\n    if (!StringChecks._validPackageNameRegExp.test(packageName)) {\r\n      return `The package name ${JSON.stringify(packageName)} is not a valid package name`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string is a valid declaration reference import path.\r\n   */\r\n  public static explainIfInvalidImportPath(\r\n    importPath: string,\r\n    prefixedByPackageName: boolean\r\n  ): string | undefined {\r\n    if (importPath.length > 0) {\r\n      if (importPath.indexOf('//') >= 0) {\r\n        return 'An import path must not contain \"//\"';\r\n      }\r\n      if (importPath[importPath.length - 1] === '/') {\r\n        return 'An import path must not end with \"/\"';\r\n      }\r\n\r\n      if (!prefixedByPackageName) {\r\n        if (importPath[0] === '/') {\r\n          return 'An import path must not start with \"/\" unless prefixed by a package name';\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the input string is a TSDoc system selector.\r\n   */\r\n  public static isSystemSelector(selector: string): boolean {\r\n    return StringChecks._systemSelectors.has(selector);\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string is a valid ECMAScript identifier.\r\n   * A precise check is extremely complicated and highly dependent on the standard version\r\n   * and how faithfully the interpreter implements it, so here we use a conservative heuristic.\r\n   */\r\n  public static explainIfInvalidUnquotedIdentifier(identifier: string): string | undefined {\r\n    if (identifier.length === 0) {\r\n      return 'The identifier cannot be an empty string';\r\n    }\r\n\r\n    if (StringChecks._identifierBadCharRegExp.test(identifier)) {\r\n      return 'The identifier cannot non-word characters';\r\n    }\r\n\r\n    if (StringChecks._identifierNumberStartRegExp.test(identifier)) {\r\n      return 'The identifier must not start with a number';\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string can be used without quotes as a member identifier in a declaration reference.\r\n   * If not, it should be enclosed in quotes.\r\n   */\r\n  public static explainIfInvalidUnquotedMemberIdentifier(identifier: string): string | undefined {\r\n    const explanation: string | undefined = StringChecks.explainIfInvalidUnquotedIdentifier(identifier);\r\n    if (explanation !== undefined) {\r\n      return explanation;\r\n    }\r\n\r\n    if (StringChecks.isSystemSelector(identifier)) {\r\n      // We do this to avoid confusion about the declaration reference syntax rules.\r\n      // For example if someone were to see \"MyClass.(static:instance)\" it would be unclear which\r\n      // side the colon is the selector.\r\n      return `The identifier \"${identifier}\" must be quoted because it is a TSDoc system selector name`;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n", "import { DocNode } from '../nodes/DocNode';\r\nimport { StringChecks } from '../parser/StringChecks';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DocNodeConstructor = new (...args: any[]) => DocNode;\r\n\r\nexport interface IDocNodeDefinition {\r\n  docNodeKind: string;\r\n  constructor: DocNodeConstructor;\r\n}\r\n\r\ninterface IRegisteredDocNodeDefinition {\r\n  docNodeKind: string;\r\n  constructor: DocNodeConstructor;\r\n  packageName: string;\r\n  allowedChildKinds: Set<string>;\r\n}\r\n\r\n/**\r\n * Part of the {@link TSDocConfiguration} object.\r\n *\r\n * @remarks\r\n * If you define your own custom subclasses of `DocNode`, they must be registered with the `DocNodeManager`.\r\n * Use {@link DocNodeManager.registerAllowableChildren} to specify which {@link DocNodeContainer} subclasses\r\n * are allowed to contain your nodes.\r\n */\r\nexport class DocNodeManager {\r\n  // Matches an ASCII TypeScript-style identifier.\r\n  //\r\n  // Example: \"_myIdentifier99\"\r\n  private static readonly _nodeKindRegExp: RegExp = /^[_a-z][_a-z0-9]*$/i;\r\n\r\n  private readonly _docNodeDefinitionsByKind: Map<string, IRegisteredDocNodeDefinition> = new Map<\r\n    string,\r\n    IRegisteredDocNodeDefinition\r\n  >();\r\n  private readonly _docNodeDefinitionsByConstructor: Map<\r\n    DocNodeConstructor,\r\n    IRegisteredDocNodeDefinition\r\n  > = new Map<DocNodeConstructor, IRegisteredDocNodeDefinition>();\r\n\r\n  /**\r\n   * Registers a list of {@link IDocNodeDefinition} objects to be used with the associated\r\n   * {@link TSDocConfiguration} object.\r\n   */\r\n  public registerDocNodes(packageName: string, definitions: ReadonlyArray<IDocNodeDefinition>): void {\r\n    const packageNameError: string | undefined = StringChecks.explainIfInvalidPackageName(packageName);\r\n    if (packageNameError) {\r\n      throw new Error('Invalid NPM package name: ' + packageNameError);\r\n    }\r\n\r\n    for (const definition of definitions) {\r\n      if (!DocNodeManager._nodeKindRegExp.test(definition.docNodeKind)) {\r\n        throw new Error(\r\n          `The DocNode kind ${JSON.stringify(definition.docNodeKind)} is not a valid identifier.` +\r\n            ` It must start with an underscore or letter, and be comprised of letters, numbers, and underscores`\r\n        );\r\n      }\r\n\r\n      let existingDefinition: IRegisteredDocNodeDefinition | undefined = this._docNodeDefinitionsByKind.get(\r\n        definition.docNodeKind\r\n      );\r\n\r\n      if (existingDefinition !== undefined) {\r\n        throw new Error(\r\n          `The DocNode kind \"${definition.docNodeKind}\" was already registered` +\r\n            ` by ${existingDefinition.packageName}`\r\n        );\r\n      }\r\n\r\n      existingDefinition = this._docNodeDefinitionsByConstructor.get(definition.constructor);\r\n      if (existingDefinition !== undefined) {\r\n        throw new Error(\r\n          `This DocNode constructor was already registered by ${existingDefinition.packageName}` +\r\n            ` as ${existingDefinition.docNodeKind}`\r\n        );\r\n      }\r\n\r\n      const newDefinition: IRegisteredDocNodeDefinition = {\r\n        docNodeKind: definition.docNodeKind,\r\n        constructor: definition.constructor,\r\n        packageName,\r\n        allowedChildKinds: new Set<string>()\r\n      };\r\n\r\n      this._docNodeDefinitionsByKind.set(definition.docNodeKind, newDefinition);\r\n      this._docNodeDefinitionsByConstructor.set(definition.constructor, newDefinition);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reports an error if the specified DocNode kind has not been registered.\r\n   */\r\n  public throwIfNotRegisteredKind(docNodeKind: string): void {\r\n    if (!this._docNodeDefinitionsByKind.has(docNodeKind)) {\r\n      throw new Error(`The DocNode kind \"${docNodeKind}\" was not registered with this TSDocConfiguration`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For the given parent DocNode kind, registers the specified DocNode kinds as being allowable children of\r\n   * the parent.\r\n   *\r\n   * @remarks\r\n   * To prevent mistakes, `DocNodeContainer` will report an error if you try to add node that was not registered\r\n   * as an allowable child of the container.\r\n   */\r\n  public registerAllowableChildren(parentKind: string, childKinds: ReadonlyArray<string>): void {\r\n    const parentDefinition: IRegisteredDocNodeDefinition = this._getDefinition(parentKind);\r\n\r\n    for (const childKind of childKinds) {\r\n      this._getDefinition(childKind);\r\n      parentDefinition.allowedChildKinds.add(childKind);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the specified DocNode kind has been registered as an allowable child of the specified\r\n   * parent DocNode kind.\r\n   */\r\n  public isAllowedChild(parentKind: string, childKind: string): boolean {\r\n    const parentDefinition: IRegisteredDocNodeDefinition = this._getDefinition(parentKind);\r\n    return parentDefinition.allowedChildKinds.has(childKind);\r\n  }\r\n\r\n  private _getDefinition(docNodeKind: string): IRegisteredDocNodeDefinition {\r\n    const definition: IRegisteredDocNodeDefinition | undefined = this._docNodeDefinitionsByKind.get(\r\n      docNodeKind\r\n    );\r\n    if (definition === undefined) {\r\n      throw new Error(`The DocNode kind \"${docNodeKind}\" was not registered with this TSDocConfiguration`);\r\n    }\r\n    return definition;\r\n  }\r\n}\r\n", "/**\r\n * Used to group the {@link StandardTags} definitions according to the level of support\r\n * expected from documentation tools that implement the standard.\r\n */\r\nexport enum Standardization {\r\n  /**\r\n   * TSDoc tags in the \"Core\" standardization group are considered essential.\r\n   * Their meaning is standardized, and every documentation tool is expected\r\n   * to recognize them.  The TSDoc parser library typically provides dedicated APIs\r\n   * for accessing these tags.\r\n   */\r\n  Core = 'Core',\r\n\r\n  /**\r\n   * TSDoc tags in the \"Extended\" standardization group are optional.  Documentation tools\r\n   * may or may not support them.  If they do, the syntax and semantics should conform to\r\n   * the TSDoc standard definitions.\r\n   */\r\n  Extended = 'Extended',\r\n\r\n  /**\r\n   * TSDoc tags in the \"Discretionary\" standardization group are optional.  Although the\r\n   * syntax is specified, the semantics for these tags are implementation-specific\r\n   * (and sometimes difficult to describe completely without referring to a specific\r\n   * implementation).  Discretionary tags are included in the TSDoc standard to ensure that\r\n   * if two different popular tools use the same tag name, developers can expect the syntax\r\n   * to be the same, and the semantics to be somewhat similar.\r\n   */\r\n  Discretionary = 'Discretionary',\r\n\r\n  /**\r\n   * The tag is not part of the TSDoc standard.  All used-defined tags are assigned to this group.\r\n   */\r\n  None = 'None'\r\n}\r\n", "import { StringChecks } from '../parser/StringChecks';\r\nimport { Standardization } from '../details/Standardization';\r\n\r\n/**\r\n * Determines the type of syntax for a TSDocTagDefinition\r\n */\r\nexport enum TSDocTagSyntaxKind {\r\n  /**\r\n   * The tag is intended to be an inline tag.  For example: `{@link}`.\r\n   */\r\n  InlineTag,\r\n\r\n  /**\r\n   * The tag is intended to be a block tag that starts a new documentation\r\n   * section.  For example: `@remarks`\r\n   */\r\n  BlockTag,\r\n\r\n  /**\r\n   * The tag is intended to be a modifier tag whose presence indicates\r\n   * an aspect of the associated API item.  For example: `@internal`\r\n   */\r\n  ModifierTag\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link TSDocTagDefinition}\r\n */\r\nexport interface ITSDocTagDefinitionParameters {\r\n  tagName: string;\r\n  syntaxKind: TSDocTagSyntaxKind;\r\n  allowMultiple?: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ITSDocTagDefinitionInternalParameters extends ITSDocTagDefinitionParameters {\r\n  standardization: Standardization;\r\n}\r\n\r\n/**\r\n * Defines a TSDoc tag that will be understood by the TSDocParser.\r\n */\r\nexport class TSDocTagDefinition {\r\n  /**\r\n   * The TSDoc tag name.  TSDoc tag names start with an at-sign (`@`) followed\r\n   * by ASCII letters using \"camelCase\" capitalization.\r\n   */\r\n  public readonly tagName: string;\r\n\r\n  /**\r\n   * The TSDoc tag name in all capitals, which is used for performing\r\n   * case-insensitive comparisons or lookups.\r\n   */\r\n  public readonly tagNameWithUpperCase: string;\r\n\r\n  /**\r\n   * Specifies the expected syntax for this tag.\r\n   */\r\n  public readonly syntaxKind: TSDocTagSyntaxKind;\r\n\r\n  /**\r\n   * Indicates the level of support expected from documentation tools that implement\r\n   * the standard.\r\n   */\r\n  public readonly standardization: Standardization;\r\n\r\n  /**\r\n   * If true, then this TSDoc tag may appear multiple times in a doc comment.\r\n   * By default, a tag may only appear once.\r\n   */\r\n  public readonly allowMultiple: boolean;\r\n\r\n  public constructor(parameters: ITSDocTagDefinitionParameters) {\r\n    StringChecks.validateTSDocTagName(parameters.tagName);\r\n    this.tagName = parameters.tagName;\r\n    this.tagNameWithUpperCase = parameters.tagName.toUpperCase();\r\n    this.syntaxKind = parameters.syntaxKind;\r\n    this.standardization =\r\n      (parameters as ITSDocTagDefinitionInternalParameters).standardization || Standardization.None;\r\n    this.allowMultiple = !!parameters.allowMultiple;\r\n  }\r\n\r\n  /**\r\n   * Throws an exception if `tagName` is not a valid TSDoc tag name.\r\n   */\r\n  public static validateTSDocTagName(tagName: string): void {\r\n    StringChecks.validateTSDocTagName(tagName);\r\n  }\r\n}\r\n", "import {\r\n  TSDocTagDefinition,\r\n  TSDocTagSyntaxKind,\r\n  ITSDocTagDefinitionInternalParameters\r\n} from '../configuration/TSDocTagDefinition';\r\nimport { Standardization } from './Standardization';\r\n\r\n/**\r\n * Tags whose meaning is defined by the TSDoc standard.\r\n */\r\nexport class StandardTags {\r\n  /**\r\n   * (Discretionary)\r\n   *\r\n   * Suggested meaning: Designates that an API item's release stage is \"alpha\".\r\n   * It is intended to be used by third-party developers eventually, but has not\r\n   * yet been released.  The tooling may trim the declaration from a public release.\r\n   *\r\n   * @remarks\r\n   * Example implementations: API Extractor\r\n   */\r\n  public static readonly alpha: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@alpha',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Discretionary\r\n  });\r\n\r\n  /**\r\n   * (Discretionary)\r\n   *\r\n   * Suggested meaning: Designates that an API item's release stage is \"beta\".\r\n   * It has been released to third-party developers experimentally for the purpose of\r\n   * collecting feedback.  The API should not be used in production, because its contract may\r\n   * change without notice.  The tooling may trim the declaration from a public release,\r\n   * but may include it in a developer preview release.\r\n   *\r\n   * @remarks\r\n   * Example implementations: API Extractor\r\n   *\r\n   * Synonyms: `@experimental`\r\n   */\r\n  public static readonly beta: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@beta',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Discretionary\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * ECMAScript decorators are sometimes an important part of an API contract.\r\n   * However, today the TypeScript compiler does not represent decorators in the\r\n   * .d.ts output files used by API consumers.  The `@decorator` tag provides a workaround,\r\n   * enabling a decorator expressions to be quoted in a doc comment.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * class Book {\r\n   *   /**\r\n   *    * The title of the book.\r\n   *    * @decorator `@jsonSerialized`\r\n   *    * @decorator `@jsonFormat(JsonFormats.Url)`\r\n   *    *\r\n   *+/\r\n   *   @jsonSerialized\r\n   *   @jsonFormat(JsonFormats.Url)\r\n   *   public website: string;\r\n   * }\r\n   * ```\r\n   */\r\n  public static readonly decorator: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@decorator',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    allowMultiple: true,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * This block tag is used to document the default value for a field or property,\r\n   * if a value is not assigned explicitly.\r\n   *\r\n   * @remarks\r\n   * This tag should only be used with fields or properties that are members of a class or interface.\r\n   */\r\n  public static readonly defaultValue: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@defaultValue',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * This block tag communicates that an API item is no longer supported and may be removed\r\n   * in a future release.  The `@deprecated` tag is followed by a sentence describing\r\n   * the recommended alternative.  It recursively applies to members of the container.\r\n   * For example, if a class is deprecated, then so are all of its members.\r\n   */\r\n  public static readonly deprecated: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@deprecated',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * When applied to a class or interface property, this indicates that the property\r\n   * returns an event object that event handlers can be attached to.  The event-handling\r\n   * API is implementation-defined, but typically the property return type would be a class\r\n   * with members such as `addHandler()` and `removeHandler()`.  A documentation tool can\r\n   * display such properties under an \"Events\" heading instead of the usual \"Properties\" heading.\r\n   */\r\n  public static readonly eventProperty: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@eventProperty',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * Indicates a documentation section that should be presented as an example\r\n   * illustrating how to use the API.  It may include a code sample.\r\n   */\r\n  public static readonly example: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@example',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    allowMultiple: true,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Discretionary)\r\n   *\r\n   * Suggested meaning:  Same semantics as `@beta`, but used by tools that don't support\r\n   * an `@alpha` release stage.\r\n   *\r\n   * @remarks\r\n   * Example implementations: Angular API documenter\r\n   *\r\n   * Synonyms: `@beta`\r\n   */\r\n  public static readonly experimental: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@experimental',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Discretionary\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * This inline tag is used to automatically generate an API item's documentation by\r\n   * copying it from another API item.  The inline tag parameter contains a reference\r\n   * to the other item, which may be an unrelated class, or even an import from a\r\n   * separate NPM package.\r\n   *\r\n   * @remarks\r\n   * What gets copied\r\n   *\r\n   * The `@inheritDoc` tag does not copy the entire comment body. Only the following\r\n   * components are copied:\r\n   * - summary section\r\n   * - `@remarks` block\r\n   * - `@params` blocks\r\n   * - `@typeParam` blocks\r\n   * - `@returns` block\r\n   * Other tags such as `@defaultValue` or `@example` are not copied, and need to be\r\n   * explicitly included after the `@inheritDoc` tag.\r\n   *\r\n   * TODO: The notation for API item references is still being standardized.  See this issue:\r\n   * https://github.com/microsoft/tsdoc/issues/9\r\n   */\r\n  public static readonly inheritDoc: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@inheritDoc',\r\n    syntaxKind: TSDocTagSyntaxKind.InlineTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Discretionary)\r\n   *\r\n   * Suggested meaning:  Designates that an API item is not planned to be used by\r\n   * third-party developers.  The tooling may trim the declaration from a public release.\r\n   * In some implementations, certain designated packages may be allowed to consume\r\n   * internal API items, e.g. because the packages are components of the same product.\r\n   *\r\n   * @remarks\r\n   * Example implementations: API Extractor\r\n   */\r\n  public static readonly internal: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@internal',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Discretionary\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * The `{@label}` inline tag is used to label a declaration, so that it can be referenced\r\n   * using a selector in the TSDoc declaration reference notation.\r\n   *\r\n   * @remarks\r\n   * TODO: The `{@label}` notation is still being standardized.  See this issue:\r\n   * https://github.com/microsoft/tsdoc/issues/9\r\n   */\r\n  public static readonly label: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@label',\r\n    syntaxKind: TSDocTagSyntaxKind.InlineTag,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * The `{@link}` inline tag is used to create hyperlinks to other pages in a\r\n   * documentation system or general internet URLs.  In particular, it supports\r\n   * expressions for referencing API items.\r\n   *\r\n   * @remarks\r\n   * TODO: The `{@link}` notation is still being standardized.  See this issue:\r\n   * https://github.com/microsoft/tsdoc/issues/9\r\n   */\r\n  public static readonly link: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@link',\r\n    syntaxKind: TSDocTagSyntaxKind.InlineTag,\r\n    allowMultiple: true,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * This modifier has similar semantics to the `override` keyword in C# or Java.\r\n   * For a member function or property, explicitly indicates that this definition\r\n   * is overriding (i.e. redefining) the definition inherited from the base class.\r\n   * The base class definition would normally be marked as `virtual`.\r\n   *\r\n   * @remarks\r\n   * A documentation tool may enforce that the `@virtual`, `@override`, and/or `@sealed`\r\n   * modifiers are consistently applied, but this is not required by the TSDoc standard.\r\n   */\r\n  public static readonly override: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@override',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * Used to indicate a doc comment that describes an entire NPM package (as opposed\r\n   * to an individual API item belonging to that package).  The `@packageDocumentation` comment\r\n   * is found in the *.d.ts file that acts as the entry point for the package, and it\r\n   * should be the first `/**` comment encountered in that file.  A comment containing a\r\n   * `@packageDocumentation` tag should never be used to describe an individual API item.\r\n   */\r\n  public static readonly packageDocumentation: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@packageDocumentation',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * Used to document a function parameter.  The `@param` tag is followed by a parameter\r\n   * name, followed by a hyphen, followed by a description.  The TSDoc parser recognizes\r\n   * this syntax and will extract it into a DocParamBlock node.\r\n   */\r\n  public static readonly param: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@param',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    allowMultiple: true,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * Starts a section of additional documentation content that is not intended for a\r\n   * public audience.  A tool must omit this entire section from the API reference web site,\r\n   * generated *.d.ts file, and any other outputs incorporating the content.\r\n   */\r\n  public static readonly privateRemarks: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@privateRemarks',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Discretionary)\r\n   *\r\n   * Suggested meaning: Designates that an API item's release stage is \"public\".\r\n   * It has been officially released to third-party developers, and its signature is\r\n   * guaranteed to be stable (e.g. following Semantic Versioning rules).\r\n   *\r\n   * @remarks\r\n   * Example implementations: API Extractor\r\n   */\r\n  public static readonly public: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@public',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Discretionary\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * This modifier tag indicates that an API item should be documented as being read-only,\r\n   * even if the TypeScript type system may indicate otherwise.  For example, suppose a\r\n   * class property has a setter function that always throws an exception explaining that\r\n   * the property cannot be assigned; in this situation, the `@readonly` modifier can be\r\n   * added so that the property is shown as read-only in the documentation.\r\n   *\r\n   * @remarks\r\n   * Example implementations: API Extractor\r\n   */\r\n  public static readonly readonly: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@readonly',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * The main documentation for an API item is separated into a brief \"summary\" section,\r\n   * optionally followed by a more detailed \"remarks\" section.  On a documentation web site,\r\n   * index pages (e.g. showing members of a class) will show only the brief summaries,\r\n   * whereas a detail pages (e.g. describing a single member) will show the summary followed\r\n   * by the remarks.  The `@remarks` block tag ends the summary section, and begins the\r\n   * remarks section for a doc comment.\r\n   */\r\n  public static readonly remarks: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@remarks',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * Used to document the return value for a function.\r\n   */\r\n  public static readonly returns: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@returns',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * This modifier has similar semantics to the `sealed` keyword in C# or Java.\r\n   * For a class, indicates that subclasses must not inherit from the class.\r\n   * For a member function or property, indicates that subclasses must not override\r\n   * (i.e. redefine) the member.\r\n   *\r\n   * @remarks\r\n   * A documentation tool may enforce that the `@virtual`, `@override`, and/or `@sealed`\r\n   * modifiers are consistently applied, but this is not required by the TSDoc standard.\r\n   */\r\n  public static readonly sealed: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@sealed',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * Used to build a list of references to an API item or other resource that may be related to the\r\n   * current item.\r\n   *\r\n   * @remarks\r\n   *\r\n   * For example:\r\n   *\r\n   * ```ts\r\n   * /**\r\n   *  * Parses a string containing a Uniform Resource Locator (URL).\r\n   *  * @see {@link ParsedUrl} for the returned data structure\r\n   *  * @see {@link https://tools.ietf.org/html/rfc1738|RFC 1738}\r\n   *  * for syntax\r\n   *  * @see your developer SDK for code samples\r\n   *  * @param url - the string to be parsed\r\n   *  * @returns the parsed result\r\n   *  &#42;/\r\n   * function parseURL(url: string): ParsedUrl;\r\n   * ```\r\n   *\r\n   * `@see` is a block tag.  Each block becomes an item in the list of references.  For example, a documentation\r\n   * system might render the above blocks as follows:\r\n   *\r\n   * ```markdown\r\n   * `function parseURL(url: string): ParsedUrl;`\r\n   *\r\n   * Parses a string containing a Uniform Resource Locator (URL).\r\n   *\r\n   * ## See Also\r\n   * - ParsedUrl for the returned data structure\r\n   * - RFC 1738 for syntax\r\n   * - your developer SDK for code samples\r\n   * ```\r\n   *\r\n   * NOTE: JSDoc attempts to automatically hyperlink the text immediately after `@see`.  Because this is ambiguous\r\n   * with plain text, TSDoc instead requires an explicit `{@link}` tag to make hyperlinks.\r\n   */\r\n  public static readonly see: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@see',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * Used to document an exception type that may be thrown by a function or property.\r\n   *\r\n   * @remarks\r\n   *\r\n   * A separate `@throws` block should be used to document each exception type.  This tag is for informational\r\n   * purposes only, and does not restrict other types from being thrown.  It is suggested, but not required,\r\n   * for the `@throws` block to start with a line containing only the name of the exception.\r\n   *\r\n   * For example:\r\n   *\r\n   * ```ts\r\n   * /**\r\n   *  * Retrieves metadata about a book from the catalog.\r\n   *  *\r\n   *  * @param isbnCode - the ISBN number for the book\r\n   *  * @returns the retrieved book object\r\n   *  *\r\n   *  * @throws {@link IsbnSyntaxError}\r\n   *  * This exception is thrown if the input is not a valid ISBN number.\r\n   *  *\r\n   *  * @throws {@link book-lib#BookNotFoundError}\r\n   *  * Thrown if the ISBN number is valid, but no such book exists in the catalog.\r\n   *  *\r\n   *  * @public\r\n   *  &#42;/\r\n   * function fetchBookByIsbn(isbnCode: string): Book;\r\n   * ```\r\n   */\r\n  public static readonly throws: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@throws',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    allowMultiple: true,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * (Core)\r\n   *\r\n   * Used to document a generic parameter.  The `@typeParam` tag is followed by a parameter\r\n   * name, followed by a hyphen, followed by a description.  The TSDoc parser recognizes\r\n   * this syntax and will extract it into a DocParamBlock node.\r\n   */\r\n  public static readonly typeParam: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@typeParam',\r\n    syntaxKind: TSDocTagSyntaxKind.BlockTag,\r\n    allowMultiple: true,\r\n    standardization: Standardization.Core\r\n  });\r\n\r\n  /**\r\n   * (Extended)\r\n   *\r\n   * This modifier has similar semantics to the `virtual` keyword in C# or Java.\r\n   * For a member function or property, explicitly indicates that subclasses may override\r\n   * (i.e. redefine) the member.\r\n   *\r\n   * @remarks\r\n   * A documentation tool may enforce that the `@virtual`, `@override`, and/or `@sealed`\r\n   * modifiers are consistently applied, but this is not required by the TSDoc standard.\r\n   */\r\n  public static readonly virtual: TSDocTagDefinition = StandardTags._defineTag({\r\n    tagName: '@virtual',\r\n    syntaxKind: TSDocTagSyntaxKind.ModifierTag,\r\n    standardization: Standardization.Extended\r\n  });\r\n\r\n  /**\r\n   * Returns the full list of all core tags.\r\n   */\r\n  public static allDefinitions: ReadonlyArray<TSDocTagDefinition> = [\r\n    StandardTags.alpha,\r\n    StandardTags.beta,\r\n    StandardTags.defaultValue,\r\n    StandardTags.decorator,\r\n    StandardTags.deprecated,\r\n    StandardTags.eventProperty,\r\n    StandardTags.example,\r\n    StandardTags.experimental,\r\n    StandardTags.inheritDoc,\r\n    StandardTags.internal,\r\n    StandardTags.label,\r\n    StandardTags.link,\r\n    StandardTags.override,\r\n    StandardTags.packageDocumentation,\r\n    StandardTags.param,\r\n    StandardTags.privateRemarks,\r\n    StandardTags.public,\r\n    StandardTags.readonly,\r\n    StandardTags.remarks,\r\n    StandardTags.returns,\r\n    StandardTags.sealed,\r\n    StandardTags.see,\r\n    StandardTags.throws,\r\n    StandardTags.typeParam,\r\n    StandardTags.virtual\r\n  ];\r\n\r\n  private static _defineTag(parameters: ITSDocTagDefinitionInternalParameters): TSDocTagDefinition {\r\n    return new TSDocTagDefinition(parameters);\r\n  }\r\n}\r\n", "/**\r\n * Part of the {@link TSDocConfiguration} object.\r\n */\r\nexport class TSDocValidationConfiguration {\r\n  /**\r\n   * Set `ignoreUndefinedTags` to true to silently ignore unrecognized tags,\r\n   * instead of reporting a warning.\r\n   *\r\n   * @remarks\r\n   * Normally the parser will issue errors when it encounters tag names that do not\r\n   * have a corresponding definition in {@link TSDocConfiguration.tagDefinitions}.\r\n   * This helps to catch common mistakes such as a misspelled tag.\r\n   *\r\n   * @defaultValue `false`\r\n   */\r\n  public ignoreUndefinedTags: boolean = false;\r\n\r\n  /**\r\n   * Set `reportUnsupportedTags` to true to issue a warning for tags that are not\r\n   * supported by your tool.\r\n   *\r\n   * @remarks\r\n   * The TSDoc standard defines may tags.  By default it assumes that if your tool does\r\n   * not implement one of these tags, then it will simply ignore it.  But sometimes this\r\n   * may be misleading for developers. (For example, they might write an `@example` block\r\n   * and then be surprised if it doesn't appear in the documentation output.).\r\n   *\r\n   * For a better experience, you can tell the parser which tags you support, and then it\r\n   * will issue warnings wherever unsupported tags are used.  This is done using\r\n   * {@link TSDocConfiguration.setSupportForTag}.  Note that calling that function\r\n   * automatically sets `reportUnsupportedTags` to true.\r\n   *\r\n   * @defaultValue `false`\r\n   */\r\n  public reportUnsupportedTags: boolean = false;\r\n\r\n  /**\r\n   * Set `reportUnsupportedHtmlElements` to true to issue a warning for HTML elements which\r\n   * are not defined in your TSDoc configuration's `supportedHtmlElements` field.\r\n   *\r\n   * @defaultValue `false`\r\n   */\r\n  public reportUnsupportedHtmlElements: boolean = false;\r\n}\r\n", "import { TSDocConfiguration } from '../configuration/TSDocConfiguration';\r\n\r\n/**\r\n * Indicates the type of {@link DocNode}.\r\n *\r\n * @remarks\r\n * When creating custom subclasses of `DocNode`, it's recommended to create your own const enum to identify them.\r\n * To avoid naming conflicts between projects, the enum value should be a string comprised of your full\r\n * NPM package name, followed by a \"#\" symbol, followed by the class name (without the \"Doc\" prefix).\r\n */\r\nexport enum DocNodeKind {\r\n  Block = 'Block',\r\n  BlockTag = 'BlockTag',\r\n  Excerpt = 'Excerpt',\r\n  FencedCode = 'FencedCode',\r\n  CodeSpan = 'CodeSpan',\r\n  Comment = 'Comment',\r\n  DeclarationReference = 'DeclarationReference',\r\n  ErrorText = 'ErrorText',\r\n  EscapedText = 'EscapedText',\r\n  HtmlAttribute = 'HtmlAttribute',\r\n  HtmlEndTag = 'HtmlEndTag',\r\n  HtmlStartTag = 'HtmlStartTag',\r\n  InheritDocTag = 'InheritDocTag',\r\n  InlineTag = 'InlineTag',\r\n  LinkTag = 'LinkTag',\r\n  MemberIdentifier = 'MemberIdentifier',\r\n  MemberReference = 'MemberReference',\r\n  MemberSelector = 'MemberSelector',\r\n  MemberSymbol = 'MemberSymbol',\r\n  Paragraph = 'Paragraph',\r\n  ParamBlock = 'ParamBlock',\r\n  ParamCollection = 'ParamCollection',\r\n  PlainText = 'PlainText',\r\n  Section = 'Section',\r\n  SoftBreak = 'SoftBreak'\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocNode}.\r\n *\r\n * @remarks\r\n * There are two scenarios for constructing `DocNode` objects.  The \"builder scenario\" constructs the object based on\r\n * literal strings, does NOT create DocExcerpt child nodes, and generally uses the `IDocNodeParameters`\r\n * hierarchy for its constructor parameters.  The \"parser scenario\" constructs the object by parsing a TypeScript\r\n * source file, does create DocExcerpt child nodes, and generally uses the {@link IDocNodeParsedParameters} hierarchy.\r\n */\r\nexport interface IDocNodeParameters {\r\n  configuration: TSDocConfiguration;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocNode}.\r\n *\r\n * @remarks\r\n * There are two scenarios for constructing `DocNode` objects.  The \"builder scenario\" constructs the object based on\r\n * literal strings, does NOT create DocExcerpt child nodes, and generally uses the {@link IDocNodeParameters}\r\n * hierarchy for its constructor parameters.  The \"parser scenario\" constructs the object by parsing a TypeScript\r\n * source file, does create DocExcerpt child nodes, and generally uses the `IDocNodeParsedParameters` hierarchy.\r\n */\r\nexport interface IDocNodeParsedParameters {\r\n  configuration: TSDocConfiguration;\r\n\r\n  /**\r\n   * This is a marker used by {@link DocNode.isParsedParameters} to determine whether the constructor was\r\n   * invoked using `IDocNodeParameters` (builder scenario) or `IDocNodeParsedParameters` (parser scenario).\r\n   */\r\n  parsed: true;\r\n}\r\n\r\n/**\r\n * The base class for the parser's Abstract Syntax Tree nodes.\r\n */\r\nexport abstract class DocNode {\r\n  public readonly configuration: TSDocConfiguration;\r\n\r\n  public constructor(parameters: IDocNodeParameters | IDocNodeParsedParameters) {\r\n    this.configuration = parameters.configuration;\r\n  }\r\n\r\n  /**\r\n   * Returns a text string that uniquely identifies the child class type.  This is used for example by\r\n   * switch statements to efficiently determine the kind of node.\r\n   */\r\n  public abstract get kind(): DocNodeKind | string;\r\n\r\n  /**\r\n   * Returns the list of child nodes for this node.  This is useful for visitors that want\r\n   * to scan the tree looking for nodes of a specific type, without having to process\r\n   * intermediary nodes.\r\n   */\r\n  public getChildNodes(): ReadonlyArray<DocNode> {\r\n    // Do this sanity check here, since the constructor cannot access abstract members\r\n    this.configuration.docNodeManager.throwIfNotRegisteredKind(this.kind);\r\n\r\n    return this.onGetChildNodes().filter((x) => x !== undefined) as ReadonlyArray<DocNode>;\r\n  }\r\n\r\n  /**\r\n   * Overridden by child classes to implement {@link DocNode.getChildNodes}.\r\n   * @virtual\r\n   */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * A type guard that returns true if the input uses the `IDocNodeParsedParameters` (parser scenario).\r\n   *\r\n   * @remarks\r\n   * There are two scenarios for constructing `DocNode` objects.  The \"builder scenario\" constructs the object based on\r\n   * literal strings, does NOT create DocExcerpt child nodes, and generally uses the {@link IDocNodeParameters}\r\n   * hierarchy for its constructor parameters.  The \"parser scenario\" constructs the object by parsing a TypeScript\r\n   * source file, does create DocExcerpt child nodes, and generally uses the {@link IDocNodeParsedParameters} hierarchy.\r\n   */\r\n  public static isParsedParameters(\r\n    parameters: IDocNodeParameters | IDocNodeParsedParameters\r\n  ): parameters is IDocNodeParsedParameters {\r\n    return (parameters as IDocNodeParsedParameters).parsed === true;\r\n  }\r\n}\r\n", "import { TSDocConfiguration } from '../configuration/TSDocConfiguration';\r\nimport { DocNodeManager } from '../configuration/DocNodeManager';\r\nimport { DocNodeKind } from './DocNode';\r\nimport * as nodes from '..';\r\n\r\nexport class BuiltInDocNodes {\r\n  public static register(configuration: TSDocConfiguration): void {\r\n    const docNodeManager: DocNodeManager = configuration.docNodeManager;\r\n\r\n    docNodeManager.registerDocNodes('@microsoft/tsdoc', [\r\n      { docNodeKind: DocNodeKind.Block, constructor: nodes.DocBlock },\r\n      { docNodeKind: DocNodeKind.BlockTag, constructor: nodes.DocBlockTag },\r\n      { docNodeKind: DocNodeKind.CodeSpan, constructor: nodes.DocCodeSpan },\r\n      { docNodeKind: DocNodeKind.Comment, constructor: nodes.DocComment },\r\n      { docNodeKind: DocNodeKind.DeclarationReference, constructor: nodes.DocDeclarationReference },\r\n      { docNodeKind: DocNodeKind.ErrorText, constructor: nodes.DocErrorText },\r\n      { docNodeKind: DocNodeKind.EscapedText, constructor: nodes.DocEscapedText },\r\n      { docNodeKind: DocNodeKind.Excerpt, constructor: nodes.DocExcerpt },\r\n      { docNodeKind: DocNodeKind.FencedCode, constructor: nodes.DocFencedCode },\r\n      { docNodeKind: DocNodeKind.HtmlAttribute, constructor: nodes.DocHtmlAttribute },\r\n      { docNodeKind: DocNodeKind.HtmlEndTag, constructor: nodes.DocHtmlEndTag },\r\n      { docNodeKind: DocNodeKind.HtmlStartTag, constructor: nodes.DocHtmlStartTag },\r\n      { docNodeKind: DocNodeKind.InheritDocTag, constructor: nodes.DocInheritDocTag },\r\n      { docNodeKind: DocNodeKind.InlineTag, constructor: nodes.DocInlineTag },\r\n      { docNodeKind: DocNodeKind.LinkTag, constructor: nodes.DocLinkTag },\r\n      { docNodeKind: DocNodeKind.MemberIdentifier, constructor: nodes.DocMemberIdentifier },\r\n      { docNodeKind: DocNodeKind.MemberReference, constructor: nodes.DocMemberReference },\r\n      { docNodeKind: DocNodeKind.MemberSelector, constructor: nodes.DocMemberSelector },\r\n      { docNodeKind: DocNodeKind.MemberSymbol, constructor: nodes.DocMemberSymbol },\r\n      { docNodeKind: DocNodeKind.Paragraph, constructor: nodes.DocParagraph },\r\n      { docNodeKind: DocNodeKind.ParamBlock, constructor: nodes.DocParamBlock },\r\n      { docNodeKind: DocNodeKind.ParamCollection, constructor: nodes.DocParamCollection },\r\n      { docNodeKind: DocNodeKind.PlainText, constructor: nodes.DocPlainText },\r\n      { docNodeKind: DocNodeKind.Section, constructor: nodes.DocSection },\r\n      { docNodeKind: DocNodeKind.SoftBreak, constructor: nodes.DocSoftBreak }\r\n    ]);\r\n\r\n    docNodeManager.registerAllowableChildren(DocNodeKind.Section, [\r\n      DocNodeKind.FencedCode,\r\n      DocNodeKind.Paragraph,\r\n      DocNodeKind.HtmlStartTag,\r\n      DocNodeKind.HtmlEndTag\r\n    ]);\r\n\r\n    docNodeManager.registerAllowableChildren(DocNodeKind.Paragraph, [\r\n      DocNodeKind.BlockTag,\r\n      DocNodeKind.CodeSpan,\r\n      DocNodeKind.ErrorText,\r\n      DocNodeKind.EscapedText,\r\n      DocNodeKind.HtmlStartTag,\r\n      DocNodeKind.HtmlEndTag,\r\n      DocNodeKind.InlineTag,\r\n      DocNodeKind.LinkTag,\r\n      DocNodeKind.PlainText,\r\n      DocNodeKind.SoftBreak\r\n    ]);\r\n  }\r\n}\r\n", "/**\r\n * Unique identifiers for messages reported by the TSDoc parser.\r\n *\r\n * @remarks\r\n *\r\n * These strings are possible values for the {@link ParserMessage.messageId} property.\r\n * These identifiers can be used to suppress or configure the reporting of individual messages.\r\n * They are also useful when searching for help about a particular error.\r\n *\r\n * @public\r\n */\r\nexport enum TSDocMessageId {\r\n  /**\r\n   * File not found\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when it failed to find a `tsdoc.json` file.\r\n   */\r\n  ConfigFileNotFound = 'tsdoc-config-file-not-found',\r\n\r\n  /**\r\n   * Error parsing JSON input: ___\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when the `tsdoc.json` file has invalid JSON syntax.\r\n   */\r\n  ConfigInvalidJson = 'tsdoc-config-invalid-json',\r\n\r\n  /**\r\n   * Unsupported JSON \"$schema\" value\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when the file format is not supported.\r\n   */\r\n  ConfigFileUnsupportedSchema = 'tsdoc-config-unsupported-schema',\r\n\r\n  /**\r\n   * Error loading config file: ___\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when the config file doesn't conform to its schema.\r\n   */\r\n  ConfigFileSchemaError = 'tsdoc-config-schema-error',\r\n\r\n  /**\r\n   * Circular reference encountered for \"extends\" field of \"___\"\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when the \"extends\" field creates a chain of references\r\n   * that causes a file to indirectly extend itself.\r\n   */\r\n  ConfigFileCyclicExtends = 'tsdoc-config-cyclic-extends',\r\n\r\n  /**\r\n   * Unable to resolve \"extends\" reference to \"___\"\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when module resolution fails for the \"extends\" field.\r\n   */\r\n  ConfigFileUnresolvedExtends = 'tsdoc-config-unresolved-extends',\r\n\r\n  /**\r\n   * The \"supportForTags\" field refers to an undefined tag \"___\".\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when loading the tsdoc.json config file.\r\n   */\r\n  ConfigFileUndefinedTag = 'tsdoc-config-undefined-tag',\r\n\r\n  /**\r\n   * The \"tagDefinitions\" field specifies more than one tag with the name \"___\".\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when loading the tsdoc.json config file.\r\n   */\r\n  ConfigFileDuplicateTagName = 'tsdoc-config-duplicate-tag-name',\r\n\r\n  /**\r\n   * A TSDoc tag name must start with a letter and contain only letters and numbers.\r\n   * @remarks\r\n   * Reported by the `@microsoft/tsdoc-config` package when loading the tsdoc.json config file.\r\n   */\r\n  ConfigFileInvalidTagName = 'tsdoc-config-invalid-tag-name',\r\n\r\n  /**\r\n   * Expecting a `/**` comment.\r\n   * Unexpected end of input.\r\n   */\r\n  CommentNotFound = 'tsdoc-comment-not-found',\r\n\r\n  /**\r\n   * Expecting a leading `/**`\r\n   */\r\n  CommentOpeningDelimiterSyntax = 'tsdoc-comment-missing-opening-delimiter',\r\n\r\n  /**\r\n   * Unexpected end of input.\r\n   */\r\n  CommentMissingClosingDelimiter = 'tsdoc-comment-missing-closing-delimiter',\r\n\r\n  /**\r\n   * A doc comment cannot have more than one `@inheritDoc` tag\r\n   */\r\n  ExtraInheritDocTag = 'tsdoc-extra-inheritdoc-tag',\r\n\r\n  /**\r\n   * The `}` character should be escaped using a backslash to avoid confusion with a TSDoc inline tag.\r\n   */\r\n  EscapeRightBrace = 'tsdoc-escape-right-brace',\r\n\r\n  /**\r\n   * The `>` character should be escaped using a backslash to avoid confusion with an HTML tag.\r\n   */\r\n  EscapeGreaterThan = 'tsdoc-escape-greater-than',\r\n\r\n  /**\r\n   * The ___ block must include a deprecation message, e.g. describing the recommended alternative.\r\n   */\r\n  MissingDeprecationMessage = 'tsdoc-missing-deprecation-message',\r\n\r\n  /**\r\n   * A ___ block must not be used, because that content is provided by the `@inheritDoc` tag.\r\n   */\r\n  InheritDocIncompatibleTag = 'tsdoc-inheritdoc-incompatible-tag',\r\n\r\n  /**\r\n   * The summary section must not have any content, because that content is provided by the `@inheritDoc` tag.\r\n   */\r\n  InheritDocIncompatibleSummary = 'tsdoc-inheritdoc-incompatible-summary',\r\n\r\n  /**\r\n   * The TSDoc tag ___ is an inline tag; it must be enclosed in `{ }` braces.\r\n   */\r\n  InlineTagMissingBraces = 'tsdoc-inline-tag-missing-braces',\r\n\r\n  /**\r\n   * The TSDoc tag ___ is not an inline tag; it must not be enclosed in `{ }` braces.\r\n   */\r\n  TagShouldNotHaveBraces = 'tsdoc-tag-should-not-have-braces',\r\n\r\n  /**\r\n   * The TSDoc tag ___ is not supported by this tool.\r\n   */\r\n  UnsupportedTag = 'tsdoc-unsupported-tag',\r\n\r\n  /**\r\n   * The TSDoc tag ___ is not defined in this configuration.\r\n   */\r\n  UndefinedTag = 'tsdoc-undefined-tag',\r\n\r\n  /**\r\n   * The `@param` block should not include a JSDoc-style `{type}`.\r\n   */\r\n  ParamTagWithInvalidType = 'tsdoc-param-tag-with-invalid-type',\r\n\r\n  /**\r\n   * The `@param` block should not include a JSDoc-style optional name; it must not be enclosed in `[ ]` brackets.\r\n   */\r\n  ParamTagWithInvalidOptionalName = 'tsdoc-param-tag-with-invalid-optional-name',\r\n\r\n  /**\r\n   * The `@param` block should be followed by a parameter name.\r\n   */\r\n  ParamTagWithInvalidName = 'tsdoc-param-tag-with-invalid-name',\r\n\r\n  /**\r\n   * The `@param` block should be followed by a parameter name and then a hyphen.\r\n   */\r\n  ParamTagMissingHyphen = 'tsdoc-param-tag-missing-hyphen',\r\n\r\n  /**\r\n   * A backslash must precede another character that is being escaped.  OR\r\n   * A backslash can only be used to escape a punctuation character.\r\n   */\r\n  UnnecessaryBackslash = 'tsdoc-unnecessary-backslash',\r\n\r\n  /**\r\n   * Expecting a TSDoc tag starting with `@`.  OR\r\n   * Expecting a TSDoc tag starting with `{`.\r\n   */\r\n  MissingTag = 'tsdoc-missing-tag',\r\n\r\n  /**\r\n   * The `@` character looks like part of a TSDoc tag; use a backslash to escape it.\r\n   */\r\n  AtSignInWord = 'tsdoc-at-sign-in-word',\r\n\r\n  /**\r\n   * Expecting a TSDoc tag name after `@`; if it is not a tag, use a backslash to escape this character.\r\n   */\r\n  AtSignWithoutTagName = 'tsdoc-at-sign-without-tag-name',\r\n\r\n  /**\r\n   * Expecting a TSDoc tag starting with `{@`.  OR\r\n   * Expecting a TSDoc inline tag name after the `{@` characters.\r\n   */\r\n  MalformedInlineTag = 'tsdoc-malformed-inline-tag',\r\n\r\n  /**\r\n   * The token ___ looks like a TSDoc tag but contains an invalid character ___; if it is not a tag,\r\n   * use a backslash to escape the `@`.\r\n   */\r\n  CharactersAfterBlockTag = 'tsdoc-characters-after-block-tag',\r\n\r\n  /**\r\n   * A TSDoc tag name must start with a letter and contain only letters and numbers.\r\n   */\r\n  MalformedTagName = 'tsdoc-malformed-tag-name',\r\n\r\n  /**\r\n   * The character ___ cannot appear after the TSDoc tag name; expecting a space.\r\n   */\r\n  CharactersAfterInlineTag = 'tsdoc-characters-after-inline-tag',\r\n\r\n  /**\r\n   * The TSDoc inline tag name is missing its closing `}`.\r\n   */\r\n  InlineTagMissingRightBrace = 'tsdoc-inline-tag-missing-right-brace',\r\n\r\n  /**\r\n   * The `{` character must be escaped with a backslash when used inside a TSDoc inline tag.\r\n   */\r\n  InlineTagUnescapedBrace = 'tsdoc-inline-tag-unescaped-brace',\r\n\r\n  /**\r\n   * Unexpected character after declaration reference.\r\n   */\r\n  InheritDocTagSyntax = 'tsdoc-inheritdoc-tag-syntax',\r\n\r\n  /**\r\n   * The `@link` tag content is missing.\r\n   */\r\n  LinkTagEmpty = 'tsdoc-link-tag-empty',\r\n\r\n  /**\r\n   * The ___ character may not be used in the link text without escaping it.\r\n   */\r\n  LinkTagUnescapedText = 'tsdoc-link-tag-unescaped-text',\r\n\r\n  /**\r\n   * Unexpected character after link destination.\r\n   */\r\n  LinkTagDestinationSyntax = 'tsdoc-link-tag-destination-syntax',\r\n\r\n  /**\r\n   * The URL cannot be empty.  OR\r\n   * An `@link` URL must begin with a scheme comprised only of letters and numbers followed by `://`.  OR\r\n   * An `@link` URL must have at least one character after `://`.\r\n   */\r\n  LinkTagInvalidUrl = 'tsdoc-link-tag-invalid-url',\r\n\r\n  /**\r\n   * The declaration reference appears to contain a package name or import path, but it is missing the `#` delimiter.\r\n   */\r\n  ReferenceMissingHash = 'tsdoc-reference-missing-hash',\r\n\r\n  /**\r\n   * The hash character must be preceded by a package name or import path.\r\n   */\r\n  ReferenceHashSyntax = 'tsdoc-reference-hash-syntax',\r\n\r\n  /**\r\n   * The package name cannot be an empty string.  OR\r\n   * The package name ___ is not a valid package name.\r\n   */\r\n  ReferenceMalformedPackageName = 'tsdoc-reference-malformed-package-name',\r\n\r\n  /**\r\n   * An import path must not contain `//`.  OR\r\n   * An import path must not end with `/`.  OR\r\n   * An import path must not start with `/` unless prefixed by a package name.\r\n   */\r\n  ReferenceMalformedImportPath = 'tsdoc-reference-malformed-import-path',\r\n\r\n  /**\r\n   * Expecting a declaration reference.\r\n   */\r\n  MissingReference = 'tsdoc-missing-reference',\r\n\r\n  /**\r\n   * Expecting a period before the next component of a declaration reference\r\n   */\r\n  ReferenceMissingDot = 'tsdoc-reference-missing-dot',\r\n\r\n  /**\r\n   * Syntax error in declaration reference: the member selector must be enclosed in parentheses.\r\n   */\r\n  ReferenceSelectorMissingParens = 'tsdoc-reference-selector-missing-parens',\r\n\r\n  /**\r\n   * Expecting a colon after the identifier because the expression is in parentheses.\r\n   */\r\n  ReferenceMissingColon = 'tsdoc-reference-missing-colon',\r\n\r\n  /**\r\n   * Expecting a matching right parenthesis.\r\n   */\r\n  ReferenceMissingRightParen = 'tsdoc-reference-missing-right-paren',\r\n\r\n  /**\r\n   * Missing declaration reference in symbol reference\r\n   */\r\n  ReferenceSymbolSyntax = 'tsdoc-reference-symbol-syntax',\r\n\r\n  /**\r\n   * Missing closing square bracket for symbol reference\r\n   */\r\n  ReferenceMissingRightBracket = 'tsdoc-reference-missing-right-bracket',\r\n\r\n  /**\r\n   * Unexpected end of input inside quoted member identifier.\r\n   */\r\n  ReferenceMissingQuote = 'tsdoc-reference-missing-quote',\r\n\r\n  /**\r\n   * The quoted identifier cannot be empty.\r\n   */\r\n  ReferenceEmptyIdentifier = 'tsdoc-reference-empty-identifier',\r\n\r\n  /**\r\n   * Syntax error in declaration reference: expecting a member identifier.\r\n   */\r\n  ReferenceMissingIdentifier = 'tsdoc-reference-missing-identifier',\r\n\r\n  /**\r\n   * The identifier cannot be an empty string. OR\r\n   * The identifier cannot non-word characters. OR\r\n   * The identifier must not start with a number. OR\r\n   * The identifier ___ must be quoted because it is a TSDoc system selector name.\r\n   */\r\n  ReferenceUnquotedIdentifier = 'tsdoc-reference-unquoted-identifier',\r\n\r\n  /**\r\n   * Expecting a selector label after the colon.\r\n   */\r\n  ReferenceMissingLabel = 'tsdoc-reference-missing-label',\r\n\r\n  /**\r\n   * The selector cannot be an empty string.  OR\r\n   * If the selector begins with a number, it must be a positive integer value.  OR\r\n   * A label selector must be comprised of upper case letters, numbers, and underscores\r\n   * and must not start with a number.  OR\r\n   * The selector ___ is not a recognized TSDoc system selector name.\r\n   */\r\n  ReferenceSelectorSyntax = 'tsdoc-reference-selector-syntax',\r\n\r\n  /**\r\n   * Expecting an attribute or `>` or `/>`.\r\n   */\r\n  HtmlTagMissingGreaterThan = 'tsdoc-html-tag-missing-greater-than',\r\n\r\n  /**\r\n   * Expecting `=` after HTML attribute name.\r\n   */\r\n  HtmlTagMissingEquals = 'tsdoc-html-tag-missing-equals',\r\n\r\n  /**\r\n   * Expecting an HTML string starting with a single-quote or double-quote character.\r\n   */\r\n  HtmlTagMissingString = 'tsdoc-html-tag-missing-string',\r\n\r\n  /**\r\n   * The HTML string is missing its closing quote.\r\n   */\r\n  HtmlStringMissingQuote = 'tsdoc-html-string-missing-quote',\r\n\r\n  /**\r\n   * The next character after a closing quote must be spacing or punctuation.\r\n   */\r\n  TextAfterHtmlString = 'tsdoc-text-after-html-string',\r\n\r\n  /**\r\n   * Expecting an HTML tag starting with `</`.\r\n   */\r\n  MissingHtmlEndTag = 'tsdoc-missing-html-end-tag',\r\n\r\n  /**\r\n   * A space is not allowed here.  OR\r\n   * Expecting an HTML name.  OR\r\n   * An HTML name must be a sequence of letters separated by hyphens.\r\n   */\r\n  MalformedHtmlName = 'tsdoc-malformed-html-name',\r\n\r\n  /**\r\n   * This HTML element name is not defined by your TSDoc configuration.\r\n   */\r\n  UnsupportedHtmlElementName = 'tsdoc-unsupported-html-name',\r\n\r\n  /**\r\n   * The opening backtick for a code fence must appear at the start of the line.\r\n   */\r\n  CodeFenceOpeningIndent = 'tsdoc-code-fence-opening-indent',\r\n\r\n  /**\r\n   * The language specifier cannot contain backtick characters.\r\n   */\r\n  CodeFenceSpecifierSyntax = 'tsdoc-code-fence-specifier-syntax',\r\n\r\n  /**\r\n   * The closing delimiter for a code fence must not be indented.\r\n   */\r\n  CodeFenceClosingIndent = 'tsdoc-code-fence-closing-indent',\r\n\r\n  /**\r\n   * Missing closing delimiter.\r\n   */\r\n  CodeFenceMissingDelimiter = 'tsdoc-code-fence-missing-delimiter',\r\n\r\n  /**\r\n   * Unexpected characters after closing delimiter for code fence.\r\n   */\r\n  CodeFenceClosingSyntax = 'tsdoc-code-fence-closing-syntax',\r\n\r\n  /**\r\n   * A code span must contain at least one character between the backticks.\r\n   */\r\n  CodeSpanEmpty = 'tsdoc-code-span-empty',\r\n\r\n  /**\r\n   * The code span is missing its closing backtick.\r\n   */\r\n  CodeSpanMissingDelimiter = 'tsdoc-code-span-missing-delimiter'\r\n}\r\n\r\n// Exposed via TSDocConfiguration.allTsdocMessageIds()\r\nexport const allTsdocMessageIds: string[] = [\r\n  // To make comparisons easy, keep these in the same order as the enum above:\r\n  'tsdoc-config-file-not-found',\r\n  'tsdoc-config-invalid-json',\r\n  'tsdoc-config-unsupported-schema',\r\n  'tsdoc-config-schema-error',\r\n  'tsdoc-config-cyclic-extends',\r\n  'tsdoc-config-unresolved-extends',\r\n  'tsdoc-config-undefined-tag',\r\n  'tsdoc-config-duplicate-tag-name',\r\n  'tsdoc-config-invalid-tag-name',\r\n\r\n  'tsdoc-comment-not-found',\r\n  'tsdoc-comment-missing-opening-delimiter',\r\n  'tsdoc-comment-missing-closing-delimiter',\r\n  'tsdoc-extra-inheritdoc-tag',\r\n  'tsdoc-escape-right-brace',\r\n  'tsdoc-escape-greater-than',\r\n  'tsdoc-missing-deprecation-message',\r\n  'tsdoc-inheritdoc-incompatible-tag',\r\n  'tsdoc-inheritdoc-incompatible-summary',\r\n  'tsdoc-inline-tag-missing-braces',\r\n  'tsdoc-tag-should-not-have-braces',\r\n  'tsdoc-unsupported-tag',\r\n  'tsdoc-undefined-tag',\r\n  'tsdoc-param-tag-with-invalid-type',\r\n  'tsdoc-param-tag-with-invalid-optional-name',\r\n  'tsdoc-param-tag-with-invalid-name',\r\n  'tsdoc-param-tag-missing-hyphen',\r\n  'tsdoc-unnecessary-backslash',\r\n  'tsdoc-missing-tag',\r\n  'tsdoc-at-sign-in-word',\r\n  'tsdoc-at-sign-without-tag-name',\r\n  'tsdoc-malformed-inline-tag',\r\n  'tsdoc-characters-after-block-tag',\r\n  'tsdoc-malformed-tag-name',\r\n  'tsdoc-characters-after-inline-tag',\r\n  'tsdoc-inline-tag-missing-right-brace',\r\n  'tsdoc-inline-tag-unescaped-brace',\r\n  'tsdoc-inheritdoc-tag-syntax',\r\n  'tsdoc-link-tag-empty',\r\n  'tsdoc-link-tag-unescaped-text',\r\n  'tsdoc-link-tag-destination-syntax',\r\n  'tsdoc-link-tag-invalid-url',\r\n  'tsdoc-reference-missing-hash',\r\n  'tsdoc-reference-hash-syntax',\r\n  'tsdoc-reference-malformed-package-name',\r\n  'tsdoc-reference-malformed-import-path',\r\n  'tsdoc-missing-reference',\r\n  'tsdoc-reference-missing-dot',\r\n  'tsdoc-reference-selector-missing-parens',\r\n  'tsdoc-reference-missing-colon',\r\n  'tsdoc-reference-missing-right-paren',\r\n  'tsdoc-reference-symbol-syntax',\r\n  'tsdoc-reference-missing-right-bracket',\r\n  'tsdoc-reference-missing-quote',\r\n  'tsdoc-reference-empty-identifier',\r\n  'tsdoc-reference-missing-identifier',\r\n  'tsdoc-reference-unquoted-identifier',\r\n  'tsdoc-reference-missing-label',\r\n  'tsdoc-reference-selector-syntax',\r\n  'tsdoc-html-tag-missing-greater-than',\r\n  'tsdoc-html-tag-missing-equals',\r\n  'tsdoc-html-tag-missing-string',\r\n  'tsdoc-html-string-missing-quote',\r\n  'tsdoc-text-after-html-string',\r\n  'tsdoc-missing-html-end-tag',\r\n  'tsdoc-malformed-html-name',\r\n  'tsdoc-code-fence-opening-indent',\r\n  'tsdoc-code-fence-specifier-syntax',\r\n  'tsdoc-code-fence-closing-indent',\r\n  'tsdoc-code-fence-missing-delimiter',\r\n  'tsdoc-code-fence-closing-syntax',\r\n  'tsdoc-code-span-empty',\r\n  'tsdoc-code-span-missing-delimiter'\r\n];\r\nallTsdocMessageIds.sort();\r\n\r\nexport const allTsdocMessageIdsSet: ReadonlySet<string> = new Set<string>(allTsdocMessageIds);\r\n", "import { StandardTags } from '../details/StandardTags';\r\nimport { TSDocTagDefinition } from './TSDocTagDefinition';\r\nimport { TSDocValidationConfiguration } from './TSDocValidationConfiguration';\r\nimport { DocNodeManager } from './DocNodeManager';\r\nimport { BuiltInDocNodes } from '../nodes/BuiltInDocNodes';\r\nimport { TSDocMessageId, allTsdocMessageIds, allTsdocMessageIdsSet } from '../parser/TSDocMessageId';\r\n\r\n/**\r\n * Configuration for the TSDocParser.\r\n */\r\nexport class TSDocConfiguration {\r\n  private readonly _tagDefinitions: TSDocTagDefinition[];\r\n  private readonly _tagDefinitionsByName: Map<string, TSDocTagDefinition>;\r\n  private readonly _supportedTagDefinitions: Set<TSDocTagDefinition>;\r\n  private readonly _validation: TSDocValidationConfiguration;\r\n  private readonly _docNodeManager: DocNodeManager;\r\n  private readonly _supportedHtmlElements: Set<string>;\r\n\r\n  public constructor() {\r\n    this._tagDefinitions = [];\r\n    this._tagDefinitionsByName = new Map<string, TSDocTagDefinition>();\r\n    this._supportedTagDefinitions = new Set<TSDocTagDefinition>();\r\n    this._validation = new TSDocValidationConfiguration();\r\n    this._docNodeManager = new DocNodeManager();\r\n    this._supportedHtmlElements = new Set();\r\n\r\n    this.clear(false);\r\n\r\n    // Register the built-in node kinds\r\n    BuiltInDocNodes.register(this);\r\n  }\r\n\r\n  /**\r\n   * Resets the `TSDocConfiguration` object to its initial empty state.\r\n   * @param noStandardTags - The `TSDocConfiguration` constructor normally adds definitions for the\r\n   * standard TSDoc tags.  Set `noStandardTags` to true for a completely empty `tagDefinitions` collection.\r\n   */\r\n  public clear(noStandardTags: boolean = false): void {\r\n    this._tagDefinitions.length = 0;\r\n    this._tagDefinitionsByName.clear();\r\n    this._supportedTagDefinitions.clear();\r\n    this._validation.ignoreUndefinedTags = false;\r\n    this._validation.reportUnsupportedTags = false;\r\n    this._validation.reportUnsupportedHtmlElements = false;\r\n    this._supportedHtmlElements.clear();\r\n\r\n    if (!noStandardTags) {\r\n      // Define all the standard tags\r\n      this.addTagDefinitions(StandardTags.allDefinitions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tags that are defined in this configuration.\r\n   *\r\n   * @remarks\r\n   * The subset of \"supported\" tags is tracked by {@link TSDocConfiguration.supportedTagDefinitions}.\r\n   */\r\n  public get tagDefinitions(): ReadonlyArray<TSDocTagDefinition> {\r\n    return this._tagDefinitions;\r\n  }\r\n\r\n  /**\r\n   * Returns the subset of {@link TSDocConfiguration.tagDefinitions}\r\n   * that are supported in this configuration.\r\n   *\r\n   * @remarks\r\n   * This property is only used when\r\n   * {@link TSDocValidationConfiguration.reportUnsupportedTags} is enabled.\r\n   */\r\n  public get supportedTagDefinitions(): ReadonlyArray<TSDocTagDefinition> {\r\n    return this.tagDefinitions.filter((x) => this.isTagSupported(x));\r\n  }\r\n\r\n  /**\r\n   * Enable/disable validation checks performed by the parser.\r\n   */\r\n  public get validation(): TSDocValidationConfiguration {\r\n    return this._validation;\r\n  }\r\n\r\n  /**\r\n   * The HTML element names that are supported in this configuration. Used in conjunction with the `reportUnsupportedHtmlElements` setting.\r\n   */\r\n  public get supportedHtmlElements(): string[] {\r\n    return Array.from(this._supportedHtmlElements.values());\r\n  }\r\n\r\n  /**\r\n   * Register custom DocNode subclasses.\r\n   */\r\n  public get docNodeManager(): DocNodeManager {\r\n    return this._docNodeManager;\r\n  }\r\n\r\n  /**\r\n   * Return the tag that was defined with the specified name, or undefined\r\n   * if not found.\r\n   */\r\n  public tryGetTagDefinition(tagName: string): TSDocTagDefinition | undefined {\r\n    return this._tagDefinitionsByName.get(tagName.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * Return the tag that was defined with the specified name, or undefined\r\n   * if not found.\r\n   */\r\n  public tryGetTagDefinitionWithUpperCase(alreadyUpperCaseTagName: string): TSDocTagDefinition | undefined {\r\n    return this._tagDefinitionsByName.get(alreadyUpperCaseTagName);\r\n  }\r\n\r\n  /**\r\n   * Define a new TSDoc tag to be recognized by the TSDocParser, and mark it as unsupported.\r\n   * Use {@link TSDocConfiguration.setSupportForTag} to mark it as supported.\r\n   *\r\n   * @remarks\r\n   * If a tag is \"defined\" this means that the parser recognizes it and understands its syntax.\r\n   * Whereas if a tag is \"supported\", this means it is defined AND the application implements the tag.\r\n   */\r\n  public addTagDefinition(tagDefinition: TSDocTagDefinition): void {\r\n    const existingDefinition: TSDocTagDefinition | undefined = this._tagDefinitionsByName.get(\r\n      tagDefinition.tagNameWithUpperCase\r\n    );\r\n\r\n    if (existingDefinition === tagDefinition) {\r\n      return;\r\n    }\r\n\r\n    if (existingDefinition) {\r\n      throw new Error(`A tag is already defined using the name ${existingDefinition.tagName}`);\r\n    }\r\n\r\n    this._tagDefinitions.push(tagDefinition);\r\n    this._tagDefinitionsByName.set(tagDefinition.tagNameWithUpperCase, tagDefinition);\r\n  }\r\n\r\n  /**\r\n   * Calls {@link TSDocConfiguration.addTagDefinition} for a list of definitions,\r\n   * and optionally marks them as supported.\r\n   * @param tagDefinitions - the definitions to be added\r\n   * @param supported - if specified, calls the {@link TSDocConfiguration.setSupportForTag}\r\n   *    method to mark the definitions as supported or unsupported\r\n   */\r\n  public addTagDefinitions(\r\n    tagDefinitions: ReadonlyArray<TSDocTagDefinition>,\r\n    supported?: boolean | undefined\r\n  ): void {\r\n    for (const tagDefinition of tagDefinitions) {\r\n      this.addTagDefinition(tagDefinition);\r\n\r\n      if (supported !== undefined) {\r\n        this.setSupportForTag(tagDefinition, supported);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the tag is supported in this configuration.\r\n   */\r\n  public isTagSupported(tagDefinition: TSDocTagDefinition): boolean {\r\n    this._requireTagToBeDefined(tagDefinition);\r\n    return this._supportedTagDefinitions.has(tagDefinition);\r\n  }\r\n\r\n  /**\r\n   * Specifies whether the tag definition is supported in this configuration.\r\n   * The parser may issue warnings for unsupported tags.\r\n   *\r\n   * @remarks\r\n   * If a tag is \"defined\" this means that the parser recognizes it and understands its syntax.\r\n   * Whereas if a tag is \"supported\", this means it is defined AND the application implements the tag.\r\n   *\r\n   * This function automatically sets {@link TSDocValidationConfiguration.reportUnsupportedTags}\r\n   * to true.\r\n   */\r\n  public setSupportForTag(tagDefinition: TSDocTagDefinition, supported: boolean): void {\r\n    this._requireTagToBeDefined(tagDefinition);\r\n    if (supported) {\r\n      this._supportedTagDefinitions.add(tagDefinition);\r\n    } else {\r\n      this._supportedTagDefinitions.delete(tagDefinition);\r\n    }\r\n\r\n    this.validation.reportUnsupportedTags = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies whether the tag definition is supported in this configuration.\r\n   * This operation sets {@link TSDocValidationConfiguration.reportUnsupportedTags} to `true`.\r\n   *\r\n   * @remarks\r\n   * The parser may issue warnings for unsupported tags.\r\n   * If a tag is \"defined\" this means that the parser recognizes it and understands its syntax.\r\n   * Whereas if a tag is \"supported\", this means it is defined AND the application implements the tag.\r\n   */\r\n  public setSupportForTags(tagDefinitions: ReadonlyArray<TSDocTagDefinition>, supported: boolean): void {\r\n    for (const tagDefinition of tagDefinitions) {\r\n      this.setSupportForTag(tagDefinition, supported);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assigns the `supportedHtmlElements` property, replacing any previous elements.\r\n   * This operation sets {@link TSDocValidationConfiguration.reportUnsupportedHtmlElements} to `true`.\r\n   */\r\n  public setSupportedHtmlElements(htmlTags: string[]): void {\r\n    this._supportedHtmlElements.clear();\r\n    this._validation.reportUnsupportedHtmlElements = true;\r\n    for (const htmlTag of htmlTags) {\r\n      this._supportedHtmlElements.add(htmlTag);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if the html element is supported in this configuration.\r\n   */\r\n  public isHtmlElementSupported(htmlTag: string): boolean {\r\n    return this._supportedHtmlElements.has(htmlTag);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the specified {@link TSDocMessageId} string is implemented by this release of the TSDoc parser.\r\n   * This can be used to detect misspelled identifiers.\r\n   *\r\n   * @privateRemarks\r\n   *\r\n   * Why this API is associated with TSDocConfiguration:  In the future, if we enable support for custom extensions\r\n   * of the TSDoc parser, we may provide a way to register custom message identifiers.\r\n   */\r\n  public isKnownMessageId(messageId: TSDocMessageId | string): boolean {\r\n    return allTsdocMessageIdsSet.has(messageId);\r\n  }\r\n\r\n  /**\r\n   * Returns the list of {@link TSDocMessageId} strings that are implemented by this release of the TSDoc parser.\r\n   *\r\n   * @privateRemarks\r\n   *\r\n   * Why this API is associated with TSDocConfiguration:  In the future, if we enable support for custom extensions\r\n   * of the TSDoc parser, we may provide a way to register custom message identifiers.\r\n   */\r\n  public get allTsdocMessageIds(): ReadonlyArray<TSDocMessageId> {\r\n    return allTsdocMessageIds as ReadonlyArray<TSDocMessageId>;\r\n  }\r\n\r\n  private _requireTagToBeDefined(tagDefinition: TSDocTagDefinition): void {\r\n    const matching: TSDocTagDefinition | undefined = this._tagDefinitionsByName.get(\r\n      tagDefinition.tagNameWithUpperCase\r\n    );\r\n    if (matching) {\r\n      if (matching === tagDefinition) {\r\n        return;\r\n      }\r\n    }\r\n    throw new Error('The specified TSDocTagDefinition is not defined for this TSDocConfiguration');\r\n  }\r\n}\r\n", "import { DocBlockTag } from '../nodes/DocBlockTag';\r\nimport { TSDocTagDefinition, TSDocTagSyntaxKind } from '../configuration/TSDocTagDefinition';\r\n\r\n/**\r\n * Represents a set of modifier tags that were extracted from a doc comment.\r\n *\r\n * @remarks\r\n * TSDoc modifier tags are block tags that do not have any associated rich text content.\r\n * Instead, their presence or absence acts as an on/off switch, indicating some aspect\r\n * of the underlying API item.  For example, the `@internal` modifier indicates that a\r\n * signature is internal (i.e. not part of the public API contract).\r\n */\r\nexport class ModifierTagSet {\r\n  private readonly _nodes: DocBlockTag[] = [];\r\n\r\n  // NOTE: To implement case insensitivity, the keys in this set are always upper-case.\r\n  // This convention makes the normalization more obvious (and as a general practice handles\r\n  // the Turkish \"i\" character correctly).\r\n  private readonly _nodesByName: Map<string, DocBlockTag> = new Map<string, DocBlockTag>();\r\n\r\n  /**\r\n   * The original block tag nodes that defined the modifiers in this set, excluding duplicates.\r\n   */\r\n  public get nodes(): ReadonlyArray<DocBlockTag> {\r\n    return this._nodes;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the set contains a DocBlockTag with the specified tag name.\r\n   * Note that synonyms are not considered.  The comparison is case-insensitive.\r\n   * @param modifierTagName - The name of the tag, including the `@` prefix  For example, `@internal`\r\n   */\r\n  public hasTagName(modifierTagName: string): boolean {\r\n    return this._nodesByName.has(modifierTagName.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * Returns true if the set contains a DocBlockTag matching the specified tag definition.\r\n   * Note that synonyms are not considered.  The comparison is case-insensitive.\r\n   * The TSDocTagDefinition must be a modifier tag.\r\n   * @param tagName - The name of the tag, including the `@` prefix  For example, `@internal`\r\n   */\r\n  public hasTag(modifierTagDefinition: TSDocTagDefinition): boolean {\r\n    return !!this.tryGetTag(modifierTagDefinition);\r\n  }\r\n\r\n  /**\r\n   * Returns a DocBlockTag matching the specified tag definition, or undefined if no such\r\n   * tag was added to the set.  If there were multiple instances, returned object will be\r\n   * the first one to be added.\r\n   */\r\n  public tryGetTag(modifierTagDefinition: TSDocTagDefinition): DocBlockTag | undefined {\r\n    if (modifierTagDefinition.syntaxKind !== TSDocTagSyntaxKind.ModifierTag) {\r\n      throw new Error('The tag definition is not a modifier tag');\r\n    }\r\n    return this._nodesByName.get(modifierTagDefinition.tagNameWithUpperCase);\r\n  }\r\n\r\n  /**\r\n   * Adds a new modifier tag to the set.  If a tag already exists with the same name,\r\n   * then no change is made, and the return value is false.\r\n   */\r\n  public addTag(blockTag: DocBlockTag): boolean {\r\n    if (this._nodesByName.has(blockTag.tagNameWithUpperCase)) {\r\n      return false;\r\n    }\r\n\r\n    this._nodesByName.set(blockTag.tagNameWithUpperCase, blockTag);\r\n    this._nodes.push(blockTag);\r\n\r\n    return true;\r\n  }\r\n}\r\n", "import { ModifierTagSet } from './ModifierTagSet';\r\nimport { StandardTags } from './StandardTags';\r\n\r\n/**\r\n * Extends the ModifierTagSet base class with getters for modifiers that\r\n * are part of the standardized core tags for TSDoc.\r\n */\r\nexport class StandardModifierTagSet extends ModifierTagSet {\r\n  /**\r\n   * Returns true if the `@alpha` modifier tag was specified.\r\n   */\r\n  public isAlpha(): boolean {\r\n    return this.hasTag(StandardTags.alpha);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@beta` modifier tag was specified.\r\n   */\r\n  public isBeta(): boolean {\r\n    return this.hasTag(StandardTags.beta);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@eventProperty` modifier tag was specified.\r\n   */\r\n  public isEventProperty(): boolean {\r\n    return this.hasTag(StandardTags.eventProperty);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@experimental` modifier tag was specified.\r\n   */\r\n  public isExperimental(): boolean {\r\n    return this.hasTag(StandardTags.experimental);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@internal` modifier tag was specified.\r\n   */\r\n  public isInternal(): boolean {\r\n    return this.hasTag(StandardTags.internal);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@override` modifier tag was specified.\r\n   */\r\n  public isOverride(): boolean {\r\n    return this.hasTag(StandardTags.override);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@packageDocumentation` modifier tag was specified.\r\n   */\r\n  public isPackageDocumentation(): boolean {\r\n    return this.hasTag(StandardTags.packageDocumentation);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@public` modifier tag was specified.\r\n   */\r\n  public isPublic(): boolean {\r\n    return this.hasTag(StandardTags.public);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@readonly` modifier tag was specified.\r\n   */\r\n  public isReadonly(): boolean {\r\n    return this.hasTag(StandardTags.readonly);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@sealed` modifier tag was specified.\r\n   */\r\n  public isSealed(): boolean {\r\n    return this.hasTag(StandardTags.sealed);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the `@virtual` modifier tag was specified.\r\n   */\r\n  public isVirtual(): boolean {\r\n    return this.hasTag(StandardTags.virtual);\r\n  }\r\n}\r\n", "import { DocNode, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\n\r\n/**\r\n * Constructor parameters for {@link DocNodeContainer}.\r\n */\r\nexport interface IDocNodeContainerParameters extends IDocNodeParameters {}\r\n\r\n/**\r\n * Constructor parameters for {@link DocNodeContainer}.\r\n */\r\nexport interface IDocNodeContainerParsedParameters extends IDocNodeParsedParameters {}\r\n\r\n/**\r\n * DocNodeContainer is the base class for DocNode classes that allow arbitrary child nodes to be added by the consumer.\r\n * The child classes are {@link DocParagraph} and {@link DocSection}.\r\n */\r\nexport abstract class DocNodeContainer extends DocNode {\r\n  private readonly _nodes: DocNode[] = [];\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(\r\n    parameters: IDocNodeContainerParameters | IDocNodeContainerParsedParameters,\r\n    childNodes?: ReadonlyArray<DocNode>\r\n  ) {\r\n    super(parameters);\r\n\r\n    if (childNodes !== undefined && childNodes.length > 0) {\r\n      this.appendNodes(childNodes);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The nodes that were added to this container.\r\n   */\r\n  public get nodes(): ReadonlyArray<DocNode> {\r\n    return this._nodes;\r\n  }\r\n\r\n  /**\r\n   * Append a node to the container.\r\n   */\r\n  public appendNode(docNode: DocNode): void {\r\n    if (!this.configuration.docNodeManager.isAllowedChild(this.kind, docNode.kind)) {\r\n      throw new Error(\r\n        `The TSDocConfiguration does not allow a ${this.kind} node to` +\r\n          ` contain a node of type ${docNode.kind}`\r\n      );\r\n    }\r\n\r\n    this._nodes!.push(docNode);\r\n  }\r\n\r\n  /**\r\n   * Append nodes to the container.\r\n   */\r\n  public appendNodes(docNodes: ReadonlyArray<DocNode>): void {\r\n    for (const docNode of docNodes) {\r\n      this.appendNode(docNode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all nodes from the container.\r\n   */\r\n  public clearNodes(): void {\r\n    this._nodes!.length = 0;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return this._nodes;\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode } from './DocNode';\r\nimport { DocNodeContainer, IDocNodeContainerParameters } from './DocNodeContainer';\r\n\r\n/**\r\n * Constructor parameters for {@link DocParagraph}.\r\n */\r\nexport interface IDocParagraphParameters extends IDocNodeContainerParameters {}\r\n\r\n/**\r\n * Represents a paragraph of text, similar to a `<p>` element in HTML.\r\n * Like CommonMark, the TSDoc syntax uses blank lines to delineate paragraphs\r\n * instead of explicitly notating them.\r\n */\r\nexport class DocParagraph extends DocNodeContainer {\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocParagraphParameters, childNodes?: ReadonlyArray<DocNode>) {\r\n    super(parameters, childNodes);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.Paragraph;\r\n  }\r\n}\r\n", "import { DocNode, DocNodeKind } from './DocNode';\r\nimport { DocParagraph } from './DocParagraph';\r\nimport {\r\n  DocNodeContainer,\r\n  IDocNodeContainerParameters,\r\n  IDocNodeContainerParsedParameters\r\n} from './DocNodeContainer';\r\n\r\n/**\r\n * Constructor parameters for {@link DocSection}.\r\n */\r\nexport interface IDocSectionParameters extends IDocNodeContainerParameters {}\r\n\r\n/**\r\n * Constructor parameters for {@link DocSection}.\r\n */\r\nexport interface IDocSectionParsedParameters extends IDocNodeContainerParsedParameters {}\r\n\r\n/**\r\n * Represents a general block of rich text.\r\n */\r\nexport class DocSection extends DocNodeContainer {\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(\r\n    parameters: IDocSectionParameters | IDocSectionParsedParameters,\r\n    childNodes?: ReadonlyArray<DocNode>\r\n  ) {\r\n    super(parameters, childNodes);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.Section;\r\n  }\r\n\r\n  /**\r\n   * If the last item in DocSection.nodes is not a DocParagraph, a new paragraph\r\n   * is started.  Either way, the provided docNode will be appended to the paragraph.\r\n   */\r\n  public appendNodeInParagraph(docNode: DocNode): void {\r\n    let paragraphNode: DocParagraph | undefined = undefined;\r\n\r\n    if (this.nodes.length > 0) {\r\n      const lastNode: DocNode = this.nodes[this.nodes.length - 1];\r\n      if (lastNode.kind === DocNodeKind.Paragraph) {\r\n        paragraphNode = lastNode as DocParagraph;\r\n      }\r\n    }\r\n    if (!paragraphNode) {\r\n      paragraphNode = new DocParagraph({ configuration: this.configuration });\r\n      this.appendNode(paragraphNode);\r\n    }\r\n\r\n    paragraphNode.appendNode(docNode);\r\n  }\r\n\r\n  public appendNodesInParagraph(docNodes: ReadonlyArray<DocNode>): void {\r\n    for (const docNode of docNodes) {\r\n      this.appendNodeInParagraph(docNode);\r\n    }\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { DocSection } from './DocSection';\r\nimport { DocBlockTag } from './DocBlockTag';\r\n\r\n/**\r\n * Constructor parameters for {@link DocBlock}.\r\n */\r\nexport interface IDocBlockParameters extends IDocNodeParameters {\r\n  blockTag: DocBlockTag;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocBlock}.\r\n */\r\nexport interface IDocBlockParsedParameters extends IDocNodeParsedParameters {\r\n  blockTag: DocBlockTag;\r\n}\r\n\r\n/**\r\n * Represents a section that is introduced by a TSDoc block tag.\r\n * For example, an `@example` block.\r\n */\r\nexport class DocBlock extends DocNode {\r\n  private readonly _blockTag: DocBlockTag;\r\n  private readonly _content: DocSection;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocBlockParameters | IDocBlockParsedParameters) {\r\n    super(parameters);\r\n    this._blockTag = parameters.blockTag;\r\n    this._content = new DocSection({ configuration: this.configuration });\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.Block;\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tag that introduces this section.\r\n   */\r\n  public get blockTag(): DocBlockTag {\r\n    return this._blockTag;\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tag that introduces this section.\r\n   */\r\n  public get content(): DocSection {\r\n    return this._content;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this.blockTag, this._content];\r\n  }\r\n}\r\n", "import { TextRange } from './TextRange';\r\n\r\n/**\r\n * Distinguishes different types of Token objects.\r\n */\r\nexport enum TokenKind {\r\n  /**\r\n   * A token representing the end of the input.  The Token.range will be an empty range\r\n   * at the end of the provided input.\r\n   */\r\n  EndOfInput = 2001,\r\n\r\n  /**\r\n   * A token representing a virtual newline.\r\n   * The Token.range will be an empty range, because the actual newline character may\r\n   * be noncontiguous due to the doc comment delimiter trimming.\r\n   */\r\n  Newline = 2002,\r\n\r\n  /**\r\n   * A token representing one or more spaces and tabs (but not newlines or end of input).\r\n   */\r\n  Spacing = 2003,\r\n\r\n  /**\r\n   * A token representing one or more ASCII letters, numbers, and underscores.\r\n   */\r\n  AsciiWord = 2004,\r\n\r\n  /**\r\n   * A single ASCII character that behaves like punctuation, e.g. doesn't need whitespace\r\n   * around it when adjacent to a letter.  The Token.range will always be a string of length 1.\r\n   */\r\n  OtherPunctuation = 2005,\r\n\r\n  /**\r\n   * A token representing a sequence of non-ASCII printable characters that are not punctuation.\r\n   */\r\n  Other = 2006,\r\n\r\n  /**\r\n   * The backslash character `\\`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Backslash = 2007,\r\n\r\n  /**\r\n   * The less-than character `<`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  LessThan = 2008,\r\n\r\n  /**\r\n   * The greater-than character `>`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  GreaterThan = 2009,\r\n\r\n  /**\r\n   * The equals character `=`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Equals = 2010,\r\n\r\n  /**\r\n   * The single-quote character `'`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  SingleQuote = 2011,\r\n\r\n  /**\r\n   * The double-quote character `\"`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  DoubleQuote = 2012,\r\n\r\n  /**\r\n   * The slash character `/`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Slash = 2013,\r\n\r\n  /**\r\n   * The hyphen character `-`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Hyphen = 2014,\r\n\r\n  /**\r\n   * The at-sign character `@`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  AtSign = 2015,\r\n\r\n  /**\r\n   * The left curly bracket character `{`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  LeftCurlyBracket = 2016,\r\n\r\n  /**\r\n   * The right curly bracket character `}`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  RightCurlyBracket = 2017,\r\n\r\n  /**\r\n   * The backtick character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Backtick = 2018,\r\n\r\n  /**\r\n   * The period character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Period = 2019,\r\n\r\n  /**\r\n   * The colon character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Colon = 2020,\r\n\r\n  /**\r\n   * The comma character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Comma = 2021,\r\n\r\n  /**\r\n   * The left square bracket character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  LeftSquareBracket = 2022,\r\n\r\n  /**\r\n   * The right square bracket character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  RightSquareBracket = 2023,\r\n\r\n  /**\r\n   * The pipe character `|`.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Pipe = 2024,\r\n\r\n  /**\r\n   * The left parenthesis character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  LeftParenthesis = 2025,\r\n\r\n  /**\r\n   * The right parenthesis character.\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  RightParenthesis = 2026,\r\n\r\n  /**\r\n   * The pound character (\"#\").\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  PoundSymbol = 2027,\r\n\r\n  /**\r\n   * The plus character (\"+\").\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  Plus = 2028,\r\n\r\n  /**\r\n   * The dollar sign character (\"$\").\r\n   * The Token.range will always be a string of length 1.\r\n   */\r\n  DollarSign = 2029\r\n}\r\n\r\n/**\r\n * Represents a contiguous range of characters extracted from one of the doc comment lines\r\n * being processed by the Tokenizer.  There is a token representing a newline, but otherwise\r\n * a single token cannot span multiple lines.\r\n */\r\nexport class Token {\r\n  /**\r\n   * The kind of token\r\n   */\r\n  public readonly kind: TokenKind;\r\n  /**\r\n   * The contiguous input range corresponding to the token.  This range will never\r\n   * contain a newline character.\r\n   */\r\n  public readonly range: TextRange;\r\n\r\n  /**\r\n   * The doc comment \"line\" that this Token was extracted from.\r\n   */\r\n  public readonly line: TextRange;\r\n\r\n  public constructor(kind: TokenKind, range: TextRange, line: TextRange) {\r\n    this.kind = kind;\r\n    this.range = range;\r\n    this.line = line;\r\n  }\r\n\r\n  public toString(): string {\r\n    if (this.kind === TokenKind.Newline) {\r\n      return '\\n';\r\n    }\r\n    return this.range.toString();\r\n  }\r\n}\r\n", "import { DocNode, IDocNodeParameters, DocNodeKind } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { TokenKind } from '../parser/Token';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\n/**\r\n * Indicates the type of {@link DocExcerpt}.\r\n */\r\nexport enum ExcerptKind {\r\n  Spacing = 'Spacing',\r\n\r\n  BlockTag = 'BlockTag',\r\n\r\n  CodeSpan_OpeningDelimiter = 'CodeSpan_OpeningDelimiter',\r\n  CodeSpan_Code = 'CodeSpan_Code',\r\n  CodeSpan_ClosingDelimiter = 'CodeSpan_ClosingDelimiter',\r\n\r\n  DeclarationReference_PackageName = 'DeclarationReference_PackageName',\r\n  DeclarationReference_ImportPath = 'DeclarationReference_ImportPath',\r\n  DeclarationReference_ImportHash = 'DeclarationReference_ImportHash',\r\n\r\n  /**\r\n   * Input characters that were reported as an error and do not appear to be part of a valid expression.\r\n   * A syntax highlighter might display them with an error color (e.g. red).\r\n   */\r\n  ErrorText = 'ErrorText',\r\n\r\n  /**\r\n   * Input characters that do not conform to the TSDoc specification, but were recognized by the parser, for example\r\n   * as a known JSDoc pattern.  A syntax highlighter should not display them with an error color (e.g. red)\r\n   * because the error reporting may be suppressed for \"lax\" parsing of legacy source code.\r\n   */\r\n  NonstandardText = 'NonstandardText',\r\n\r\n  EscapedText = 'EscapedText',\r\n\r\n  FencedCode_OpeningFence = 'FencedCode_OpeningFence',\r\n  FencedCode_Language = 'FencedCode_Language',\r\n  FencedCode_Code = 'FencedCode_Code',\r\n  FencedCode_ClosingFence = 'FencedCode_ClosingFence',\r\n\r\n  HtmlAttribute_Name = 'HtmlAttribute_Name',\r\n  HtmlAttribute_Equals = 'HtmlAttribute_Equals',\r\n  HtmlAttribute_Value = 'HtmlAttribute_Value',\r\n\r\n  HtmlEndTag_OpeningDelimiter = 'HtmlEndTag_OpeningDelimiter',\r\n  HtmlEndTag_Name = 'HtmlEndTag_Name',\r\n  HtmlEndTag_ClosingDelimiter = 'HtmlEndTag_ClosingDelimiter',\r\n\r\n  HtmlStartTag_OpeningDelimiter = 'HtmlStartTag_OpeningDelimiter',\r\n  HtmlStartTag_Name = 'HtmlStartTag_Name',\r\n  HtmlStartTag_ClosingDelimiter = 'HtmlStartTag_ClosingDelimiter',\r\n\r\n  InlineTag_OpeningDelimiter = 'InlineTag_OpeningDelimiter',\r\n  InlineTag_TagName = 'InlineTag_TagName',\r\n  InlineTag_TagContent = 'InlineTag_TagContent',\r\n  InlineTag_ClosingDelimiter = 'InlineTag_ClosingDelimiter',\r\n\r\n  LinkTag_UrlDestination = 'LinkTag_UrlDestination',\r\n  LinkTag_Pipe = 'LinkTag_Pipe',\r\n  LinkTag_LinkText = 'LinkTag_LinkText',\r\n\r\n  MemberIdentifier_LeftQuote = 'MemberIdentifier_LeftQuote',\r\n  MemberIdentifier_Identifier = 'MemberIdentifier_Identifier',\r\n  MemberIdentifier_RightQuote = 'MemberIdentifier_RightQuote',\r\n\r\n  MemberReference_Dot = 'MemberReference_Dot',\r\n  MemberReference_LeftParenthesis = 'MemberReference_LeftParenthesis',\r\n  MemberReference_Colon = 'MemberReference_Colon',\r\n  MemberReference_RightParenthesis = 'MemberReference_RightParenthesis',\r\n\r\n  MemberSelector = 'MemberSelector',\r\n\r\n  DocMemberSymbol_LeftBracket = 'DocMemberSymbol_LeftBracket',\r\n  DocMemberSymbol_RightBracket = 'DocMemberSymbol_RightBracket',\r\n\r\n  ParamBlock_ParameterName = 'ParamBlock_ParameterName',\r\n  ParamBlock_Hyphen = 'ParamBlock_Hyphen',\r\n\r\n  PlainText = 'PlainText',\r\n\r\n  SoftBreak = 'SoftBreak'\r\n}\r\n\r\n/* eslint-enable @typescript-eslint/naming-convention */\r\n\r\n/**\r\n * Constructor parameters for {@link DocExcerpt}.\r\n */\r\nexport interface IDocExcerptParameters extends IDocNodeParameters {\r\n  excerptKind: ExcerptKind;\r\n  content: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a parsed token sequence.\r\n *\r\n * @remarks\r\n * When a `DocNode` is created by parsing a doc comment, it will have `DocExcerpt` child nodes corresponding to\r\n * the parsed syntax elements such as names, keywords, punctuation, and spaces.  These excerpts indicate the original\r\n * coordinates of the syntax element, and thus can be used for syntax highlighting and precise error reporting.\r\n * They could also be used to rewrite specific words in a source file (e.g. renaming a parameter) without disturbing\r\n * any other characters in the file.\r\n *\r\n * Every parsed character will correspond to at most one DocExcerpt object.  In other words, excerpts never overlap.\r\n * A given excerpt can span multiple comment lines, and it may contain gaps, for example to skip the `*` character\r\n * that starts a new TSDoc comment line.\r\n */\r\nexport class DocExcerpt extends DocNode {\r\n  private readonly _excerptKind: ExcerptKind;\r\n  private readonly _content: TokenSequence;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocExcerptParameters) {\r\n    super(parameters);\r\n\r\n    if (parameters.excerptKind === ExcerptKind.Spacing) {\r\n      for (const token of parameters.content!.tokens) {\r\n        switch (token.kind) {\r\n          case TokenKind.Spacing:\r\n          case TokenKind.Newline:\r\n          case TokenKind.EndOfInput:\r\n            break;\r\n          default:\r\n            throw new Error(`The excerptKind=Spacing but the range contains a non-whitespace token`);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._excerptKind = parameters.excerptKind;\r\n    this._content = parameters.content;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.Excerpt;\r\n  }\r\n\r\n  /**\r\n   * Indicates the kind of DocExcerpt.\r\n   */\r\n  public get excerptKind(): ExcerptKind {\r\n    return this._excerptKind;\r\n  }\r\n\r\n  /**\r\n   * The input token sequence corresponding to this excerpt.\r\n   * @remarks\r\n   * Note that a token sequence can span multiple input lines and may contain gaps, for example to skip the `*`\r\n   * character that starts a new TSDoc comment line.\r\n   */\r\n  public get content(): TokenSequence {\r\n    return this._content;\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { StringChecks } from '../parser/StringChecks';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocBlockTag}.\r\n */\r\nexport interface IDocBlockTagParameters extends IDocNodeParameters {\r\n  tagName: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocBlockTag}.\r\n */\r\nexport interface IDocBlockTagParsedParameters extends IDocNodeParsedParameters {\r\n  tagName: string;\r\n  tagNameExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a TSDoc block tag such as `@param` or `@public`.\r\n */\r\nexport class DocBlockTag extends DocNode {\r\n  private readonly _tagName: string;\r\n  private readonly _tagNameWithUpperCase: string;\r\n  private readonly _tagNameExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocBlockTagParameters | IDocBlockTagParsedParameters) {\r\n    super(parameters);\r\n\r\n    StringChecks.validateTSDocTagName(parameters.tagName);\r\n    this._tagName = parameters.tagName;\r\n    this._tagNameWithUpperCase = parameters.tagName.toUpperCase();\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._tagNameExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.BlockTag,\r\n        content: parameters.tagNameExcerpt\r\n      });\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.BlockTag;\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tag name.  TSDoc tag names start with an at-sign (`@`) followed\r\n   * by ASCII letters using \"camelCase\" capitalization.\r\n   */\r\n  public get tagName(): string {\r\n    return this._tagName;\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tag name in all capitals, which is used for performing\r\n   * case-insensitive comparisons or lookups.\r\n   */\r\n  public get tagNameWithUpperCase(): string {\r\n    return this._tagNameWithUpperCase;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._tagNameExcerpt];\r\n  }\r\n\r\n  public getTokenSequence(): TokenSequence {\r\n    if (!this._tagNameExcerpt) {\r\n      throw new Error(\r\n        'DocBlockTag.getTokenSequence() failed because this object did not originate from a parsed input'\r\n      );\r\n    }\r\n    return this._tagNameExcerpt.content;\r\n  }\r\n}\r\n", "import { DocNodeKind, IDocNodeParameters, DocNode, IDocNodeParsedParameters } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocCodeSpan}.\r\n */\r\nexport interface IDocCodeSpanParameters extends IDocNodeParameters {\r\n  code: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocCodeSpan}.\r\n */\r\nexport interface IDocCodeSpanParsedParameters extends IDocNodeParsedParameters {\r\n  openingDelimiterExcerpt: TokenSequence;\r\n\r\n  codeExcerpt: TokenSequence;\r\n\r\n  closingDelimiterExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents CommonMark-style code span, i.e. code surrounded by\r\n * backtick characters.\r\n */\r\nexport class DocCodeSpan extends DocNode {\r\n  // The opening ` delimiter\r\n  private readonly _openingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  // The code content\r\n  private _code: string | undefined;\r\n  private readonly _codeExcerpt: DocExcerpt | undefined;\r\n\r\n  // The closing ` delimiter\r\n  private readonly _closingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocCodeSpanParameters | IDocCodeSpanParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._openingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.CodeSpan_OpeningDelimiter,\r\n        content: parameters.openingDelimiterExcerpt\r\n      });\r\n      this._codeExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.CodeSpan_Code,\r\n        content: parameters.codeExcerpt\r\n      });\r\n      this._closingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.CodeSpan_ClosingDelimiter,\r\n        content: parameters.closingDelimiterExcerpt\r\n      });\r\n    } else {\r\n      this._code = parameters.code;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.CodeSpan;\r\n  }\r\n\r\n  /**\r\n   * The text that should be rendered as code, excluding the backtick delimiters.\r\n   */\r\n  public get code(): string {\r\n    if (this._code === undefined) {\r\n      this._code = this._codeExcerpt!.content.toString();\r\n    }\r\n    return this._code;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._openingDelimiterExcerpt, this._codeExcerpt, this._closingDelimiterExcerpt];\r\n  }\r\n}\r\n", "/**\r\n * An interface for a builder object that allows a large text string to be constructed incrementally by appending\r\n * small chunks.\r\n *\r\n * @remarks\r\n *\r\n * {@link StringBuilder} is the default implementation of this contract.\r\n */\r\nexport interface IStringBuilder {\r\n  /**\r\n   * Append the specified text to the buffer.\r\n   */\r\n  append(text: string): void;\r\n\r\n  /**\r\n   * Returns a single string containing all the text that was appended to the buffer so far.\r\n   *\r\n   * @remarks\r\n   *\r\n   * This is a potentially expensive operation.\r\n   */\r\n  toString(): string;\r\n}\r\n\r\n/**\r\n * This class allows a large text string to be constructed incrementally by appending small chunks.  The final\r\n * string can be obtained by calling StringBuilder.toString().\r\n *\r\n * @remarks\r\n * A naive approach might use the `+=` operator to append strings:  This would have the downside of copying\r\n * the entire string each time a chunk is appended, resulting in `O(n^2)` bytes of memory being allocated\r\n * (and later freed by the garbage  collector), and many of the allocations could be very large objects.\r\n * StringBuilder avoids this overhead by accumulating the chunks in an array, and efficiently joining them\r\n * when `getText()` is finally called.\r\n */\r\nexport class StringBuilder implements IStringBuilder {\r\n  private _chunks: string[];\r\n\r\n  public constructor() {\r\n    this._chunks = [];\r\n  }\r\n\r\n  /** {@inheritdoc IStringBuilder.append} */\r\n  public append(text: string): void {\r\n    this._chunks.push(text);\r\n  }\r\n\r\n  /** {@inheritdoc IStringBuilder.toString} */\r\n  public toString(): string {\r\n    if (this._chunks.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    if (this._chunks.length > 1) {\r\n      const joined: string = this._chunks.join('');\r\n      this._chunks.length = 1;\r\n      this._chunks[0] = joined;\r\n    }\r\n\r\n    return this._chunks[0];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode, IDocNodeParameters } from './DocNode';\r\nimport { DocParamBlock } from './DocParamBlock';\r\n\r\n/**\r\n * Constructor parameters for {@link DocParamCollection}.\r\n */\r\nexport interface IDocParamCollectionParameters extends IDocNodeParameters {}\r\n\r\n/**\r\n * Represents a collection of DocParamBlock objects and provides efficient operations for looking up the\r\n * documentation for a specified parameter name.\r\n */\r\nexport class DocParamCollection extends DocNode {\r\n  private readonly _blocks: DocParamBlock[] = [];\r\n  private _blocksByName: Map<string, DocParamBlock> | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocParamCollectionParameters) {\r\n    super(parameters);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.ParamCollection;\r\n  }\r\n\r\n  /**\r\n   * Provide an iterator for callers that support it.\r\n   */\r\n  public [Symbol.iterator](): IterableIterator<DocParamBlock> {\r\n    return this._blocks[Symbol.iterator]();\r\n  }\r\n\r\n  /**\r\n   * Returns the blocks in this collection.\r\n   */\r\n  public get blocks(): ReadonlyArray<DocParamBlock> {\r\n    return this._blocks;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of blocks in this collection.\r\n   */\r\n  public get count(): number {\r\n    return this._blocks.length;\r\n  }\r\n\r\n  /**\r\n   * Adds a new block to the collection.\r\n   */\r\n  public add(docParamBlock: DocParamBlock): void {\r\n    this._blocks.push(docParamBlock);\r\n\r\n    // Allocate the map on demand, since most DocComment parameter collections will be empty\r\n    if (this._blocksByName === undefined) {\r\n      this._blocksByName = new Map<string, DocParamBlock>();\r\n    }\r\n\r\n    // The first block to be added takes precedence\r\n    if (!this._blocksByName.has(docParamBlock.parameterName)) {\r\n      this._blocksByName.set(docParamBlock.parameterName, docParamBlock);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all blocks from the collection\r\n   */\r\n  public clear(): void {\r\n    this._blocks.length = 0;\r\n    this._blocksByName = undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns the first block whose `parameterName` matches the specified string.\r\n   *\r\n   * @remarks\r\n   * If the collection was parsed from an input containing errors, there could potentially be more than\r\n   * one DocParamBlock with the same name.  In this situation, tryGetBlockByName() will return the first match\r\n   * that it finds.\r\n   *\r\n   * This lookup is optimized using a dictionary.\r\n   */\r\n  public tryGetBlockByName(parameterName: string): DocParamBlock | undefined {\r\n    if (this._blocksByName) {\r\n      return this._blocksByName.get(parameterName);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return this._blocks;\r\n  }\r\n}\r\n", "import { DocParagraph, DocNode, DocNodeKind, DocPlainText } from '../nodes';\r\n\r\n/**\r\n * Implementation of DocNodeTransforms.trimSpacesInParagraphNodes()\r\n */\r\nexport class TrimSpacesTransform {\r\n  public static transform(docParagraph: DocParagraph): DocParagraph {\r\n    const transformedNodes: DocNode[] = [];\r\n\r\n    // Whether the next nonempty node to be added needs a space before it\r\n    let pendingSpace: boolean = false;\r\n\r\n    // The DocPlainText node that we're currently accumulating\r\n    const accumulatedTextChunks: string[] = [];\r\n    const accumulatedNodes: DocNode[] = [];\r\n\r\n    // We always trim leading whitespace for a paragraph.  This flag gets set to true\r\n    // as soon as nonempty content is encountered.\r\n    let finishedSkippingLeadingSpaces: boolean = false;\r\n\r\n    for (const node of docParagraph.nodes) {\r\n      switch (node.kind) {\r\n        case DocNodeKind.PlainText:\r\n          const docPlainText: DocPlainText = node as DocPlainText;\r\n\r\n          const text: string = docPlainText.text;\r\n\r\n          const startedWithSpace: boolean = /^\\s/.test(text);\r\n          const endedWithSpace: boolean = /\\s$/.test(text);\r\n          const collapsedText: string = text.replace(/\\s+/g, ' ').trim();\r\n\r\n          if (startedWithSpace && finishedSkippingLeadingSpaces) {\r\n            pendingSpace = true;\r\n          }\r\n\r\n          if (collapsedText.length > 0) {\r\n            if (pendingSpace) {\r\n              accumulatedTextChunks.push(' ');\r\n              pendingSpace = false;\r\n            }\r\n\r\n            accumulatedTextChunks.push(collapsedText);\r\n            accumulatedNodes.push(node);\r\n\r\n            finishedSkippingLeadingSpaces = true;\r\n          }\r\n\r\n          if (endedWithSpace && finishedSkippingLeadingSpaces) {\r\n            pendingSpace = true;\r\n          }\r\n          break;\r\n        case DocNodeKind.SoftBreak:\r\n          if (finishedSkippingLeadingSpaces) {\r\n            pendingSpace = true;\r\n          }\r\n          accumulatedNodes.push(node);\r\n          break;\r\n        default:\r\n          if (pendingSpace) {\r\n            accumulatedTextChunks.push(' ');\r\n            pendingSpace = false;\r\n          }\r\n\r\n          // Push the accumulated text\r\n          if (accumulatedTextChunks.length > 0) {\r\n            // TODO: We should probably track the accumulatedNodes somehow, e.g. so we can map them back to the\r\n            // original excerpts.  But we need a developer scenario before we can design this API.\r\n            transformedNodes.push(\r\n              new DocPlainText({\r\n                configuration: docParagraph.configuration,\r\n                text: accumulatedTextChunks.join('')\r\n              })\r\n            );\r\n            accumulatedTextChunks.length = 0;\r\n            accumulatedNodes.length = 0;\r\n          }\r\n\r\n          transformedNodes.push(node);\r\n          finishedSkippingLeadingSpaces = true;\r\n      }\r\n    }\r\n\r\n    // Push the accumulated text\r\n    if (accumulatedTextChunks.length > 0) {\r\n      transformedNodes.push(\r\n        new DocPlainText({\r\n          configuration: docParagraph.configuration,\r\n          text: accumulatedTextChunks.join('')\r\n        })\r\n      );\r\n      accumulatedTextChunks.length = 0;\r\n      accumulatedNodes.length = 0;\r\n    }\r\n\r\n    const transformedParagraph: DocParagraph = new DocParagraph({\r\n      configuration: docParagraph.configuration\r\n    });\r\n    transformedParagraph.appendNodes(transformedNodes);\r\n    return transformedParagraph;\r\n  }\r\n}\r\n", "import { TrimSpacesTransform } from './TrimSpacesTransform';\r\nimport { DocParagraph } from '../nodes';\r\n\r\n/**\r\n * Helper functions that transform DocNode trees.\r\n */\r\nexport class DocNodeTransforms {\r\n  /**\r\n   * trimSpacesInParagraphNodes() collapses extra spacing characters from plain text nodes.\r\n   *\r\n   * @remarks\r\n   * This is useful when emitting HTML, where any number of spaces are equivalent\r\n   * to a single space.  It's also useful when emitting Markdown, where spaces\r\n   * can be misinterpreted as an indented code block.\r\n   *\r\n   * For example, we might transform this:\r\n   *\r\n   * ```\r\n   * nodes: [\r\n   *   { kind: PlainText, text: \"   Here   are some   \" },\r\n   *   { kind: SoftBreak }\r\n   *   { kind: PlainText, text: \"   words\" },\r\n   *   { kind: SoftBreak }\r\n   *   { kind: InlineTag, text: \"{\\@inheritDoc}\" },\r\n   *   { kind: PlainText, text: \"to process.\" },\r\n   *   { kind: PlainText, text: \"  \" },\r\n   *   { kind: PlainText, text: \"  \" }\r\n   * ]\r\n   * ```\r\n   *\r\n   * ...to this:\r\n   *\r\n   * ```\r\n   * nodes: [\r\n   *   { kind: PlainText, text: \"Here are some \" },\r\n   *   { kind: PlainText, text: \"words \" },\r\n   *   { kind: InlineTag, text: \"{\\@inheritDoc}\" },\r\n   *   { kind: PlainText, text: \"to process.\" }\r\n   * ]\r\n   * ```\r\n   *\r\n   * Note that in this example, `\"words \"` is not merged with the preceding node because\r\n   * its DocPlainText.excerpt cannot span multiple lines.\r\n   *\r\n   * @param docParagraph - a DocParagraph containing nodes to be transformed\r\n   * @returns The transformed child nodes.\r\n   */\r\n  public static trimSpacesInParagraph(docParagraph: DocParagraph): DocParagraph {\r\n    return TrimSpacesTransform.transform(docParagraph);\r\n  }\r\n}\r\n", "import {\r\n  DocNode,\r\n  DocComment,\r\n  DocNodeKind,\r\n  DocPlainText,\r\n  DocSection,\r\n  DocBlock,\r\n  DocParagraph,\r\n  DocBlockTag,\r\n  DocCodeSpan,\r\n  DocFencedCode,\r\n  DocDeclarationReference,\r\n  DocErrorText,\r\n  DocEscapedText,\r\n  DocHtmlEndTag,\r\n  DocHtmlStartTag,\r\n  DocHtmlAttribute,\r\n  DocInheritDocTag,\r\n  DocInlineTagBase,\r\n  DocInlineTag,\r\n  DocLinkTag,\r\n  DocMemberIdentifier,\r\n  DocMemberReference,\r\n  DocMemberSymbol,\r\n  DocMemberSelector,\r\n  DocParamBlock\r\n} from '../nodes';\r\nimport { IStringBuilder } from './StringBuilder';\r\nimport { DocNodeTransforms } from '../transforms/DocNodeTransforms';\r\nimport { StandardTags } from '../details/StandardTags';\r\nimport { DocParamCollection } from '../nodes/DocParamCollection';\r\n\r\nenum LineState {\r\n  Closed,\r\n  StartOfLine,\r\n  MiddleOfLine\r\n}\r\n\r\n/**\r\n * Renders a DocNode tree as a code comment.\r\n */\r\nexport class TSDocEmitter {\r\n  public readonly eol: string = '\\n';\r\n\r\n  // Whether to emit the /** */ framing\r\n  private _emitCommentFraming: boolean = true;\r\n\r\n  private _output: IStringBuilder | undefined;\r\n\r\n  // This state machine is used by the writer functions to generate the /** */ framing around the emitted lines\r\n  private _lineState: LineState = LineState.Closed;\r\n\r\n  // State for _ensureLineSkipped()\r\n  private _previousLineHadContent: boolean = false;\r\n\r\n  // Normally a paragraph is precede by a blank line (unless it's the first thing written).\r\n  // But sometimes we want the paragraph to be attached to the previous element, e.g. when it's part of\r\n  // an \"@param\" block.  Setting _hangingParagraph=true accomplishes that.\r\n  private _hangingParagraph: boolean = false;\r\n\r\n  public renderComment(output: IStringBuilder, docComment: DocComment): void {\r\n    this._emitCommentFraming = true;\r\n    this._renderCompleteObject(output, docComment);\r\n  }\r\n\r\n  public renderHtmlTag(output: IStringBuilder, htmlTag: DocHtmlStartTag | DocHtmlEndTag): void {\r\n    this._emitCommentFraming = false;\r\n    this._renderCompleteObject(output, htmlTag);\r\n  }\r\n\r\n  public renderDeclarationReference(\r\n    output: IStringBuilder,\r\n    declarationReference: DocDeclarationReference\r\n  ): void {\r\n    this._emitCommentFraming = false;\r\n    this._renderCompleteObject(output, declarationReference);\r\n  }\r\n\r\n  private _renderCompleteObject(output: IStringBuilder, docNode: DocNode): void {\r\n    this._output = output;\r\n\r\n    this._lineState = LineState.Closed;\r\n    this._previousLineHadContent = false;\r\n    this._hangingParagraph = false;\r\n\r\n    this._renderNode(docNode);\r\n\r\n    this._writeEnd();\r\n  }\r\n\r\n  private _renderNode(docNode: DocNode | undefined): void {\r\n    if (docNode === undefined) {\r\n      return;\r\n    }\r\n\r\n    switch (docNode.kind) {\r\n      case DocNodeKind.Block:\r\n        const docBlock: DocBlock = docNode as DocBlock;\r\n        this._ensureLineSkipped();\r\n        this._renderNode(docBlock.blockTag);\r\n\r\n        if (docBlock.blockTag.tagNameWithUpperCase === StandardTags.returns.tagNameWithUpperCase) {\r\n          this._writeContent(' ');\r\n          this._hangingParagraph = true;\r\n        }\r\n\r\n        this._renderNode(docBlock.content);\r\n        break;\r\n\r\n      case DocNodeKind.BlockTag:\r\n        const docBlockTag: DocBlockTag = docNode as DocBlockTag;\r\n        if (this._lineState === LineState.MiddleOfLine) {\r\n          this._writeContent(' ');\r\n        }\r\n        this._writeContent(docBlockTag.tagName);\r\n        break;\r\n\r\n      case DocNodeKind.CodeSpan:\r\n        const docCodeSpan: DocCodeSpan = docNode as DocCodeSpan;\r\n        this._writeContent('`');\r\n        this._writeContent(docCodeSpan.code);\r\n        this._writeContent('`');\r\n        break;\r\n\r\n      case DocNodeKind.Comment:\r\n        const docComment: DocComment = docNode as DocComment;\r\n        this._renderNodes([\r\n          docComment.summarySection,\r\n          docComment.remarksBlock,\r\n          docComment.privateRemarks,\r\n          docComment.deprecatedBlock,\r\n          docComment.params,\r\n          docComment.typeParams,\r\n          docComment.returnsBlock,\r\n          ...docComment.customBlocks,\r\n          ...docComment.seeBlocks,\r\n          docComment.inheritDocTag\r\n        ]);\r\n        if (docComment.modifierTagSet.nodes.length > 0) {\r\n          this._ensureLineSkipped();\r\n          this._renderNodes(docComment.modifierTagSet.nodes);\r\n        }\r\n        break;\r\n\r\n      case DocNodeKind.DeclarationReference:\r\n        const docDeclarationReference: DocDeclarationReference = docNode as DocDeclarationReference;\r\n        this._writeContent(docDeclarationReference.packageName);\r\n        this._writeContent(docDeclarationReference.importPath);\r\n        if (\r\n          docDeclarationReference.packageName !== undefined ||\r\n          docDeclarationReference.importPath !== undefined\r\n        ) {\r\n          this._writeContent('#');\r\n        }\r\n        this._renderNodes(docDeclarationReference.memberReferences);\r\n        break;\r\n\r\n      case DocNodeKind.ErrorText:\r\n        const docErrorText: DocErrorText = docNode as DocErrorText;\r\n        this._writeContent(docErrorText.text);\r\n        break;\r\n\r\n      case DocNodeKind.EscapedText:\r\n        const docEscapedText: DocEscapedText = docNode as DocEscapedText;\r\n        this._writeContent(docEscapedText.encodedText);\r\n        break;\r\n\r\n      case DocNodeKind.FencedCode:\r\n        const docFencedCode: DocFencedCode = docNode as DocFencedCode;\r\n\r\n        this._ensureAtStartOfLine();\r\n\r\n        this._writeContent('```');\r\n        this._writeContent(docFencedCode.language);\r\n        this._writeNewline();\r\n        this._writeContent(docFencedCode.code);\r\n        this._writeContent('```');\r\n        this._writeNewline();\r\n        this._writeNewline();\r\n        break;\r\n\r\n      case DocNodeKind.HtmlAttribute:\r\n        const docHtmlAttribute: DocHtmlAttribute = docNode as DocHtmlAttribute;\r\n        this._writeContent(docHtmlAttribute.name);\r\n        this._writeContent(docHtmlAttribute.spacingAfterName);\r\n        this._writeContent('=');\r\n        this._writeContent(docHtmlAttribute.spacingAfterEquals);\r\n        this._writeContent(docHtmlAttribute.value);\r\n        this._writeContent(docHtmlAttribute.spacingAfterValue);\r\n        break;\r\n\r\n      case DocNodeKind.HtmlEndTag:\r\n        const docHtmlEndTag: DocHtmlEndTag = docNode as DocHtmlEndTag;\r\n        this._writeContent('</');\r\n        this._writeContent(docHtmlEndTag.name);\r\n        this._writeContent('>');\r\n        break;\r\n\r\n      case DocNodeKind.HtmlStartTag:\r\n        const docHtmlStartTag: DocHtmlStartTag = docNode as DocHtmlStartTag;\r\n        this._writeContent('<');\r\n        this._writeContent(docHtmlStartTag.name);\r\n        this._writeContent(docHtmlStartTag.spacingAfterName);\r\n\r\n        let needsSpace: boolean =\r\n          docHtmlStartTag.spacingAfterName === undefined || docHtmlStartTag.spacingAfterName.length === 0;\r\n\r\n        for (const attribute of docHtmlStartTag.htmlAttributes) {\r\n          if (needsSpace) {\r\n            this._writeContent(' ');\r\n          }\r\n          this._renderNode(attribute);\r\n          needsSpace = attribute.spacingAfterValue === undefined || attribute.spacingAfterValue.length === 0;\r\n        }\r\n        this._writeContent(docHtmlStartTag.selfClosingTag ? '/>' : '>');\r\n        break;\r\n\r\n      case DocNodeKind.InheritDocTag:\r\n        const docInheritDocTag: DocInheritDocTag = docNode as DocInheritDocTag;\r\n        this._renderInlineTag(docInheritDocTag, () => {\r\n          if (docInheritDocTag.declarationReference) {\r\n            this._writeContent(' ');\r\n            this._renderNode(docInheritDocTag.declarationReference);\r\n          }\r\n        });\r\n        break;\r\n\r\n      case DocNodeKind.InlineTag:\r\n        const docInlineTag: DocInlineTag = docNode as DocInlineTag;\r\n        this._renderInlineTag(docInlineTag, () => {\r\n          if (docInlineTag.tagContent.length > 0) {\r\n            this._writeContent(' ');\r\n            this._writeContent(docInlineTag.tagContent);\r\n          }\r\n        });\r\n        break;\r\n\r\n      case DocNodeKind.LinkTag:\r\n        const docLinkTag: DocLinkTag = docNode as DocLinkTag;\r\n        this._renderInlineTag(docLinkTag, () => {\r\n          if (docLinkTag.urlDestination !== undefined || docLinkTag.codeDestination !== undefined) {\r\n            if (docLinkTag.urlDestination !== undefined) {\r\n              this._writeContent(' ');\r\n              this._writeContent(docLinkTag.urlDestination);\r\n            } else if (docLinkTag.codeDestination !== undefined) {\r\n              this._writeContent(' ');\r\n              this._renderNode(docLinkTag.codeDestination);\r\n            }\r\n          }\r\n          if (docLinkTag.linkText !== undefined) {\r\n            this._writeContent(' ');\r\n            this._writeContent('|');\r\n            this._writeContent(' ');\r\n            this._writeContent(docLinkTag.linkText);\r\n          }\r\n        });\r\n        break;\r\n\r\n      case DocNodeKind.MemberIdentifier:\r\n        const docMemberIdentifier: DocMemberIdentifier = docNode as DocMemberIdentifier;\r\n        if (docMemberIdentifier.hasQuotes) {\r\n          this._writeContent('\"');\r\n          this._writeContent(docMemberIdentifier.identifier); // todo: encoding\r\n          this._writeContent('\"');\r\n        } else {\r\n          this._writeContent(docMemberIdentifier.identifier);\r\n        }\r\n        break;\r\n\r\n      case DocNodeKind.MemberReference:\r\n        const docMemberReference: DocMemberReference = docNode as DocMemberReference;\r\n        if (docMemberReference.hasDot) {\r\n          this._writeContent('.');\r\n        }\r\n\r\n        if (docMemberReference.selector) {\r\n          this._writeContent('(');\r\n        }\r\n\r\n        if (docMemberReference.memberSymbol) {\r\n          this._renderNode(docMemberReference.memberSymbol);\r\n        } else {\r\n          this._renderNode(docMemberReference.memberIdentifier);\r\n        }\r\n\r\n        if (docMemberReference.selector) {\r\n          this._writeContent(':');\r\n          this._renderNode(docMemberReference.selector);\r\n          this._writeContent(')');\r\n        }\r\n        break;\r\n\r\n      case DocNodeKind.MemberSelector:\r\n        const docMemberSelector: DocMemberSelector = docNode as DocMemberSelector;\r\n        this._writeContent(docMemberSelector.selector);\r\n        break;\r\n\r\n      case DocNodeKind.MemberSymbol:\r\n        const docMemberSymbol: DocMemberSymbol = docNode as DocMemberSymbol;\r\n        this._writeContent('[');\r\n        this._renderNode(docMemberSymbol.symbolReference);\r\n        this._writeContent(']');\r\n        break;\r\n\r\n      case DocNodeKind.Section:\r\n        const docSection: DocSection = docNode as DocSection;\r\n        this._renderNodes(docSection.nodes);\r\n        break;\r\n\r\n      case DocNodeKind.Paragraph:\r\n        const trimmedParagraph: DocParagraph = DocNodeTransforms.trimSpacesInParagraph(\r\n          docNode as DocParagraph\r\n        );\r\n        if (trimmedParagraph.nodes.length > 0) {\r\n          if (this._hangingParagraph) {\r\n            // If it's a hanging paragraph, then don't skip a line\r\n            this._hangingParagraph = false;\r\n          } else {\r\n            this._ensureLineSkipped();\r\n          }\r\n\r\n          this._renderNodes(trimmedParagraph.nodes);\r\n          this._writeNewline();\r\n        }\r\n        break;\r\n\r\n      case DocNodeKind.ParamBlock:\r\n        const docParamBlock: DocParamBlock = docNode as DocParamBlock;\r\n        this._ensureLineSkipped();\r\n        this._renderNode(docParamBlock.blockTag);\r\n        this._writeContent(' ');\r\n        this._writeContent(docParamBlock.parameterName);\r\n        this._writeContent(' - ');\r\n        this._hangingParagraph = true;\r\n        this._renderNode(docParamBlock.content);\r\n        this._hangingParagraph = false;\r\n        break;\r\n\r\n      case DocNodeKind.ParamCollection:\r\n        const docParamCollection: DocParamCollection = docNode as DocParamCollection;\r\n        this._renderNodes(docParamCollection.blocks);\r\n        break;\r\n\r\n      case DocNodeKind.PlainText:\r\n        const docPlainText: DocPlainText = docNode as DocPlainText;\r\n        this._writeContent(docPlainText.text);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _renderInlineTag(docInlineTagBase: DocInlineTagBase, writeInlineTagContent: () => void): void {\r\n    this._writeContent('{');\r\n    this._writeContent(docInlineTagBase.tagName);\r\n    writeInlineTagContent();\r\n    this._writeContent('}');\r\n  }\r\n\r\n  private _renderNodes(docNodes: ReadonlyArray<DocNode | undefined>): void {\r\n    for (const docNode of docNodes) {\r\n      this._renderNode(docNode);\r\n    }\r\n  }\r\n\r\n  // Calls _writeNewline() only if we're not already at the start of a new line\r\n  private _ensureAtStartOfLine(): void {\r\n    if (this._lineState === LineState.MiddleOfLine) {\r\n      this._writeNewline();\r\n    }\r\n  }\r\n\r\n  // Calls _writeNewline() if needed to ensure that we have skipped at least one line\r\n  private _ensureLineSkipped(): void {\r\n    this._ensureAtStartOfLine();\r\n    if (this._previousLineHadContent) {\r\n      this._writeNewline();\r\n    }\r\n  }\r\n\r\n  // Writes literal text content.  If it contains newlines, they will automatically be converted to\r\n  // _writeNewline() calls, to ensure that \"*\" is written at the start of each line.\r\n  private _writeContent(content: string | undefined): void {\r\n    if (content === undefined || content.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const splitLines: string[] = content.split(/\\r?\\n/g);\r\n    if (splitLines.length > 1) {\r\n      let firstLine: boolean = true;\r\n      for (const line of splitLines) {\r\n        if (firstLine) {\r\n          firstLine = false;\r\n        } else {\r\n          this._writeNewline();\r\n        }\r\n        this._writeContent(line);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._lineState === LineState.Closed) {\r\n      if (this._emitCommentFraming) {\r\n        this._output!.append('/**' + this.eol + ' *');\r\n      }\r\n      this._lineState = LineState.StartOfLine;\r\n    }\r\n\r\n    if (this._lineState === LineState.StartOfLine) {\r\n      if (this._emitCommentFraming) {\r\n        this._output!.append(' ');\r\n      }\r\n    }\r\n\r\n    this._output!.append(content);\r\n    this._lineState = LineState.MiddleOfLine;\r\n    this._previousLineHadContent = true;\r\n  }\r\n\r\n  // Starts a new line, and inserts \"/**\" or \"*\" as appropriate.\r\n  private _writeNewline(): void {\r\n    if (this._lineState === LineState.Closed) {\r\n      if (this._emitCommentFraming) {\r\n        this._output!.append('/**' + this.eol + ' *');\r\n      }\r\n      this._lineState = LineState.StartOfLine;\r\n    }\r\n\r\n    this._previousLineHadContent = this._lineState === LineState.MiddleOfLine;\r\n\r\n    if (this._emitCommentFraming) {\r\n      this._output!.append(this.eol + ' *');\r\n    } else {\r\n      this._output!.append(this.eol);\r\n    }\r\n\r\n    this._lineState = LineState.StartOfLine;\r\n    this._hangingParagraph = false;\r\n  }\r\n\r\n  // Closes the comment, adding the final \"*/\" delimiter\r\n  private _writeEnd(): void {\r\n    if (this._lineState === LineState.MiddleOfLine) {\r\n      if (this._emitCommentFraming) {\r\n        this._writeNewline();\r\n      }\r\n    }\r\n\r\n    if (this._lineState !== LineState.Closed) {\r\n      if (this._emitCommentFraming) {\r\n        this._output!.append('/' + this.eol);\r\n      }\r\n      this._lineState = LineState.Closed;\r\n    }\r\n  }\r\n}\r\n", "import { DocNode, DocNodeKind, IDocNodeParameters } from './DocNode';\r\nimport { DocSection } from './DocSection';\r\nimport { StandardModifierTagSet } from '../details/StandardModifierTagSet';\r\nimport { DocBlock } from './DocBlock';\r\nimport { DocInheritDocTag } from './DocInheritDocTag';\r\nimport { StringBuilder } from '../emitters/StringBuilder';\r\nimport { DocParamCollection } from './DocParamCollection';\r\n\r\n/**\r\n * Constructor parameters for {@link DocComment}.\r\n */\r\nexport interface IDocCommentParameters extends IDocNodeParameters {}\r\n\r\n/**\r\n * Represents an entire documentation comment conforming to the TSDoc structure.\r\n * This is the root of the DocNode tree.\r\n */\r\nexport class DocComment extends DocNode {\r\n  /**\r\n   * The main documentation for an API item is separated into a brief \"summary\" section,\r\n   * optionally followed by an `@remarks` block containing additional details.\r\n   *\r\n   * @remarks\r\n   * The summary section should be brief. On a documentation web site, it will be shown\r\n   * on a page that lists summaries for many different API items.  On a detail page for\r\n   * a single item, the summary will be shown followed by the remarks section (if any).\r\n   */\r\n  public summarySection: DocSection;\r\n\r\n  /**\r\n   * The main documentation for an API item is separated into a brief \"summary\" section\r\n   * optionally followed by an `@remarks` block containing additional details.\r\n   *\r\n   * @remarks\r\n   * Unlike the summary, the remarks block may contain lengthy documentation content.\r\n   * The remarks should not restate information from the summary, since the summary section\r\n   * will always be displayed wherever the remarks section appears.  Other sections\r\n   * (e.g. an `@example` block) will be shown after the remarks section.\r\n   */\r\n  public remarksBlock: DocBlock | undefined;\r\n\r\n  /**\r\n   * The `@privateRemarks` tag starts a block of additional commentary that is not meant\r\n   * for an external audience.  A documentation tool must omit this content from an\r\n   * API reference web site.  It should also be omitted when generating a normalized\r\n   * *.d.ts file intended for third-party developers.\r\n   *\r\n   * @remarks\r\n   * A similar effect could be accomplished by enclosing content inside CommonMark\r\n   * `<!-- -->` comments, or by moving the content into a separate `//` TypeScript comment.\r\n   * However, the `@privateRemarks` tag is a more formal convention.\r\n   */\r\n  public privateRemarks: DocBlock | undefined;\r\n\r\n  /**\r\n   * If present, this block indicates that an API item is no loner supported and may be\r\n   * removed in a future release.  The `@deprecated` tag must be followed by a sentence\r\n   * describing the recommended alternative.  Deprecation recursively applies to members\r\n   * of a container.  For example, if a class is deprecated, then so are all of its members.\r\n   */\r\n  public deprecatedBlock: DocBlock | undefined;\r\n\r\n  /**\r\n   * The collection of parsed `@param` blocks for this doc comment.\r\n   */\r\n  public readonly params: DocParamCollection;\r\n\r\n  /**\r\n   * The collection of parsed `@typeParam` blocks for this doc comment.\r\n   */\r\n  public readonly typeParams: DocParamCollection;\r\n\r\n  /**\r\n   * The `@returns` block for this doc comment, or undefined if there is not one.\r\n   */\r\n  public returnsBlock: DocBlock | undefined;\r\n\r\n  /**\r\n   * If this doc comment contains an `@inheritDoc` tag, it will be extracted and associated\r\n   * with the DocComment.\r\n   */\r\n  public inheritDocTag: DocInheritDocTag | undefined;\r\n\r\n  /**\r\n   * The modifier tags for this DocComment.\r\n   */\r\n  public readonly modifierTagSet: StandardModifierTagSet;\r\n\r\n  private _seeBlocks: DocBlock[];\r\n  private _customBlocks: DocBlock[];\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocCommentParameters) {\r\n    super(parameters);\r\n\r\n    this.summarySection = new DocSection({ configuration: this.configuration });\r\n    this.remarksBlock = undefined;\r\n    this.privateRemarks = undefined;\r\n    this.deprecatedBlock = undefined;\r\n    this.params = new DocParamCollection({ configuration: this.configuration });\r\n    this.typeParams = new DocParamCollection({ configuration: this.configuration });\r\n    this.returnsBlock = undefined;\r\n\r\n    this.modifierTagSet = new StandardModifierTagSet();\r\n\r\n    this._seeBlocks = [];\r\n    this._customBlocks = [];\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.Comment;\r\n  }\r\n\r\n  /**\r\n   * The collection of all `@see` DockBlockTag nodes belonging to this doc comment.\r\n   */\r\n  public get seeBlocks(): ReadonlyArray<DocBlock> {\r\n    return this._seeBlocks;\r\n  }\r\n\r\n  /**\r\n   * The collection of all DocBlock nodes belonging to this doc comment.\r\n   */\r\n  public get customBlocks(): ReadonlyArray<DocBlock> {\r\n    return this._customBlocks;\r\n  }\r\n\r\n  /**\r\n   * Append an item to the seeBlocks collection.\r\n   * @internal\r\n   */\r\n  public _appendSeeBlock(block: DocBlock): void {\r\n    this._seeBlocks.push(block);\r\n  }\r\n\r\n  /**\r\n   * Append an item to the customBlocks collection.\r\n   */\r\n  public appendCustomBlock(block: DocBlock): void {\r\n    this._customBlocks.push(block);\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this.summarySection,\r\n      this.remarksBlock,\r\n      this.privateRemarks,\r\n      this.deprecatedBlock,\r\n      this.params.count > 0 ? this.params : undefined,\r\n      this.typeParams.count > 0 ? this.typeParams : undefined,\r\n      this.returnsBlock,\r\n      ...this.customBlocks,\r\n      ...this.seeBlocks,\r\n      this.inheritDocTag,\r\n      ...this.modifierTagSet.nodes\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Generates a doc comment corresponding to the `DocComment` tree.  The output is in a normalized form,\r\n   * and may ignore formatting/spacing from the original input.\r\n   *\r\n   * @remarks\r\n   * After parsing a string, and possibly modifying the result, `emitAsTsdoc()` can be used to render the result\r\n   * as a doc comment in a normalized format.  It can also be used to emit a `DocComment` tree that was constructed\r\n   * manually.\r\n   *\r\n   * This method is provided as convenience for simple use cases.  To customize the output, or if you need\r\n   * to render into a `StringBuilder`, use the {@link TSDocEmitter} class instead.\r\n   */\r\n  public emitAsTsdoc(): string {\r\n    const stringBuilder: StringBuilder = new StringBuilder();\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    const emitter: TSDocEmitter = new TSDocEmitter();\r\n    emitter.renderComment(stringBuilder, this);\r\n    return stringBuilder.toString();\r\n  }\r\n}\r\n\r\n// Circular reference\r\nimport { TSDocEmitter } from '../emitters/TSDocEmitter';\r\n", "import { DocNode, DocNodeKind, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { DocMemberReference } from './DocMemberReference';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport { StringBuilder } from '../emitters/StringBuilder';\r\n\r\n/**\r\n * Constructor parameters for {@link DocDeclarationReference}.\r\n */\r\nexport interface IDocDeclarationReferenceParameters extends IDocNodeParameters {\r\n  packageName?: string;\r\n  importPath?: string;\r\n  memberReferences?: DocMemberReference[];\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocDeclarationReference}.\r\n */\r\nexport interface IDocDeclarationReferenceParsedParameters extends IDocNodeParsedParameters {\r\n  packageNameExcerpt?: TokenSequence;\r\n  importPathExcerpt?: TokenSequence;\r\n  importHashExcerpt?: TokenSequence;\r\n  spacingAfterImportHashExcerpt?: TokenSequence;\r\n  memberReferences?: DocMemberReference[];\r\n}\r\n\r\n/**\r\n * Represents a declaration reference.\r\n *\r\n * @remarks\r\n * Declaration references are TSDoc expressions used by tags such as `{@link}`\r\n * or `{@inheritDoc}` that need to refer to another declaration.\r\n */\r\nexport class DocDeclarationReference extends DocNode {\r\n  private _packageName: string | undefined;\r\n  private readonly _packageNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private _importPath: string | undefined;\r\n  private readonly _importPathExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _importHashExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterImportHashExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _memberReferences: DocMemberReference[];\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(\r\n    parameters: IDocDeclarationReferenceParameters | IDocDeclarationReferenceParsedParameters\r\n  ) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      if (parameters.packageNameExcerpt) {\r\n        this._packageNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.DeclarationReference_PackageName,\r\n          content: parameters.packageNameExcerpt\r\n        });\r\n      }\r\n      if (parameters.importPathExcerpt) {\r\n        this._importPathExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.DeclarationReference_ImportPath,\r\n          content: parameters.importPathExcerpt\r\n        });\r\n      }\r\n      if (parameters.importHashExcerpt) {\r\n        this._importHashExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.DeclarationReference_ImportHash,\r\n          content: parameters.importHashExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterImportHashExcerpt) {\r\n        this._spacingAfterImportHashExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterImportHashExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      this._packageName = parameters.packageName;\r\n      this._importPath = parameters.importPath;\r\n    }\r\n\r\n    this._memberReferences = [];\r\n    if (parameters.memberReferences) {\r\n      this._memberReferences.push(...parameters.memberReferences);\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.DeclarationReference;\r\n  }\r\n\r\n  /**\r\n   * The optional package name, which may optionally include an NPM scope.\r\n   *\r\n   * Example: `\"@scope/my-package\"`\r\n   */\r\n  public get packageName(): string | undefined {\r\n    if (this._packageName === undefined) {\r\n      if (this._packageNameExcerpt !== undefined) {\r\n        this._packageName = this._packageNameExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._packageName;\r\n  }\r\n\r\n  /**\r\n   * The optional import path.  If a package name is provided, then if an import path is provided,\r\n   * the path must start with a \"/\" delimiter; otherwise paths are resolved relative to the source file\r\n   * containing the reference.\r\n   *\r\n   * Example: `\"/path1/path2\"`\r\n   * Example: `\"./path1/path2\"`\r\n   * Example: `\"../path2/path2\"`\r\n   */\r\n  public get importPath(): string | undefined {\r\n    if (this._importPath === undefined) {\r\n      if (this._importPathExcerpt !== undefined) {\r\n        this._importPath = this._importPathExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._importPath;\r\n  }\r\n\r\n  /**\r\n   * The chain of member references that indicate the declaration being referenced.\r\n   * If this list is empty, then either the packageName or importPath must be provided,\r\n   * because the reference refers to a module.\r\n   */\r\n  public get memberReferences(): ReadonlyArray<DocMemberReference> {\r\n    return this._memberReferences;\r\n  }\r\n\r\n  /**\r\n   * Generates the TSDoc representation of this declaration reference.\r\n   */\r\n  public emitAsTsdoc(): string {\r\n    const stringBuilder: StringBuilder = new StringBuilder();\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    const emitter: TSDocEmitter = new TSDocEmitter();\r\n    emitter.renderDeclarationReference(stringBuilder, this);\r\n    return stringBuilder.toString();\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._packageNameExcerpt,\r\n      this._importPathExcerpt,\r\n      this._importHashExcerpt,\r\n      this._spacingAfterImportHashExcerpt,\r\n      ...this._memberReferences\r\n    ];\r\n  }\r\n}\r\n\r\n// Circular reference\r\nimport { TSDocEmitter } from '../emitters/TSDocEmitter';\r\n", "import { DocNodeKind, DocNode, IDocNodeParsedParameters } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport { TSDocMessageId } from '../parser/TSDocMessageId';\r\n\r\n/**\r\n * Constructor parameters for {@link DocErrorText}.\r\n */\r\nexport interface IDocErrorTextParsedParameters extends IDocNodeParsedParameters {\r\n  textExcerpt: TokenSequence;\r\n\r\n  messageId: TSDocMessageId;\r\n  errorMessage: string;\r\n  errorLocation: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a span of text that contained invalid markup.\r\n * The characters should be rendered as plain text.\r\n */\r\nexport class DocErrorText extends DocNode {\r\n  private _text: string | undefined;\r\n  private readonly _textExcerpt: DocExcerpt;\r\n\r\n  private readonly _messageId: TSDocMessageId;\r\n  private readonly _errorMessage: string;\r\n  private readonly _errorLocation: TokenSequence;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocErrorTextParsedParameters) {\r\n    super(parameters);\r\n\r\n    this._textExcerpt = new DocExcerpt({\r\n      configuration: this.configuration,\r\n      excerptKind: ExcerptKind.ErrorText,\r\n      content: parameters.textExcerpt\r\n    });\r\n\r\n    this._messageId = parameters.messageId;\r\n    this._errorMessage = parameters.errorMessage;\r\n    this._errorLocation = parameters.errorLocation;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.ErrorText;\r\n  }\r\n\r\n  /**\r\n   * The characters that should be rendered as plain text because they\r\n   * could not be parsed successfully.\r\n   */\r\n  public get text(): string {\r\n    if (this._text === undefined) {\r\n      this._text = this._textExcerpt.content.toString();\r\n    }\r\n    return this._text;\r\n  }\r\n\r\n  public get textExcerpt(): TokenSequence | undefined {\r\n    if (this._textExcerpt) {\r\n      return this._textExcerpt.content;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The TSDoc error message identifier.\r\n   */\r\n  public get messageId(): TSDocMessageId {\r\n    return this._messageId;\r\n  }\r\n\r\n  /**\r\n   * A description of why the character could not be parsed.\r\n   */\r\n  public get errorMessage(): string {\r\n    return this._errorMessage;\r\n  }\r\n\r\n  /**\r\n   * The range of characters that caused the error.  In general these may be\r\n   * somewhat farther ahead in the input stream from the DocErrorText node itself.\r\n   *\r\n   * @remarks\r\n   * For example, for the malformed HTML tag `<a href=\"123\" @ /a>`, the DocErrorText node\r\n   * will correspond to the `<` character that looked like an HTML tag, whereas the\r\n   * error location might be the `@` character that caused the trouble.\r\n   */\r\n  public get errorLocation(): TokenSequence {\r\n    return this._errorLocation;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._textExcerpt];\r\n  }\r\n}\r\n", "import { DocNodeKind, IDocNodeParsedParameters, DocNode } from './DocNode';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\n\r\n/**\r\n * Constructor parameters for {@link DocEscapedText}.\r\n */\r\nexport interface IDocEscapedTextParsedParameters extends IDocNodeParsedParameters {\r\n  escapeStyle: EscapeStyle;\r\n  encodedTextExcerpt: TokenSequence;\r\n  decodedText: string;\r\n}\r\n\r\n/**\r\n * The style of escaping to be used with DocEscapedText.\r\n */\r\nexport enum EscapeStyle {\r\n  /**\r\n   * Use a backslash symbol to escape the character.\r\n   */\r\n  CommonMarkBackslash\r\n}\r\n\r\n/**\r\n * Represents a text character that should be escaped as a TSDoc symbol.\r\n * @remarks\r\n * Note that renders will normally apply appropriate escaping when rendering\r\n * DocPlainText in a format such as HTML or TSDoc.  The DocEscapedText node\r\n * forces a specific escaping that may not be the default.\r\n */\r\nexport class DocEscapedText extends DocNode {\r\n  private readonly _escapeStyle: EscapeStyle;\r\n\r\n  private _encodedText: string | undefined;\r\n  private readonly _encodedTextExcerpt: DocExcerpt;\r\n\r\n  private readonly _decodedText: string;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocEscapedTextParsedParameters) {\r\n    super(parameters);\r\n\r\n    this._escapeStyle = parameters.escapeStyle;\r\n\r\n    this._encodedTextExcerpt = new DocExcerpt({\r\n      configuration: this.configuration,\r\n      excerptKind: ExcerptKind.EscapedText,\r\n      content: parameters.encodedTextExcerpt\r\n    });\r\n\r\n    this._decodedText = parameters.decodedText;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.EscapedText;\r\n  }\r\n\r\n  /**\r\n   * The style of escaping to be performed.\r\n   */\r\n  public get escapeStyle(): EscapeStyle {\r\n    return this._escapeStyle;\r\n  }\r\n\r\n  /**\r\n   * The text sequence including escapes.\r\n   */\r\n  public get encodedText(): string {\r\n    if (this._encodedText === undefined) {\r\n      this._encodedText = this._encodedTextExcerpt.content.toString();\r\n    }\r\n    return this._encodedText;\r\n  }\r\n\r\n  /**\r\n   * The text without escaping.\r\n   */\r\n  public get decodedText(): string {\r\n    return this._decodedText;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._encodedTextExcerpt];\r\n  }\r\n}\r\n", "import { DocNodeKind, IDocNodeParameters, DocNode, IDocNodeParsedParameters } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocFencedCode}.\r\n */\r\nexport interface IDocFencedCodeParameters extends IDocNodeParameters {\r\n  language: string;\r\n\r\n  code: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocFencedCode}.\r\n */\r\nexport interface IDocFencedCodeParsedParameters extends IDocNodeParsedParameters {\r\n  openingFenceExcerpt: TokenSequence;\r\n  spacingAfterOpeningFenceExcerpt?: TokenSequence;\r\n\r\n  languageExcerpt?: TokenSequence;\r\n  spacingAfterLanguageExcerpt?: TokenSequence;\r\n\r\n  codeExcerpt: TokenSequence;\r\n\r\n  spacingBeforeClosingFenceExcerpt?: TokenSequence;\r\n  closingFenceExcerpt: TokenSequence;\r\n  spacingAfterClosingFenceExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents CommonMark-style code fence, i.e. a block of program code that\r\n * starts and ends with a line comprised of three backticks.  The opening delimiter\r\n * can also specify a language for a syntax highlighter.\r\n */\r\nexport class DocFencedCode extends DocNode {\r\n  // The opening ``` delimiter and padding\r\n  private readonly _openingFenceExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _spacingAfterOpeningFenceExcerpt: DocExcerpt | undefined;\r\n\r\n  // The optional language string\r\n  private _language: string | undefined;\r\n  private readonly _languageExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _spacingAfterLanguageExcerpt: DocExcerpt | undefined;\r\n\r\n  // The code content\r\n  private _code: string | undefined;\r\n  private readonly _codeExcerpt: DocExcerpt | undefined;\r\n\r\n  // The closing ``` delimiter and padding\r\n  private readonly _spacingBeforeClosingFenceExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _closingFenceExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _spacingAfterClosingFenceExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocFencedCodeParameters | IDocFencedCodeParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._openingFenceExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.FencedCode_OpeningFence,\r\n        content: parameters.openingFenceExcerpt\r\n      });\r\n      if (parameters.spacingAfterOpeningFenceExcerpt) {\r\n        this._spacingAfterOpeningFenceExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterOpeningFenceExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.languageExcerpt) {\r\n        this._languageExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.FencedCode_Language,\r\n          content: parameters.languageExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterLanguageExcerpt) {\r\n        this._spacingAfterLanguageExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterLanguageExcerpt\r\n        });\r\n      }\r\n\r\n      this._codeExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.FencedCode_Code,\r\n        content: parameters.codeExcerpt\r\n      });\r\n\r\n      if (parameters.spacingBeforeClosingFenceExcerpt) {\r\n        this._spacingBeforeClosingFenceExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingBeforeClosingFenceExcerpt\r\n        });\r\n      }\r\n      this._closingFenceExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.FencedCode_ClosingFence,\r\n        content: parameters.closingFenceExcerpt\r\n      });\r\n      if (parameters.spacingAfterClosingFenceExcerpt) {\r\n        this._spacingAfterClosingFenceExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterClosingFenceExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      this._code = parameters.code;\r\n      this._language = parameters.language;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.FencedCode;\r\n  }\r\n\r\n  /**\r\n   * A name that can optionally be included after the opening code fence delimiter,\r\n   * on the same line as the three backticks.  This name indicates the programming language\r\n   * for the code, which a syntax highlighter may use to style the code block.\r\n   *\r\n   * @remarks\r\n   * The TSDoc standard requires that the language \"ts\" should be interpreted to mean TypeScript.\r\n   * Other languages names may be supported, but this is implementation dependent.\r\n   *\r\n   * CommonMark refers to this field as the \"info string\".\r\n   *\r\n   * @privateRemarks\r\n   * Examples of language strings supported by GitHub flavored markdown:\r\n   * https://raw.githubusercontent.com/github/linguist/master/lib/linguist/languages.yml\r\n   */\r\n  public get language(): string | 'ts' | '' {\r\n    if (this._language === undefined) {\r\n      if (this._languageExcerpt !== undefined) {\r\n        this._language = this._languageExcerpt.content.toString();\r\n      } else {\r\n        this._language = '';\r\n      }\r\n    }\r\n    return this._language;\r\n  }\r\n\r\n  /**\r\n   * The text that should be rendered as code.\r\n   */\r\n  public get code(): string {\r\n    if (this._code === undefined) {\r\n      if (this._codeExcerpt !== undefined) {\r\n        this._code = this._codeExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._code!;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._openingFenceExcerpt,\r\n      this._spacingAfterOpeningFenceExcerpt,\r\n\r\n      this._languageExcerpt,\r\n      this._spacingAfterLanguageExcerpt,\r\n\r\n      this._codeExcerpt,\r\n\r\n      this._spacingBeforeClosingFenceExcerpt,\r\n      this._closingFenceExcerpt,\r\n      this._spacingAfterClosingFenceExcerpt\r\n    ];\r\n  }\r\n}\r\n", "import { DocNode, DocNodeKind, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocHtmlAttribute}.\r\n */\r\nexport interface IDocHtmlAttributeParameters extends IDocNodeParameters {\r\n  name: string;\r\n  spacingAfterName?: string;\r\n  spacingAfterEquals?: string;\r\n  value: string;\r\n  spacingAfterValue?: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocHtmlAttribute}.\r\n */\r\nexport interface IDocHtmlAttributeParsedParameters extends IDocNodeParsedParameters {\r\n  nameExcerpt: TokenSequence;\r\n  spacingAfterNameExcerpt?: TokenSequence;\r\n\r\n  equalsExcerpt: TokenSequence;\r\n  spacingAfterEqualsExcerpt?: TokenSequence;\r\n\r\n  valueExcerpt: TokenSequence;\r\n  spacingAfterValueExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents an HTML attribute inside a DocHtmlStartTag or DocHtmlEndTag.\r\n *\r\n * Example: `href=\"#\"` inside `<a href=\"#\" />`\r\n */\r\nexport class DocHtmlAttribute extends DocNode {\r\n  // The attribute name\r\n  private _name: string | undefined;\r\n  private readonly _nameExcerpt: DocExcerpt | undefined;\r\n\r\n  private _spacingAfterName: string | undefined;\r\n  private readonly _spacingAfterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  // The \"=\" delimiter\r\n  private readonly _equalsExcerpt: DocExcerpt | undefined;\r\n\r\n  private _spacingAfterEquals: string | undefined;\r\n  private readonly _spacingAfterEqualsExcerpt: DocExcerpt | undefined;\r\n\r\n  // The attribute value including quotation marks\r\n  private _value: string | undefined;\r\n  private readonly _valueExcerpt: DocExcerpt | undefined;\r\n\r\n  private _spacingAfterValue: string | undefined;\r\n  private readonly _spacingAfterValueExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocHtmlAttributeParameters | IDocHtmlAttributeParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._nameExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlAttribute_Name,\r\n        content: parameters.nameExcerpt\r\n      });\r\n      if (parameters.spacingAfterNameExcerpt) {\r\n        this._spacingAfterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterNameExcerpt\r\n        });\r\n      }\r\n\r\n      this._equalsExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlAttribute_Equals,\r\n        content: parameters.equalsExcerpt\r\n      });\r\n      if (parameters.spacingAfterEqualsExcerpt) {\r\n        this._spacingAfterEqualsExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterEqualsExcerpt\r\n        });\r\n      }\r\n\r\n      this._valueExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlAttribute_Value,\r\n        content: parameters.valueExcerpt\r\n      });\r\n      if (parameters.spacingAfterValueExcerpt) {\r\n        this._spacingAfterValueExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterValueExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      this._name = parameters.name;\r\n      this._spacingAfterName = parameters.spacingAfterName;\r\n\r\n      this._spacingAfterEquals = parameters.spacingAfterEquals;\r\n\r\n      this._value = parameters.value;\r\n      this._spacingAfterValue = parameters.spacingAfterValue;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.HtmlAttribute;\r\n  }\r\n\r\n  /**\r\n   * The HTML attribute name.\r\n   */\r\n  public get name(): string {\r\n    if (this._name === undefined) {\r\n      this._name = this._nameExcerpt!.content.toString();\r\n    }\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * Explicit whitespace that a renderer should insert after the HTML attribute name.\r\n   * If undefined, then the renderer can use a formatting rule to generate appropriate spacing.\r\n   */\r\n  public get spacingAfterName(): string | undefined {\r\n    if (this._spacingAfterName === undefined) {\r\n      if (this._spacingAfterNameExcerpt !== undefined) {\r\n        this._spacingAfterName = this._spacingAfterNameExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._spacingAfterName;\r\n  }\r\n\r\n  /**\r\n   * Explicit whitespace that a renderer should insert after the \"=\".\r\n   * If undefined, then the renderer can use a formatting rule to generate appropriate spacing.\r\n   */\r\n  public get spacingAfterEquals(): string | undefined {\r\n    if (this._spacingAfterEquals === undefined) {\r\n      if (this._spacingAfterEqualsExcerpt !== undefined) {\r\n        this._spacingAfterEquals = this._spacingAfterEqualsExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._spacingAfterEquals;\r\n  }\r\n\r\n  /**\r\n   * The HTML attribute value.\r\n   */\r\n  public get value(): string {\r\n    if (this._value === undefined) {\r\n      this._value = this._valueExcerpt!.content.toString();\r\n    }\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * Explicit whitespace that a renderer should insert after the HTML attribute name.\r\n   * If undefined, then the renderer can use a formatting rule to generate appropriate spacing.\r\n   */\r\n  public get spacingAfterValue(): string | undefined {\r\n    if (this._spacingAfterValue === undefined) {\r\n      if (this._spacingAfterValueExcerpt !== undefined) {\r\n        this._spacingAfterValue = this._spacingAfterValueExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._spacingAfterValue;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._nameExcerpt,\r\n      this._spacingAfterNameExcerpt,\r\n      this._equalsExcerpt,\r\n      this._spacingAfterEqualsExcerpt,\r\n      this._valueExcerpt,\r\n      this._spacingAfterValueExcerpt\r\n    ];\r\n  }\r\n}\r\n", "import { DocNode, DocNodeKind, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport { StringBuilder } from '../emitters/StringBuilder';\r\n\r\n/**\r\n * Constructor parameters for {@link DocHtmlEndTag}.\r\n */\r\nexport interface IDocHtmlEndTagParameters extends IDocNodeParameters {\r\n  name: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocHtmlEndTag}.\r\n */\r\nexport interface IDocHtmlEndTagParsedParameters extends IDocNodeParsedParameters {\r\n  openingDelimiterExcerpt: TokenSequence;\r\n\r\n  nameExcerpt: TokenSequence;\r\n  spacingAfterNameExcerpt?: TokenSequence;\r\n\r\n  closingDelimiterExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents an HTML end tag.  Example: `</a>`\r\n */\r\nexport class DocHtmlEndTag extends DocNode {\r\n  // The \"</\" delimiter and padding\r\n  private readonly _openingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  // The element name\r\n  private _name: string | undefined;\r\n  private readonly _nameExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  // The  \">\" delimiter and padding\r\n  private readonly _closingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocHtmlEndTagParameters | IDocHtmlEndTagParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._openingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlEndTag_OpeningDelimiter,\r\n        content: parameters.openingDelimiterExcerpt\r\n      });\r\n      this._nameExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlEndTag_Name,\r\n        content: parameters.nameExcerpt\r\n      });\r\n\r\n      if (parameters.spacingAfterNameExcerpt) {\r\n        this._spacingAfterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterNameExcerpt\r\n        });\r\n      }\r\n\r\n      this._closingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlEndTag_ClosingDelimiter,\r\n        content: parameters.closingDelimiterExcerpt\r\n      });\r\n    } else {\r\n      this._name = parameters.name;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.HtmlEndTag;\r\n  }\r\n\r\n  /**\r\n   * The HTML element name.\r\n   */\r\n  public get name(): string {\r\n    if (this._name === undefined) {\r\n      this._name = this._nameExcerpt!.content.toString();\r\n    }\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * Generates the HTML for this tag.\r\n   */\r\n  public emitAsHtml(): string {\r\n    // NOTE: Here we're assuming that the TSDoc representation for a tag is also a valid HTML expression.\r\n    const stringBuilder: StringBuilder = new StringBuilder();\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    const emitter: TSDocEmitter = new TSDocEmitter();\r\n    emitter.renderHtmlTag(stringBuilder, this);\r\n    return stringBuilder.toString();\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._openingDelimiterExcerpt,\r\n      this._nameExcerpt,\r\n      this._spacingAfterNameExcerpt,\r\n      this._closingDelimiterExcerpt\r\n    ];\r\n  }\r\n}\r\n\r\n// Circular reference\r\nimport { TSDocEmitter } from '../emitters/TSDocEmitter';\r\n", "import { DocNode, DocNodeKind, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { DocHtmlAttribute } from './DocHtmlAttribute';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport { StringBuilder } from '../emitters/StringBuilder';\r\n\r\n/**\r\n * Constructor parameters for {@link DocHtmlStartTag}.\r\n */\r\nexport interface IDocHtmlStartTagParameters extends IDocNodeParameters {\r\n  name: string;\r\n  spacingAfterName?: string;\r\n\r\n  htmlAttributes?: DocHtmlAttribute[];\r\n  selfClosingTag?: boolean;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocHtmlStartTag}.\r\n */\r\nexport interface IDocHtmlStartTagParsedParameters extends IDocNodeParsedParameters {\r\n  openingDelimiterExcerpt: TokenSequence;\r\n\r\n  nameExcerpt: TokenSequence;\r\n  spacingAfterNameExcerpt?: TokenSequence;\r\n\r\n  htmlAttributes: DocHtmlAttribute[];\r\n  selfClosingTag: boolean;\r\n\r\n  closingDelimiterExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents an HTML start tag, which may or may not be self-closing.\r\n *\r\n * Example: `<a href=\"#\" />`\r\n */\r\nexport class DocHtmlStartTag extends DocNode {\r\n  // The \"<\" delimiter\r\n  private readonly _openingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  // The element name\r\n  private _name: string | undefined;\r\n  private readonly _nameExcerpt: DocExcerpt | undefined;\r\n\r\n  private _spacingAfterName: string | undefined;\r\n  private readonly _spacingAfterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _htmlAttributes: DocHtmlAttribute[];\r\n\r\n  private readonly _selfClosingTag: boolean;\r\n\r\n  // The \">\" or \"/>\" delimiter\r\n  private readonly _closingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocHtmlStartTagParameters | IDocHtmlStartTagParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._openingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlStartTag_OpeningDelimiter,\r\n        content: parameters.openingDelimiterExcerpt\r\n      });\r\n\r\n      this._nameExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlStartTag_Name,\r\n        content: parameters.nameExcerpt\r\n      });\r\n      if (parameters.spacingAfterNameExcerpt) {\r\n        this._spacingAfterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterNameExcerpt\r\n        });\r\n      }\r\n\r\n      this._closingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.HtmlStartTag_ClosingDelimiter,\r\n        content: parameters.closingDelimiterExcerpt\r\n      });\r\n    } else {\r\n      this._name = parameters.name;\r\n      this._spacingAfterName = parameters.spacingAfterName;\r\n    }\r\n\r\n    this._htmlAttributes = [];\r\n    if (parameters.htmlAttributes) {\r\n      this._htmlAttributes.push(...parameters.htmlAttributes);\r\n    }\r\n\r\n    this._selfClosingTag = !!parameters.selfClosingTag;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.HtmlStartTag;\r\n  }\r\n\r\n  /**\r\n   * The HTML element name.\r\n   */\r\n  public get name(): string {\r\n    if (this._name === undefined) {\r\n      this._name = this._nameExcerpt!.content.toString();\r\n    }\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * The HTML attributes belonging to this HTML element.\r\n   */\r\n  public get htmlAttributes(): ReadonlyArray<DocHtmlAttribute> {\r\n    return this._htmlAttributes;\r\n  }\r\n\r\n  /**\r\n   * If true, then the HTML tag ends with `/>` instead of `>`.\r\n   */\r\n  public get selfClosingTag(): boolean {\r\n    return this._selfClosingTag;\r\n  }\r\n\r\n  /**\r\n   * Explicit whitespace that a renderer should insert after the HTML element name.\r\n   * If undefined, then the renderer can use a formatting rule to generate appropriate spacing.\r\n   */\r\n  public get spacingAfterName(): string | undefined {\r\n    if (this._spacingAfterName === undefined) {\r\n      if (this._spacingAfterNameExcerpt !== undefined) {\r\n        this._spacingAfterName = this._spacingAfterNameExcerpt.content.toString();\r\n      }\r\n    }\r\n\r\n    return this._spacingAfterName;\r\n  }\r\n\r\n  /**\r\n   * Generates the HTML for this tag.\r\n   */\r\n  public emitAsHtml(): string {\r\n    // NOTE: Here we're assuming that the TSDoc representation for a tag is also a valid HTML expression.\r\n    const stringBuilder: StringBuilder = new StringBuilder();\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    const emitter: TSDocEmitter = new TSDocEmitter();\r\n    emitter.renderHtmlTag(stringBuilder, this);\r\n    return stringBuilder.toString();\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._openingDelimiterExcerpt,\r\n      this._nameExcerpt,\r\n      this._spacingAfterNameExcerpt,\r\n      ...this._htmlAttributes,\r\n      this._closingDelimiterExcerpt\r\n    ];\r\n  }\r\n}\r\n\r\n// Circular reference\r\nimport { TSDocEmitter } from '../emitters/TSDocEmitter';\r\n", "import { IDocNodeParameters, DocNode, IDocNodeParsedParameters } from './DocNode';\r\nimport { StringChecks } from '../parser/StringChecks';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocInlineTagBase}.\r\n */\r\nexport interface IDocInlineTagBaseParameters extends IDocNodeParameters {\r\n  tagName: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocInlineTagBase}.\r\n */\r\nexport interface IDocInlineTagBaseParsedParameters extends IDocNodeParsedParameters {\r\n  openingDelimiterExcerpt: TokenSequence;\r\n\r\n  tagNameExcerpt: TokenSequence;\r\n  tagName: string;\r\n  spacingAfterTagNameExcerpt?: TokenSequence;\r\n\r\n  closingDelimiterExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * The abstract base class for {@link DocInlineTag}, {@link DocLinkTag}, and {@link DocInheritDocTag}.\r\n */\r\nexport abstract class DocInlineTagBase extends DocNode {\r\n  private readonly _openingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _tagName: string;\r\n  private readonly _tagNameWithUpperCase: string;\r\n  private readonly _tagNameExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterTagNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _closingDelimiterExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocInlineTagBaseParameters | IDocInlineTagBaseParsedParameters) {\r\n    super(parameters);\r\n\r\n    StringChecks.validateTSDocTagName(parameters.tagName);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._openingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.InlineTag_OpeningDelimiter,\r\n        content: parameters.openingDelimiterExcerpt\r\n      });\r\n\r\n      this._tagNameExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.InlineTag_TagName,\r\n        content: parameters.tagNameExcerpt\r\n      });\r\n\r\n      if (parameters.spacingAfterTagNameExcerpt) {\r\n        this._spacingAfterTagNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterTagNameExcerpt\r\n        });\r\n      }\r\n\r\n      this._closingDelimiterExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.InlineTag_ClosingDelimiter,\r\n        content: parameters.closingDelimiterExcerpt\r\n      });\r\n    }\r\n\r\n    this._tagName = parameters.tagName;\r\n    this._tagNameWithUpperCase = parameters.tagName.toUpperCase();\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tag name.  TSDoc tag names start with an at-sign (`@`) followed\r\n   * by ASCII letters using \"camelCase\" capitalization.\r\n   *\r\n   * @remarks\r\n   * For example, if the inline tag is `{@link Guid.toString | the toString() method}`\r\n   * then the tag name would be `@link`.\r\n   */\r\n  public get tagName(): string {\r\n    return this._tagName;\r\n  }\r\n\r\n  /**\r\n   * The TSDoc tag name in all capitals, which is used for performing\r\n   * case-insensitive comparisons or lookups.\r\n   */\r\n  public get tagNameWithUpperCase(): string {\r\n    return this._tagNameWithUpperCase;\r\n  }\r\n\r\n  /** @override @sealed */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._openingDelimiterExcerpt,\r\n      this._tagNameExcerpt,\r\n      this._spacingAfterTagNameExcerpt,\r\n      ...this.getChildNodesForContent(),\r\n      this._closingDelimiterExcerpt\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Allows child classes to replace the tagContentParticle with a more detailed\r\n   * set of nodes.\r\n   * @virtual\r\n   */\r\n  protected abstract getChildNodesForContent(): ReadonlyArray<DocNode | undefined>;\r\n}\r\n", "import { DocNodeKind, DocNode } from './DocNode';\r\nimport { DocDeclarationReference } from './DocDeclarationReference';\r\nimport {\r\n  DocInlineTagBase,\r\n  IDocInlineTagBaseParsedParameters,\r\n  IDocInlineTagBaseParameters\r\n} from './DocInlineTagBase';\r\n\r\n/**\r\n * Constructor parameters for {@link DocInheritDocTag}.\r\n */\r\nexport interface IDocInheritDocTagParameters extends IDocInlineTagBaseParameters {\r\n  declarationReference?: DocDeclarationReference;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocInheritDocTag}.\r\n */\r\nexport interface IDocInheritDocTagParsedParameters extends IDocInlineTagBaseParsedParameters {\r\n  declarationReference?: DocDeclarationReference;\r\n}\r\n\r\n/**\r\n * Represents an `{@inheritDoc}` tag.\r\n */\r\nexport class DocInheritDocTag extends DocInlineTagBase {\r\n  private readonly _declarationReference: DocDeclarationReference | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocInheritDocTagParameters | IDocInheritDocTagParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (this.tagNameWithUpperCase !== '@INHERITDOC') {\r\n      throw new Error('DocInheritDocTag requires the tag name to be \"{@inheritDoc}\"');\r\n    }\r\n\r\n    this._declarationReference = parameters.declarationReference;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.InheritDocTag;\r\n  }\r\n\r\n  /**\r\n   * The declaration that the documentation will be inherited from.\r\n   * If omitted, the documentation will be inherited from the parent class.\r\n   */\r\n  public get declarationReference(): DocDeclarationReference | undefined {\r\n    return this._declarationReference;\r\n  }\r\n\r\n  /** @override */\r\n  protected getChildNodesForContent(): ReadonlyArray<DocNode | undefined> {\r\n    // abstract\r\n    return [this._declarationReference];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport {\r\n  IDocInlineTagBaseParameters,\r\n  IDocInlineTagBaseParsedParameters,\r\n  DocInlineTagBase\r\n} from './DocInlineTagBase';\r\n\r\n/**\r\n * Constructor parameters for {@link DocInlineTag}.\r\n */\r\nexport interface IDocInlineTagParameters extends IDocInlineTagBaseParameters {\r\n  tagContent: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocInlineTag}.\r\n */\r\nexport interface IDocInlineTagParsedParameters extends IDocInlineTagBaseParsedParameters {\r\n  tagContentExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a generic TSDoc inline tag, including custom tags.\r\n *\r\n * @remarks\r\n * NOTE: Certain tags such as `{@link}` and `{@inheritDoc}` have specialized structures and parser rules,\r\n * and thus are represented using {@link DocLinkTag} or {@link DocInheritDocTag} instead.  However, if the\r\n * specialized parser rule encounters a syntax error, but the outer framing is correct, then the parser constructs\r\n * a generic `DocInlineTag` instead of `DocErrorText`.  This means, for example, that it is possible sometimes for\r\n * `DocInlineTag.tagName` to be `\"@link\"`.\r\n */\r\nexport class DocInlineTag extends DocInlineTagBase {\r\n  private _tagContent: string | undefined;\r\n  private readonly _tagContentExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocInlineTagParameters | IDocInlineTagParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      if (parameters.tagContentExcerpt) {\r\n        this._tagContentExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.InlineTag_TagContent,\r\n          content: parameters.tagContentExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      this._tagContent = parameters.tagContent;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.InlineTag;\r\n  }\r\n\r\n  /**\r\n   * The tag content.\r\n   * @remarks\r\n   * For example, if the tag is `{@myTag x=12.34 y=56.78 }` then the tag content\r\n   * would be `x=12.34 y=56.78 `, including the trailing space but not the leading space.\r\n   */\r\n  public get tagContent(): string {\r\n    if (this._tagContent === undefined) {\r\n      if (this._tagContentExcerpt) {\r\n        this._tagContent = this._tagContentExcerpt.content.toString();\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n    return this._tagContent;\r\n  }\r\n\r\n  /** @override */\r\n  protected getChildNodesForContent(): ReadonlyArray<DocNode | undefined> {\r\n    // abstract\r\n    return [this._tagContentExcerpt];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode } from './DocNode';\r\nimport { DocDeclarationReference } from './DocDeclarationReference';\r\nimport {\r\n  DocInlineTagBase,\r\n  IDocInlineTagBaseParsedParameters,\r\n  IDocInlineTagBaseParameters\r\n} from './DocInlineTagBase';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\n\r\n/**\r\n * Constructor parameters for {@link DocLinkTag}.\r\n */\r\nexport interface IDocLinkTagParameters extends IDocInlineTagBaseParameters {\r\n  codeDestination?: DocDeclarationReference;\r\n\r\n  urlDestination?: string;\r\n\r\n  linkText?: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocLinkTag}.\r\n */\r\nexport interface IDocLinkTagParsedParameters extends IDocInlineTagBaseParsedParameters {\r\n  codeDestination?: DocDeclarationReference;\r\n\r\n  urlDestinationExcerpt?: TokenSequence;\r\n\r\n  spacingAfterDestinationExcerpt?: TokenSequence;\r\n\r\n  pipeExcerpt?: TokenSequence;\r\n  spacingAfterPipeExcerpt?: TokenSequence;\r\n\r\n  linkTextExcerpt?: TokenSequence;\r\n  spacingAfterLinkTextExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents an `{@link}` tag.\r\n */\r\nexport class DocLinkTag extends DocInlineTagBase {\r\n  private readonly _codeDestination: DocDeclarationReference | undefined;\r\n\r\n  private _urlDestination: string | undefined;\r\n  private readonly _urlDestinationExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _spacingAfterDestinationExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _pipeExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterPipeExcerpt: DocExcerpt | undefined;\r\n\r\n  private _linkText: string | undefined;\r\n  private readonly _spacingAfterLinkTextExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _linkTextExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocLinkTagParameters | IDocLinkTagParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (this.tagNameWithUpperCase !== '@LINK') {\r\n      throw new Error('DocLinkTag requires the tag name to be \"{@link}\"');\r\n    }\r\n\r\n    this._codeDestination = parameters.codeDestination;\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      if (parameters.codeDestination !== undefined && parameters.urlDestinationExcerpt !== undefined) {\r\n        throw new Error('Either the codeDestination or the urlDestination may be specified, but not both');\r\n      }\r\n\r\n      if (parameters.urlDestinationExcerpt) {\r\n        this._urlDestinationExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.LinkTag_UrlDestination,\r\n          content: parameters.urlDestinationExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterDestinationExcerpt) {\r\n        this._spacingAfterDestinationExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterDestinationExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.pipeExcerpt) {\r\n        this._pipeExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.LinkTag_Pipe,\r\n          content: parameters.pipeExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterPipeExcerpt) {\r\n        this._spacingAfterPipeExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterPipeExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.linkTextExcerpt) {\r\n        this._linkTextExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.LinkTag_LinkText,\r\n          content: parameters.linkTextExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterLinkTextExcerpt) {\r\n        this._spacingAfterLinkTextExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterLinkTextExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      if (parameters.codeDestination !== undefined && parameters.urlDestination !== undefined) {\r\n        throw new Error('Either the codeDestination or the urlDestination may be specified, but not both');\r\n      }\r\n\r\n      this._urlDestination = parameters.urlDestination;\r\n      this._linkText = parameters.linkText;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.LinkTag;\r\n  }\r\n\r\n  /**\r\n   * If the link tag refers to a declaration, this returns the declaration reference object;\r\n   * otherwise this property is undefined.\r\n   * @remarks\r\n   * Either the `codeDestination` or the `urlDestination` property will be defined, but never both.\r\n   */\r\n  public get codeDestination(): DocDeclarationReference | undefined {\r\n    return this._codeDestination;\r\n  }\r\n\r\n  /**\r\n   * If the link tag was an ordinary URI, this returns the URL string;\r\n   * otherwise this property is undefined.\r\n   * @remarks\r\n   * Either the `codeDestination` or the `urlDestination` property will be defined, but never both.\r\n   */\r\n  public get urlDestination(): string | undefined {\r\n    if (this._urlDestination === undefined) {\r\n      if (this._urlDestinationExcerpt !== undefined) {\r\n        this._urlDestination = this._urlDestinationExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._urlDestination;\r\n  }\r\n\r\n  /**\r\n   * An optional text string that is the hyperlink text.  If omitted, the documentation\r\n   * renderer will use a default string based on the link itself (e.g. the URL text\r\n   * or the declaration identifier).\r\n   *\r\n   * @remarks\r\n   *\r\n   * In HTML, the hyperlink can include leading/trailing space characters around the link text.\r\n   * For example, this HTML will cause a web browser to `y` and also the space character before\r\n   * and after it:\r\n   *\r\n   * ```html\r\n   * x<a href=\"#Button\"> y </a> z\r\n   * ```\r\n   *\r\n   * Unlike HTML, TSDoc trims leading/trailing spaces.  For example, this TSDoc will be\r\n   * displayed `xy z` and underline only the `y` character:\r\n   *\r\n   * ```\r\n   * x{@link Button | y } z\r\n   * ```\r\n   */\r\n  public get linkText(): string | undefined {\r\n    if (this._linkText === undefined) {\r\n      if (this._linkTextExcerpt !== undefined) {\r\n        this._linkText = this._linkTextExcerpt.content.toString();\r\n      }\r\n    }\r\n    return this._linkText;\r\n  }\r\n\r\n  /** @override */\r\n  protected getChildNodesForContent(): ReadonlyArray<DocNode | undefined> {\r\n    // abstract\r\n    return [\r\n      this._codeDestination,\r\n      this._urlDestinationExcerpt,\r\n      this._spacingAfterDestinationExcerpt,\r\n      this._pipeExcerpt,\r\n      this._spacingAfterPipeExcerpt,\r\n      this._linkTextExcerpt,\r\n      this._spacingAfterLinkTextExcerpt\r\n    ];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { StringChecks } from '../parser/StringChecks';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberIdentifier}.\r\n */\r\nexport interface IDocMemberIdentifierParameters extends IDocNodeParameters {\r\n  identifier: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberIdentifier}.\r\n */\r\nexport interface IDocMemberIdentifierParsedParameters extends IDocNodeParsedParameters {\r\n  leftQuoteExcerpt?: TokenSequence;\r\n\r\n  identifierExcerpt: TokenSequence;\r\n\r\n  rightQuoteExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * A member identifier is part of a {@link DocMemberReference}.\r\n */\r\nexport class DocMemberIdentifier extends DocNode {\r\n  private readonly _leftQuoteExcerpt: DocExcerpt | undefined;\r\n\r\n  private _identifier: string | undefined;\r\n  private readonly _identifierExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _rightQuoteExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocMemberIdentifierParameters | IDocMemberIdentifierParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      if (parameters.leftQuoteExcerpt) {\r\n        this._leftQuoteExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.MemberIdentifier_LeftQuote,\r\n          content: parameters.leftQuoteExcerpt\r\n        });\r\n      }\r\n\r\n      this._identifierExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.MemberIdentifier_Identifier,\r\n        content: parameters.identifierExcerpt\r\n      });\r\n\r\n      if (parameters.rightQuoteExcerpt) {\r\n        this._rightQuoteExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.MemberIdentifier_RightQuote,\r\n          content: parameters.rightQuoteExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      this._identifier = parameters.identifier;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests whether the input string can be used without quotes as a member identifier in a declaration reference.\r\n   * If not, {@link DocMemberIdentifier.hasQuotes} will be required.\r\n   *\r\n   * @remarks\r\n   * In order to be used without quotes, the string must follow the identifier syntax for ECMAScript / TypeScript,\r\n   * and it must not be one of the reserved words used for system selectors (such as `instance`, `static`,\r\n   * `constructor`, etc).\r\n   */\r\n  public static isValidIdentifier(identifier: string): boolean {\r\n    return !StringChecks.explainIfInvalidUnquotedMemberIdentifier(identifier);\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.MemberIdentifier;\r\n  }\r\n\r\n  /**\r\n   * The identifier string without any quote encoding.\r\n   *\r\n   * @remarks\r\n   * If the value is not a valid ECMAScript identifier, it will be quoted as a\r\n   * string literal during rendering.\r\n   */\r\n  public get identifier(): string {\r\n    if (this._identifier === undefined) {\r\n      this._identifier = this._identifierExcerpt!.content.toString();\r\n    }\r\n    return this._identifier;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the identifier will be rendered as a quoted string literal\r\n   * instead of as a programming language identifier.  This is required if the\r\n   * `identifier` property is not a valid ECMAScript identifier.\r\n   */\r\n  public get hasQuotes(): boolean {\r\n    if (this._identifierExcerpt) {\r\n      return !!this._leftQuoteExcerpt;\r\n    } else {\r\n      return !DocMemberIdentifier.isValidIdentifier(this.identifier);\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._leftQuoteExcerpt, this._identifierExcerpt, this._rightQuoteExcerpt];\r\n  }\r\n}\r\n", "import { DocNode, DocNodeKind, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { DocMemberIdentifier } from './DocMemberIdentifier';\r\nimport { DocMemberSymbol } from './DocMemberSymbol';\r\nimport { DocMemberSelector } from './DocMemberSelector';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberReference}.\r\n */\r\nexport interface IDocMemberReferenceParameters extends IDocNodeParameters {\r\n  hasDot: boolean;\r\n\r\n  memberIdentifier?: DocMemberIdentifier;\r\n  memberSymbol?: DocMemberSymbol;\r\n\r\n  selector?: DocMemberSelector;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberReference}.\r\n */\r\nexport interface IDocMemberReferenceParsedParameters extends IDocNodeParsedParameters {\r\n  dotExcerpt?: TokenSequence;\r\n  spacingAfterDotExcerpt?: TokenSequence;\r\n\r\n  leftParenthesisExcerpt?: TokenSequence;\r\n  spacingAfterLeftParenthesisExcerpt?: TokenSequence;\r\n\r\n  memberIdentifier?: DocMemberIdentifier;\r\n  memberSymbol?: DocMemberSymbol;\r\n\r\n  spacingAfterMemberExcerpt?: TokenSequence;\r\n\r\n  colonExcerpt?: TokenSequence;\r\n  spacingAfterColonExcerpt?: TokenSequence;\r\n\r\n  selector?: DocMemberSelector;\r\n  spacingAfterSelectorExcerpt?: TokenSequence;\r\n\r\n  rightParenthesisExcerpt?: TokenSequence;\r\n  spacingAfterRightParenthesisExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * A {@link DocDeclarationReference | declaration reference} includes a chain of\r\n * member references represented using `DocMemberReference` nodes.\r\n *\r\n * @remarks\r\n * For example, `example-library#ui.controls.Button.(render:static)` is a\r\n * declaration reference that contains three member references:\r\n * `ui`, `.controls`, and `.Button`, and `.(render:static)`.\r\n */\r\nexport class DocMemberReference extends DocNode {\r\n  // The \".\" token if unless this was the member reference in the chain\r\n  private readonly _hasDot: boolean;\r\n  private readonly _dotExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterDotExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _leftParenthesisExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterLeftParenthesisExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _memberIdentifier: DocMemberIdentifier | undefined;\r\n\r\n  private readonly _memberSymbol: DocMemberSymbol | undefined;\r\n\r\n  private readonly _spacingAfterMemberExcerpt: DocExcerpt | undefined;\r\n\r\n  // The \":\" token that separates the identifier and selector parts\r\n  private readonly _colonExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterColonExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _selector: DocMemberSelector | undefined;\r\n  private readonly _spacingAfterSelectorExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _rightParenthesisExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterRightParenthesisExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocMemberReferenceParameters | IDocMemberReferenceParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._hasDot = !!parameters.dotExcerpt;\r\n      if (parameters.dotExcerpt) {\r\n        this._dotExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.MemberReference_Dot,\r\n          content: parameters.dotExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterDotExcerpt) {\r\n        this._spacingAfterDotExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterDotExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.leftParenthesisExcerpt) {\r\n        this._leftParenthesisExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.MemberReference_LeftParenthesis,\r\n          content: parameters.leftParenthesisExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterLeftParenthesisExcerpt) {\r\n        this._spacingAfterLeftParenthesisExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterLeftParenthesisExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.spacingAfterMemberExcerpt) {\r\n        this._spacingAfterMemberExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterMemberExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.colonExcerpt) {\r\n        this._colonExcerpt = new DocExcerpt({\r\n          excerptKind: ExcerptKind.MemberReference_Colon,\r\n          configuration: this.configuration,\r\n          content: parameters.colonExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterColonExcerpt) {\r\n        this._spacingAfterColonExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterColonExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.spacingAfterSelectorExcerpt) {\r\n        this._spacingAfterSelectorExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterSelectorExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.rightParenthesisExcerpt) {\r\n        this._rightParenthesisExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.MemberReference_RightParenthesis,\r\n          content: parameters.rightParenthesisExcerpt\r\n        });\r\n      }\r\n      if (parameters.spacingAfterRightParenthesisExcerpt) {\r\n        this._spacingAfterRightParenthesisExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterRightParenthesisExcerpt\r\n        });\r\n      }\r\n    } else {\r\n      this._hasDot = parameters.hasDot;\r\n    }\r\n\r\n    this._memberIdentifier = parameters.memberIdentifier;\r\n    this._memberSymbol = parameters.memberSymbol;\r\n    this._selector = parameters.selector;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.MemberReference;\r\n  }\r\n\r\n  /**\r\n   * True if this member reference is preceded by a dot (\".\") token.\r\n   * It should be false only for the first member in the chain.\r\n   */\r\n  public get hasDot(): boolean {\r\n    return this._hasDot;\r\n  }\r\n\r\n  /**\r\n   * The identifier for the referenced member.\r\n   * @remarks\r\n   * Either `memberIdentifier` or `memberSymbol` may be specified, but not both.\r\n   */\r\n  public get memberIdentifier(): DocMemberIdentifier | undefined {\r\n    return this._memberIdentifier;\r\n  }\r\n\r\n  /**\r\n   * The ECMAScript 6 symbol expression, which may be used instead of an identifier\r\n   * to indicate the referenced member.\r\n   * @remarks\r\n   * Either `memberIdentifier` or `memberSymbol` may be specified, but not both.\r\n   */\r\n  public get memberSymbol(): DocMemberSymbol | undefined {\r\n    return this._memberSymbol;\r\n  }\r\n\r\n  /**\r\n   * A TSDoc selector, which may be optionally when the identifier or symbol is insufficient\r\n   * to unambiguously determine the referenced declaration.\r\n   */\r\n  public get selector(): DocMemberSelector | undefined {\r\n    return this._selector;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._dotExcerpt,\r\n      this._spacingAfterDotExcerpt,\r\n\r\n      this._leftParenthesisExcerpt,\r\n      this._spacingAfterLeftParenthesisExcerpt,\r\n\r\n      this._memberIdentifier,\r\n      this._memberSymbol,\r\n      this._spacingAfterMemberExcerpt,\r\n\r\n      this._colonExcerpt,\r\n      this._spacingAfterColonExcerpt,\r\n\r\n      this._selector,\r\n      this._spacingAfterSelectorExcerpt,\r\n\r\n      this._rightParenthesisExcerpt,\r\n      this._spacingAfterRightParenthesisExcerpt\r\n    ];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode, IDocNodeParsedParameters, IDocNodeParameters } from './DocNode';\r\nimport { StringChecks } from '../parser/StringChecks';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Kinds of TSDoc selectors.\r\n */\r\nexport enum SelectorKind {\r\n  /**\r\n   * Used in cases where the parser encounters a string that is incorrect but\r\n   * valid enough that a DocMemberSelector node was created.\r\n   */\r\n  Error = 'error',\r\n\r\n  /**\r\n   * System selectors are always all lower-case and belong to a set of predefined label names.\r\n   */\r\n  System = 'system',\r\n\r\n  /**\r\n   * Index selectors are integer numbers.  They provide an alternative way of referencing\r\n   * overloaded functions, based on the order in which the declarations appear in\r\n   * a source file.\r\n   *\r\n   * @remarks\r\n   * Warning:  Index selectors are not recommended; they are intended to provide a temporary\r\n   * workaround for situations where an external library neglected to declare a `{@label}` tag\r\n   * and cannot be easily fixed.\r\n   */\r\n  Index = 'index',\r\n\r\n  /**\r\n   * Label selectors refer to labels created using the `{@label}` TSDoc tag.\r\n   * The labels are always comprised of upper-case letters or numbers separated by underscores,\r\n   * and the first character cannot be a number.\r\n   */\r\n  Label = 'label'\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberSelector}.\r\n */\r\nexport interface IDocMemberSelectorParameters extends IDocNodeParameters {\r\n  selector: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberSelector}.\r\n */\r\nexport interface IDocMemberSelectorParsedParameters extends IDocNodeParsedParameters {\r\n  selectorExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n */\r\nexport class DocMemberSelector extends DocNode {\r\n  private static readonly _likeIndexSelectorRegExp: RegExp = /^[0-9]/;\r\n\r\n  private static readonly _indexSelectorRegExp: RegExp = /^[1-9][0-9]*$/;\r\n\r\n  private static readonly _likeLabelSelectorRegExp: RegExp = /^[A-Z_]/u;\r\n\r\n  private static readonly _labelSelectorRegExp: RegExp = /^[A-Z_][A-Z0-9_]+$/;\r\n\r\n  private static readonly _likeSystemSelectorRegExp: RegExp = /^[a-z]+$/u;\r\n\r\n  private readonly _selector: string;\r\n  private _selectorExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _selectorKind: SelectorKind;\r\n\r\n  private readonly _errorMessage: string | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocMemberSelectorParameters | IDocMemberSelectorParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._selectorExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.MemberSelector,\r\n        content: parameters.selectorExcerpt\r\n      });\r\n\r\n      this._selector = parameters.selectorExcerpt.toString();\r\n    } else {\r\n      this._selector = parameters.selector;\r\n    }\r\n\r\n    this._selectorKind = SelectorKind.Error;\r\n    this._errorMessage = undefined;\r\n\r\n    // The logic below will always either (1) assign selectorKind or (2) else assign an errorMessage\r\n\r\n    if (this._selector.length === 0) {\r\n      this._errorMessage = 'The selector cannot be an empty string';\r\n    } else if (DocMemberSelector._likeIndexSelectorRegExp.test(this._selector)) {\r\n      // It looks like an index selector\r\n\r\n      if (DocMemberSelector._indexSelectorRegExp.test(this._selector)) {\r\n        this._selectorKind = SelectorKind.Index;\r\n      } else {\r\n        this._errorMessage = 'If the selector begins with a number, it must be a positive integer value';\r\n      }\r\n    } else if (DocMemberSelector._likeLabelSelectorRegExp.test(this._selector)) {\r\n      // It looks like a label selector\r\n\r\n      if (DocMemberSelector._labelSelectorRegExp.test(this._selector)) {\r\n        this._selectorKind = SelectorKind.Label;\r\n      } else {\r\n        this._errorMessage =\r\n          'A label selector must be comprised of upper case letters, numbers,' +\r\n          ' and underscores and must not start with a number';\r\n      }\r\n    } else {\r\n      if (StringChecks.isSystemSelector(this._selector)) {\r\n        this._selectorKind = SelectorKind.System;\r\n      } else if (DocMemberSelector._likeSystemSelectorRegExp.test(this._selector)) {\r\n        // It looks like a system selector, but is not\r\n        this._errorMessage =\r\n          `The selector ${JSON.stringify(this._selector)}` +\r\n          ` is not a recognized TSDoc system selector name`;\r\n      } else {\r\n        // It doesn't look like anything we recognize\r\n        this._errorMessage = 'Invalid syntax for selector';\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.MemberSelector;\r\n  }\r\n\r\n  /**\r\n   * The text representation of the selector.\r\n   *\r\n   * @remarks\r\n   * For system selectors, it will be a predefined lower case name.\r\n   * For label selectors, it will be an upper case name defined using the `{@label}` tag.\r\n   * For index selectors, it will be a positive integer.\r\n   */\r\n  public get selector(): string {\r\n    return this._selector;\r\n  }\r\n\r\n  /**\r\n   * Indicates the kind of selector.\r\n   */\r\n  public get selectorKind(): SelectorKind {\r\n    return this._selectorKind;\r\n  }\r\n\r\n  /**\r\n   * If the `selectorKind` is `SelectorKind.Error`, this string will be defined and provide\r\n   * more detail about why the string was not valid.\r\n   */\r\n  public get errorMessage(): string | undefined {\r\n    return this._errorMessage;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._selectorExcerpt];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode, IDocNodeParameters, IDocNodeParsedParameters } from './DocNode';\r\nimport { DocDeclarationReference } from './DocDeclarationReference';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberSymbol}.\r\n */\r\nexport interface IDocMemberSymbolParameters extends IDocNodeParameters {\r\n  symbolReference: DocDeclarationReference;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocMemberSymbol}.\r\n */\r\nexport interface IDocMemberSymbolParsedParameters extends IDocNodeParsedParameters {\r\n  leftBracketExcerpt: TokenSequence;\r\n  spacingAfterLeftBracketExcerpt?: TokenSequence;\r\n\r\n  symbolReference: DocDeclarationReference;\r\n\r\n  rightBracketExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a reference to an ECMAScript 6 symbol that is used\r\n * to identify a member declaration.\r\n *\r\n * @example\r\n *\r\n * In the declaration reference `{@link MyClass.([MySymbols.example]:instance)}`,\r\n * the member symbol `[MySymbols.example]` might be used to reference a property\r\n * of the class.\r\n */\r\nexport class DocMemberSymbol extends DocNode {\r\n  private readonly _leftBracketExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterLeftBracketExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _symbolReference: DocDeclarationReference;\r\n\r\n  private readonly _rightBracketExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocMemberSymbolParameters | IDocMemberSymbolParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._leftBracketExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.DocMemberSymbol_LeftBracket,\r\n        content: parameters.leftBracketExcerpt\r\n      });\r\n\r\n      if (parameters.spacingAfterLeftBracketExcerpt) {\r\n        this._spacingAfterLeftBracketExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterLeftBracketExcerpt\r\n        });\r\n      }\r\n\r\n      this._rightBracketExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.DocMemberSymbol_RightBracket,\r\n        content: parameters.rightBracketExcerpt\r\n      });\r\n    }\r\n\r\n    this._symbolReference = parameters.symbolReference;\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.MemberSymbol;\r\n  }\r\n\r\n  /**\r\n   * The declaration reference for the ECMAScript 6 symbol that will act as\r\n   * the identifier for the member.\r\n   */\r\n  public get symbolReference(): DocDeclarationReference {\r\n    return this._symbolReference;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this._leftBracketExcerpt,\r\n      this._spacingAfterLeftBracketExcerpt,\r\n      this._symbolReference,\r\n      this._rightBracketExcerpt\r\n    ];\r\n  }\r\n}\r\n", "import { DocNodeKind, DocNode } from './DocNode';\r\nimport { DocBlock, IDocBlockParameters, IDocBlockParsedParameters } from './DocBlock';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocParamBlock}.\r\n */\r\nexport interface IDocParamBlockParameters extends IDocBlockParameters {\r\n  parameterName: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocParamBlock}.\r\n */\r\nexport interface IDocParamBlockParsedParameters extends IDocBlockParsedParameters {\r\n  spacingBeforeParameterNameExcerpt?: TokenSequence;\r\n\r\n  unsupportedJsdocTypeBeforeParameterNameExcerpt?: TokenSequence;\r\n  unsupportedJsdocOptionalNameOpenBracketExcerpt?: TokenSequence;\r\n\r\n  parameterNameExcerpt: TokenSequence;\r\n  parameterName: string;\r\n\r\n  unsupportedJsdocOptionalNameRestExcerpt?: TokenSequence;\r\n\r\n  spacingAfterParameterNameExcerpt?: TokenSequence;\r\n\r\n  unsupportedJsdocTypeAfterParameterNameExcerpt?: TokenSequence;\r\n\r\n  hyphenExcerpt?: TokenSequence;\r\n\r\n  spacingAfterHyphenExcerpt?: TokenSequence;\r\n\r\n  unsupportedJsdocTypeAfterHyphenExcerpt?: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a parsed `@param` or `@typeParam` block, which provides a description for a\r\n * function parameter.\r\n */\r\nexport class DocParamBlock extends DocBlock {\r\n  private readonly _spacingBeforeParameterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _unsupportedJsdocTypeBeforeParameterNameExcerpt: DocExcerpt | undefined;\r\n  private readonly _unsupportedJsdocOptionalNameOpenBracketExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _parameterName: string;\r\n  private readonly _parameterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _unsupportedJsdocOptionalNameRestExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _spacingAfterParameterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _unsupportedJsdocTypeAfterParameterNameExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _hyphenExcerpt: DocExcerpt | undefined;\r\n  private readonly _spacingAfterHyphenExcerpt: DocExcerpt | undefined;\r\n\r\n  private readonly _unsupportedJsdocTypeAfterHyphenExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocParamBlockParameters | IDocParamBlockParsedParameters) {\r\n    super(parameters);\r\n\r\n    this._parameterName = parameters.parameterName;\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      if (parameters.spacingBeforeParameterNameExcerpt) {\r\n        this._spacingBeforeParameterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingBeforeParameterNameExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.unsupportedJsdocTypeBeforeParameterNameExcerpt) {\r\n        this._unsupportedJsdocTypeBeforeParameterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.NonstandardText,\r\n          content: parameters.unsupportedJsdocTypeBeforeParameterNameExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.unsupportedJsdocOptionalNameOpenBracketExcerpt) {\r\n        this._unsupportedJsdocOptionalNameOpenBracketExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.NonstandardText,\r\n          content: parameters.unsupportedJsdocOptionalNameOpenBracketExcerpt\r\n        });\r\n      }\r\n\r\n      this._parameterNameExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.ParamBlock_ParameterName,\r\n        content: parameters.parameterNameExcerpt\r\n      });\r\n\r\n      if (parameters.unsupportedJsdocOptionalNameRestExcerpt) {\r\n        this._unsupportedJsdocOptionalNameRestExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.NonstandardText,\r\n          content: parameters.unsupportedJsdocOptionalNameRestExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.spacingAfterParameterNameExcerpt) {\r\n        this._spacingAfterParameterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterParameterNameExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.unsupportedJsdocTypeAfterParameterNameExcerpt) {\r\n        this._unsupportedJsdocTypeAfterParameterNameExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.NonstandardText,\r\n          content: parameters.unsupportedJsdocTypeAfterParameterNameExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.hyphenExcerpt) {\r\n        this._hyphenExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.ParamBlock_Hyphen,\r\n          content: parameters.hyphenExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.spacingAfterHyphenExcerpt) {\r\n        this._spacingAfterHyphenExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.Spacing,\r\n          content: parameters.spacingAfterHyphenExcerpt\r\n        });\r\n      }\r\n\r\n      if (parameters.unsupportedJsdocTypeAfterHyphenExcerpt) {\r\n        this._unsupportedJsdocTypeAfterHyphenExcerpt = new DocExcerpt({\r\n          configuration: this.configuration,\r\n          excerptKind: ExcerptKind.NonstandardText,\r\n          content: parameters.unsupportedJsdocTypeAfterHyphenExcerpt\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.ParamBlock;\r\n  }\r\n\r\n  /**\r\n   * The name of the parameter that is being documented.\r\n   * For example \"width\" in `@param width - the width of the object`.\r\n   */\r\n  public get parameterName(): string {\r\n    return this._parameterName;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [\r\n      this.blockTag,\r\n      this._spacingBeforeParameterNameExcerpt,\r\n      this._unsupportedJsdocTypeBeforeParameterNameExcerpt,\r\n      this._unsupportedJsdocOptionalNameOpenBracketExcerpt,\r\n      this._parameterNameExcerpt,\r\n      this._unsupportedJsdocOptionalNameRestExcerpt,\r\n      this._spacingAfterParameterNameExcerpt,\r\n      this._unsupportedJsdocTypeAfterParameterNameExcerpt,\r\n      this._hyphenExcerpt,\r\n      this._spacingAfterHyphenExcerpt,\r\n      this._unsupportedJsdocTypeAfterHyphenExcerpt,\r\n      this.content\r\n    ];\r\n  }\r\n}\r\n", "import { DocNodeKind, IDocNodeParameters, IDocNodeParsedParameters, DocNode } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocPlainText}.\r\n */\r\nexport interface IDocPlainTextParameters extends IDocNodeParameters {\r\n  text: string;\r\n}\r\n\r\n/**\r\n * Constructor parameters for {@link DocPlainText}.\r\n */\r\nexport interface IDocPlainTextParsedParameters extends IDocNodeParsedParameters {\r\n  textExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Represents a span of comment text that is considered by the parser\r\n * to contain no special symbols or meaning.\r\n *\r\n * @remarks\r\n * The text content must not contain newline characters.\r\n * Use DocSoftBreak to represent manual line splitting.\r\n */\r\nexport class DocPlainText extends DocNode {\r\n  // TODO: We should also prohibit \"\\r\", but this requires updating LineExtractor\r\n  // to interpret a lone \"\\r\" as a newline\r\n  private static readonly _newlineCharacterRegExp: RegExp = /[\\n]/;\r\n\r\n  private _text: string | undefined;\r\n  private readonly _textExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocPlainTextParameters | IDocPlainTextParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._textExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.PlainText,\r\n        content: parameters.textExcerpt\r\n      });\r\n    } else {\r\n      if (DocPlainText._newlineCharacterRegExp.test(parameters.text)) {\r\n        // Use DocSoftBreak to represent manual line splitting\r\n        throw new Error('The DocPlainText content must not contain newline characters');\r\n      }\r\n\r\n      this._text = parameters.text;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.PlainText;\r\n  }\r\n\r\n  /**\r\n   * The text content.\r\n   */\r\n  public get text(): string {\r\n    if (this._text === undefined) {\r\n      this._text = this._textExcerpt!.content.toString();\r\n    }\r\n    return this._text;\r\n  }\r\n\r\n  public get textExcerpt(): TokenSequence | undefined {\r\n    if (this._textExcerpt) {\r\n      return this._textExcerpt.content;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._textExcerpt];\r\n  }\r\n}\r\n", "import { DocNodeKind, IDocNodeParameters, DocNode, IDocNodeParsedParameters } from './DocNode';\r\nimport { TokenSequence } from '../parser/TokenSequence';\r\nimport { DocExcerpt, ExcerptKind } from './DocExcerpt';\r\n\r\n/**\r\n * Constructor parameters for {@link DocSoftBreak}.\r\n */\r\nexport interface IDocSoftBreakParameters extends IDocNodeParameters {}\r\n\r\n/**\r\n * Constructor parameters for {@link DocSoftBreak}.\r\n */\r\nexport interface IDocSoftBreakParsedParameters extends IDocNodeParsedParameters {\r\n  softBreakExcerpt: TokenSequence;\r\n}\r\n\r\n/**\r\n * Instructs a renderer to insert an explicit newline in the output.\r\n * (Normally the renderer uses a formatting rule to determine where\r\n * lines should wrap.)\r\n *\r\n * @remarks\r\n * In HTML, a soft break is represented as an ASCII newline character (which does not\r\n * affect the web browser's view), whereas the hard break is the `<br />` element\r\n * (which starts a new line in the web browser's view).\r\n *\r\n * TSDoc follows the same conventions, except the renderer avoids emitting\r\n * two empty lines (because that could start a new CommonMark paragraph).\r\n */\r\nexport class DocSoftBreak extends DocNode {\r\n  private readonly _softBreakExcerpt: DocExcerpt | undefined;\r\n\r\n  /**\r\n   * Don't call this directly.  Instead use {@link TSDocParser}\r\n   * @internal\r\n   */\r\n  public constructor(parameters: IDocSoftBreakParameters | IDocSoftBreakParsedParameters) {\r\n    super(parameters);\r\n\r\n    if (DocNode.isParsedParameters(parameters)) {\r\n      this._softBreakExcerpt = new DocExcerpt({\r\n        configuration: this.configuration,\r\n        excerptKind: ExcerptKind.SoftBreak,\r\n        content: parameters.softBreakExcerpt\r\n      });\r\n    }\r\n  }\r\n\r\n  /** @override */\r\n  public get kind(): DocNodeKind | string {\r\n    return DocNodeKind.SoftBreak;\r\n  }\r\n\r\n  /** @override */\r\n  protected onGetChildNodes(): ReadonlyArray<DocNode | undefined> {\r\n    return [this._softBreakExcerpt];\r\n  }\r\n}\r\n", "export * from './DocBlock';\r\nexport * from './DocBlockTag';\r\nexport * from './DocCodeSpan';\r\nexport * from './DocComment';\r\nexport * from './DocDeclarationReference';\r\nexport * from './DocErrorText';\r\nexport * from './DocEscapedText';\r\nexport * from './DocExcerpt';\r\nexport * from './DocFencedCode';\r\nexport * from './DocHtmlAttribute';\r\nexport * from './DocHtmlEndTag';\r\nexport * from './DocHtmlStartTag';\r\nexport * from './DocInheritDocTag';\r\nexport * from './DocInlineTag';\r\nexport * from './DocInlineTagBase';\r\nexport * from './DocLinkTag';\r\nexport * from './DocMemberIdentifier';\r\nexport * from './DocMemberReference';\r\nexport * from './DocMemberSelector';\r\nexport * from './DocMemberSymbol';\r\nexport * from './DocNode';\r\nexport * from './DocNodeContainer';\r\nexport * from './DocParagraph';\r\nexport * from './DocParamBlock';\r\nexport * from './DocParamCollection';\r\nexport * from './DocPlainText';\r\nexport * from './DocSection';\r\nexport * from './DocSoftBreak';\r\n", "import {\r\n  DocNode,\r\n  DocNodeKind,\r\n  DocPlainText,\r\n  DocFencedCode,\r\n  DocCodeSpan,\r\n  DocLinkTag,\r\n  DocEscapedText\r\n} from '../nodes';\r\n\r\n/**\r\n * Renders a DocNode tree as plain text, without any rich text formatting or markup.\r\n */\r\nexport class PlainTextEmitter {\r\n  /**\r\n   * Returns true if the specified node contains any text content.\r\n   *\r\n   * @remarks\r\n   * A documentation tool can use this test to report warnings when a developer neglected to write a code comment\r\n   * for a declaration.\r\n   *\r\n   * @param node - this node and all its children will be considered\r\n   * @param requiredCharacters - The test returns true if at least this many non-spacing characters are found.\r\n   * The default value is 1.\r\n   */\r\n  public static hasAnyTextContent(node: DocNode, requiredCharacters?: number): boolean;\r\n\r\n  /**\r\n   * Returns true if the specified collection of nodes contains any text content.\r\n   *\r\n   * @remarks\r\n   * A documentation tool can use this test to report warnings when a developer neglected to write a code comment\r\n   * for a declaration.\r\n   *\r\n   * @param nodes - the collection of nodes to be tested\r\n   * @param requiredCharacters - The test returns true if at least this many non-spacing characters are found.\r\n   * The default value is 1.\r\n   */\r\n  public static hasAnyTextContent(nodes: ReadonlyArray<DocNode>, requiredCharacters?: number): boolean;\r\n  public static hasAnyTextContent(\r\n    nodeOrNodes: DocNode | ReadonlyArray<DocNode>,\r\n    requiredCharacters?: number\r\n  ): boolean {\r\n    if (requiredCharacters === undefined || requiredCharacters < 1) {\r\n      requiredCharacters = 1; // default\r\n    }\r\n\r\n    let nodes: ReadonlyArray<DocNode>;\r\n    if (nodeOrNodes instanceof DocNode) {\r\n      nodes = [nodeOrNodes];\r\n    } else {\r\n      nodes = nodeOrNodes;\r\n    }\r\n\r\n    const foundCharacters: number = PlainTextEmitter._scanTextContent(nodes, requiredCharacters, 0);\r\n\r\n    return foundCharacters >= requiredCharacters;\r\n  }\r\n\r\n  private static _scanTextContent(\r\n    nodes: ReadonlyArray<DocNode>,\r\n    requiredCharacters: number,\r\n    foundCharacters: number\r\n  ): number {\r\n    for (const node of nodes) {\r\n      switch (node.kind) {\r\n        case DocNodeKind.FencedCode:\r\n          const docFencedCode: DocFencedCode = node as DocFencedCode;\r\n          foundCharacters += PlainTextEmitter._countNonSpaceCharacters(docFencedCode.code);\r\n          break;\r\n\r\n        case DocNodeKind.CodeSpan:\r\n          const docCodeSpan: DocCodeSpan = node as DocCodeSpan;\r\n          foundCharacters += PlainTextEmitter._countNonSpaceCharacters(docCodeSpan.code);\r\n          break;\r\n        case DocNodeKind.EscapedText:\r\n          const docEscapedText: DocEscapedText = node as DocEscapedText;\r\n          foundCharacters += PlainTextEmitter._countNonSpaceCharacters(docEscapedText.decodedText);\r\n          break;\r\n\r\n        case DocNodeKind.LinkTag:\r\n          const docLinkTag: DocLinkTag = node as DocLinkTag;\r\n          foundCharacters += PlainTextEmitter._countNonSpaceCharacters(docLinkTag.linkText || '');\r\n          break;\r\n\r\n        case DocNodeKind.PlainText:\r\n          const docPlainText: DocPlainText = node as DocPlainText;\r\n          foundCharacters += PlainTextEmitter._countNonSpaceCharacters(docPlainText.text);\r\n          break;\r\n      }\r\n\r\n      if (foundCharacters >= requiredCharacters) {\r\n        break;\r\n      }\r\n\r\n      foundCharacters += PlainTextEmitter._scanTextContent(\r\n        node.getChildNodes(),\r\n        requiredCharacters,\r\n        foundCharacters\r\n      );\r\n\r\n      if (foundCharacters >= requiredCharacters) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return foundCharacters;\r\n  }\r\n\r\n  private static _countNonSpaceCharacters(s: string): number {\r\n    let count: number = 0;\r\n    const length: number = s.length;\r\n    let i: number = 0;\r\n    while (i < length) {\r\n      switch (s.charCodeAt(i)) {\r\n        case 32: // space\r\n        case 9: // tab\r\n        case 13: // CR\r\n        case 10: // LF\r\n          break;\r\n        default:\r\n          ++count;\r\n      }\r\n      ++i;\r\n    }\r\n    return count;\r\n  }\r\n}\r\n", "/**\r\n * Text coordinates represented as a line number and column number.\r\n *\r\n * @remarks\r\n * The first character in a file is considered to be in column 1 of line 1.\r\n * The location with column 0 and line 0 is used to represent an empty, unspecified,\r\n * or unknown location.\r\n */\r\nexport interface ITextLocation {\r\n  line: number;\r\n  column: number;\r\n}\r\n\r\n/**\r\n * Efficiently references a range of text from a string buffer.\r\n */\r\nexport class TextRange {\r\n  /**\r\n   * Used to represent an empty or unknown range.\r\n   */\r\n  public static readonly empty: TextRange = new TextRange('', 0, 0);\r\n\r\n  /**\r\n   * The starting index into the associated text buffer.\r\n   *\r\n   * @remarks\r\n   * The text range corresponds to the `range.buffer.substring(range.pos, range.end)`.\r\n   */\r\n  public readonly pos: number;\r\n\r\n  /**\r\n   * The (non-inclusive) ending index for the associated text buffer.\r\n   *\r\n   * @remarks\r\n   * The text range corresponds to the `range.buffer.substring(range.pos, range.end)`.\r\n   */\r\n  public readonly end: number;\r\n\r\n  /**\r\n   * The string buffer that the `pos` and `end` indexes refer to.\r\n   */\r\n  public readonly buffer: string;\r\n\r\n  private constructor(buffer: string, pos: number, end: number) {\r\n    this.buffer = buffer;\r\n    this.pos = pos;\r\n    this.end = end;\r\n    this._validateBounds();\r\n  }\r\n\r\n  /**\r\n   * Constructs a TextRange that corresponds to an entire string object.\r\n   */\r\n  public static fromString(buffer: string): TextRange {\r\n    return new TextRange(buffer, 0, buffer.length);\r\n  }\r\n\r\n  /**\r\n   * Constructs a TextRange that corresponds to an entire string object.\r\n   */\r\n  public static fromStringRange(buffer: string, pos: number, end: number): TextRange {\r\n    return new TextRange(buffer, pos, end);\r\n  }\r\n\r\n  /**\r\n   * Returns the length of the text range.\r\n   * @remarks\r\n   * This value is calculated as the `end` property minus the `pos` property.\r\n   */\r\n  public get length(): number {\r\n    return this.end - this.pos;\r\n  }\r\n\r\n  /**\r\n   * Constructs a TextRange that corresponds to a different range of an existing buffer.\r\n   */\r\n  public getNewRange(pos: number, end: number): TextRange {\r\n    return new TextRange(this.buffer, pos, end);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the length of the range is zero.  Note that the object reference may not\r\n   * be equal to `TextRange.empty`, and the buffer may be different.\r\n   */\r\n  public isEmpty(): boolean {\r\n    return this.pos === this.end;\r\n  }\r\n\r\n  /**\r\n   * Returns the range from the associated string buffer.\r\n   */\r\n  public toString(): string {\r\n    return this.buffer.substring(this.pos, this.end);\r\n  }\r\n\r\n  /**\r\n   * Returns a debugging dump of the range, indicated via custom delimiters.\r\n   * @remarks\r\n   * For example if the delimiters are \"[\" and \"]\", and the range is 3..5 inside \"1234567\",\r\n   * then the output would be \"12[345]67\".\r\n   */\r\n  public getDebugDump(posDelimiter: string, endDelimiter: string): string {\r\n    return (\r\n      this.buffer.substring(0, this.pos) +\r\n      posDelimiter +\r\n      this.buffer.substring(this.pos, this.end) +\r\n      endDelimiter +\r\n      this.buffer.substring(this.end)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates the line and column number for the specified offset into the buffer.\r\n   *\r\n   * @remarks\r\n   * This is a potentially expensive operation.\r\n   *\r\n   * @param index - an integer offset\r\n   * @param buffer - the buffer\r\n   */\r\n  public getLocation(index: number): ITextLocation {\r\n    if (index < 0 || index > this.buffer.length) {\r\n      // No match\r\n      return { line: 0, column: 0 };\r\n    }\r\n\r\n    // TODO: Consider caching or optimizing this somehow\r\n    let line: number = 1;\r\n    let column: number = 1;\r\n\r\n    let currentIndex: number = 0;\r\n\r\n    while (currentIndex < index) {\r\n      const current: string = this.buffer[currentIndex];\r\n      ++currentIndex;\r\n\r\n      if (current === '\\r') {\r\n        // CR\r\n        // Ignore '\\r' and assume it will always have an accompanying '\\n'\r\n        continue;\r\n      }\r\n\r\n      if (current === '\\n') {\r\n        // LF\r\n        ++line;\r\n        column = 1;\r\n      } else {\r\n        // NOTE: For consistency with the TypeScript compiler, a tab character is assumed\r\n        // to advance by one column\r\n        ++column;\r\n      }\r\n    }\r\n\r\n    return { line, column };\r\n  }\r\n\r\n  private _validateBounds(): void {\r\n    if (this.pos < 0) {\r\n      throw new Error('TextRange.pos cannot be negative');\r\n    }\r\n    if (this.end < 0) {\r\n      throw new Error('TextRange.end cannot be negative');\r\n    }\r\n    if (this.end < this.pos) {\r\n      throw new Error('TextRange.end cannot be smaller than TextRange.pos');\r\n    }\r\n    if (this.pos > this.buffer.length) {\r\n      throw new Error('TextRange.pos cannot exceed the associated text buffer length');\r\n    }\r\n    if (this.end > this.buffer.length) {\r\n      throw new Error('TextRange.end cannot exceed the associated text buffer length');\r\n    }\r\n  }\r\n}\r\n", "import { TextRange, ITextLocation } from './TextRange';\r\nimport { TokenSequence } from './TokenSequence';\r\nimport { DocNode } from '../nodes/DocNode';\r\nimport { TSDocMessageId } from './TSDocMessageId';\r\n\r\n/**\r\n * Constructor parameters for {@link ParserMessage}.\r\n */\r\nexport interface IParserMessageParameters {\r\n  messageId: TSDocMessageId;\r\n  messageText: string;\r\n  textRange: TextRange;\r\n  tokenSequence?: TokenSequence;\r\n  docNode?: DocNode;\r\n}\r\n\r\n/**\r\n * Represents an error or warning that occurred during parsing.\r\n */\r\nexport class ParserMessage {\r\n  /**\r\n   * A string that uniquely identifies the messages reported by the TSDoc parser.\r\n   */\r\n  public readonly messageId: TSDocMessageId;\r\n\r\n  /**\r\n   * The message text without the default prefix that shows line/column information.\r\n   */\r\n  public readonly unformattedText: string;\r\n\r\n  public readonly textRange: TextRange;\r\n\r\n  public readonly tokenSequence: TokenSequence | undefined;\r\n\r\n  public readonly docNode: DocNode | undefined;\r\n\r\n  private _text: string | undefined;\r\n\r\n  public constructor(parameters: IParserMessageParameters) {\r\n    this.messageId = parameters.messageId;\r\n    this.unformattedText = parameters.messageText;\r\n    this.textRange = parameters.textRange;\r\n    this.tokenSequence = parameters.tokenSequence;\r\n    this.docNode = parameters.docNode;\r\n    this._text = undefined;\r\n  }\r\n\r\n  /**\r\n   * Generates a line/column prefix.  Example with line=2 and column=5\r\n   * and message=\"An error occurred\":\r\n   * ```\r\n   * \"(2,5): An error occurred\"\r\n   * ```\r\n   */\r\n  private static _formatMessageText(message: string, range: TextRange): string {\r\n    if (!message) {\r\n      message = 'An unknown error occurred';\r\n    }\r\n\r\n    if (range.pos !== 0 || range.end !== 0) {\r\n      // NOTE: This currently a potentially expensive operation, since TSDoc currently doesn't\r\n      // have a full newline analysis for the input buffer.\r\n      const location: ITextLocation = range.getLocation(range.pos);\r\n      if (location.line) {\r\n        return `(${location.line},${location.column}): ` + message;\r\n      }\r\n    }\r\n    return message;\r\n  }\r\n\r\n  /**\r\n   * The message text.\r\n   */\r\n  public get text(): string {\r\n    if (this._text === undefined) {\r\n      // NOTE: This currently a potentially expensive operation, since TSDoc currently doesn't\r\n      // have a full newline analysis for the input buffer.\r\n      this._text = ParserMessage._formatMessageText(this.unformattedText, this.textRange);\r\n    }\r\n    return this._text;\r\n  }\r\n\r\n  public toString(): string {\r\n    return this.text;\r\n  }\r\n}\r\n", "import { ParserMessage } from './ParserMessage';\r\nimport { TextRange } from './TextRange';\r\nimport { TokenSequence } from './TokenSequence';\r\nimport { DocNode } from '../nodes/DocNode';\r\nimport { DocErrorText } from '../nodes/DocErrorText';\r\nimport { TSDocMessageId } from './TSDocMessageId';\r\n\r\n/**\r\n * Used to report errors and warnings that occurred during parsing.\r\n */\r\nexport class ParserMessageLog {\r\n  private _messages: ParserMessage[] = [];\r\n\r\n  /**\r\n   * The unfiltered list of all messages.\r\n   */\r\n  public get messages(): ReadonlyArray<ParserMessage> {\r\n    return this._messages;\r\n  }\r\n\r\n  /**\r\n   * Append a message to the log.\r\n   */\r\n  public addMessage(parserMessage: ParserMessage): void {\r\n    this._messages.push(parserMessage);\r\n  }\r\n\r\n  /**\r\n   * Append a message associated with a TextRange.\r\n   */\r\n  public addMessageForTextRange(messageId: TSDocMessageId, messageText: string, textRange: TextRange): void {\r\n    this.addMessage(\r\n      new ParserMessage({\r\n        messageId,\r\n        messageText,\r\n        textRange\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Append a message associated with a TokenSequence.\r\n   */\r\n  public addMessageForTokenSequence(\r\n    messageId: TSDocMessageId,\r\n    messageText: string,\r\n    tokenSequence: TokenSequence,\r\n    docNode?: DocNode\r\n  ): void {\r\n    this.addMessage(\r\n      new ParserMessage({\r\n        messageId,\r\n        messageText,\r\n        textRange: tokenSequence.getContainingTextRange(),\r\n        tokenSequence,\r\n        docNode\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Append a message associated with a TokenSequence.\r\n   */\r\n  public addMessageForDocErrorText(docErrorText: DocErrorText): void {\r\n    let tokenSequence: TokenSequence;\r\n\r\n    if (docErrorText.textExcerpt) {\r\n      // If there is an excerpt directly associated with the DocErrorText, highlight that:\r\n      tokenSequence = docErrorText.textExcerpt;\r\n    } else {\r\n      // Otherwise we can use the errorLocation, but typically that is meant to give additional\r\n      // details, not to indicate the primary location of the problem.\r\n      tokenSequence = docErrorText.errorLocation;\r\n    }\r\n\r\n    this.addMessage(\r\n      new ParserMessage({\r\n        messageId: docErrorText.messageId,\r\n        messageText: docErrorText.errorMessage,\r\n        textRange: tokenSequence.getContainingTextRange(),\r\n        tokenSequence: tokenSequence,\r\n        docNode: docErrorText\r\n      })\r\n    );\r\n  }\r\n}\r\n", "import { TextRange } from './TextRange';\r\nimport { Token } from './Token';\r\nimport { DocComment } from '../nodes';\r\nimport { TSDocConfiguration } from '../configuration/TSDocConfiguration';\r\nimport { ParserMessageLog } from './ParserMessageLog';\r\n\r\n/**\r\n * An internal data structure that tracks all the state being built up by the various\r\n * parser stages.\r\n */\r\nexport class ParserContext {\r\n  /**\r\n   * The configuration that was provided for the TSDocParser.\r\n   */\r\n  public readonly configuration: TSDocConfiguration;\r\n\r\n  /**\r\n   * The `sourceRange` indicates the start and end of the original input that was parsed.\r\n   */\r\n  public readonly sourceRange: TextRange;\r\n\r\n  /**\r\n   * The text range starting from the opening `/**` and ending with\r\n   * the closing `*\\/` delimiter.\r\n   */\r\n  public commentRange: TextRange = TextRange.empty;\r\n\r\n  /**\r\n   * The text ranges corresponding to the lines of content inside the comment.\r\n   */\r\n  public lines: TextRange[] = [];\r\n\r\n  /**\r\n   * A complete list of all tokens that were extracted from the input lines.\r\n   */\r\n  public tokens: Token[] = [];\r\n\r\n  /**\r\n   * The parsed doc comment object.  This is the primary output of the parser.\r\n   */\r\n  public readonly docComment: DocComment;\r\n\r\n  /**\r\n   * A queryable log that reports warnings and error messages that occurred during parsing.\r\n   */\r\n  public readonly log: ParserMessageLog;\r\n\r\n  public constructor(configuration: TSDocConfiguration, sourceRange: TextRange) {\r\n    this.configuration = configuration;\r\n    this.sourceRange = sourceRange;\r\n\r\n    this.docComment = new DocComment({ configuration: this.configuration });\r\n\r\n    this.log = new ParserMessageLog();\r\n  }\r\n}\r\n", "import { ParserContext } from './ParserContext';\r\nimport { Token } from './Token';\r\nimport { TextRange } from './TextRange';\r\n\r\n/**\r\n * Constructor parameters for {@link TokenSequence}\r\n */\r\nexport interface ITokenSequenceParameters {\r\n  parserContext: ParserContext;\r\n  startIndex: number;\r\n  endIndex: number;\r\n}\r\n\r\n/**\r\n * Represents a sequence of tokens extracted from `ParserContext.tokens`.\r\n * This sequence is defined by a starting index and ending index into that array.\r\n */\r\nexport class TokenSequence {\r\n  /**\r\n   * The associated parser context that the tokens come from.\r\n   */\r\n  public readonly parserContext: ParserContext;\r\n\r\n  private _startIndex: number;\r\n  private _endIndex: number;\r\n\r\n  public constructor(parameters: ITokenSequenceParameters) {\r\n    this.parserContext = parameters.parserContext;\r\n    this._startIndex = parameters.startIndex;\r\n    this._endIndex = parameters.endIndex;\r\n    this._validateBounds();\r\n  }\r\n\r\n  /**\r\n   * Constructs a TokenSequence object with no tokens.\r\n   */\r\n  public static createEmpty(parserContext: ParserContext): TokenSequence {\r\n    return new TokenSequence({ parserContext, startIndex: 0, endIndex: 0 });\r\n  }\r\n\r\n  /**\r\n   * The starting index into the associated `ParserContext.tokens` list.\r\n   */\r\n  public get startIndex(): number {\r\n    return this._startIndex;\r\n  }\r\n\r\n  /**\r\n   * The (non-inclusive) ending index into the associated `ParserContext.tokens` list.\r\n   */\r\n  public get endIndex(): number {\r\n    return this._endIndex;\r\n  }\r\n\r\n  public get tokens(): ReadonlyArray<Token> {\r\n    return this.parserContext.tokens.slice(this._startIndex, this._endIndex);\r\n  }\r\n\r\n  /**\r\n   * Constructs a TokenSequence that corresponds to a different range of tokens,\r\n   * e.g. a subrange.\r\n   */\r\n  public getNewSequence(startIndex: number, endIndex: number): TokenSequence {\r\n    return new TokenSequence({\r\n      parserContext: this.parserContext,\r\n      startIndex: startIndex,\r\n      endIndex: endIndex\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a TextRange that includes all tokens in the sequence (including any additional\r\n   * characters between doc comment lines).\r\n   */\r\n  public getContainingTextRange(): TextRange {\r\n    if (this.isEmpty()) {\r\n      return TextRange.empty;\r\n    }\r\n\r\n    return this.parserContext.sourceRange.getNewRange(\r\n      this.parserContext.tokens[this._startIndex].range.pos,\r\n      this.parserContext.tokens[this._endIndex - 1].range.end\r\n    );\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return this._startIndex === this._endIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the concatenated text of all the tokens.\r\n   */\r\n  public toString(): string {\r\n    return this.tokens.map((x) => x.toString()).join('');\r\n  }\r\n\r\n  private _validateBounds(): void {\r\n    if (this.startIndex < 0) {\r\n      throw new Error('TokenSequence.startIndex cannot be negative');\r\n    }\r\n    if (this.endIndex < 0) {\r\n      throw new Error('TokenSequence.endIndex cannot be negative');\r\n    }\r\n    if (this.endIndex < this.startIndex) {\r\n      throw new Error('TokenSequence.endIndex cannot be smaller than TokenSequence.startIndex');\r\n    }\r\n    if (this.startIndex > this.parserContext.tokens.length) {\r\n      throw new Error('TokenSequence.startIndex cannot exceed the associated token array');\r\n    }\r\n    if (this.endIndex > this.parserContext.tokens.length) {\r\n      throw new Error('TokenSequence.endIndex cannot exceed the associated token array');\r\n    }\r\n  }\r\n}\r\n", "import { TextRange } from './TextRange';\r\nimport { ParserContext } from './ParserContext';\r\nimport { TSDocMessageId } from './TSDocMessageId';\r\n\r\n// Internal parser state\r\nenum State {\r\n  // Initial state, looking for \"/*\"\r\n  BeginComment1,\r\n  // Looking for \"*\" or \"* \" after \"/*\"\r\n  BeginComment2,\r\n  // Like State.CollectingLine except immediately after the \"/**\"\r\n  CollectingFirstLine,\r\n  // Collecting characters until we reach a newline\r\n  CollectingLine,\r\n  // After a newline, looking for the \"*\" that begins a new line, or the \"*/\" to end the comment\r\n  AdvancingLine,\r\n  // Exiting the parser loop\r\n  Done\r\n}\r\n\r\n/**\r\n * The main API for parsing TSDoc comments.\r\n */\r\nexport class LineExtractor {\r\n  private static readonly _whitespaceCharacterRegExp: RegExp = /^\\s$/;\r\n\r\n  /**\r\n   * This step parses an entire code comment from slash-star-star until star-slash,\r\n   * and extracts the content lines.  The lines are stored in IDocCommentParameters.lines\r\n   * and the overall text range is assigned to IDocCommentParameters.range.\r\n   */\r\n  public static extract(parserContext: ParserContext): boolean {\r\n    const range: TextRange = parserContext.sourceRange;\r\n    const buffer: string = range.buffer;\r\n\r\n    let commentRangeStart: number = 0;\r\n    let commentRangeEnd: number = 0;\r\n\r\n    // These must be set before entering CollectingFirstLine, CollectingLine, or AdvancingLine\r\n    let collectingLineStart: number = 0;\r\n    let collectingLineEnd: number = 0;\r\n\r\n    let nextIndex: number = range.pos;\r\n    let state: State = State.BeginComment1;\r\n\r\n    const lines: TextRange[] = [];\r\n\r\n    while (state !== State.Done) {\r\n      if (nextIndex >= range.end) {\r\n        // reached the end of the input\r\n        switch (state) {\r\n          case State.BeginComment1:\r\n          case State.BeginComment2:\r\n            parserContext.log.addMessageForTextRange(\r\n              TSDocMessageId.CommentNotFound,\r\n              'Expecting a \"/**\" comment',\r\n              range\r\n            );\r\n            return false;\r\n          default:\r\n            parserContext.log.addMessageForTextRange(\r\n              TSDocMessageId.CommentMissingClosingDelimiter,\r\n              'Unexpected end of input',\r\n              range\r\n            );\r\n            return false;\r\n        }\r\n      }\r\n\r\n      const current: string = buffer[nextIndex];\r\n      const currentIndex: number = nextIndex;\r\n      ++nextIndex;\r\n      const next: string = nextIndex < range.end ? buffer[nextIndex] : '';\r\n\r\n      switch (state) {\r\n        case State.BeginComment1:\r\n          if (current === '/' && next === '*') {\r\n            commentRangeStart = currentIndex;\r\n            ++nextIndex; // skip the star\r\n            state = State.BeginComment2;\r\n          } else if (!LineExtractor._whitespaceCharacterRegExp.test(current)) {\r\n            parserContext.log.addMessageForTextRange(\r\n              TSDocMessageId.CommentOpeningDelimiterSyntax,\r\n              'Expecting a leading \"/**\"',\r\n              range.getNewRange(currentIndex, currentIndex + 1)\r\n            );\r\n            return false;\r\n          }\r\n          break;\r\n        case State.BeginComment2:\r\n          if (current === '*') {\r\n            if (next === ' ') {\r\n              ++nextIndex; // Discard the space after the star\r\n            }\r\n            collectingLineStart = nextIndex;\r\n            collectingLineEnd = nextIndex;\r\n            state = State.CollectingFirstLine;\r\n          } else {\r\n            parserContext.log.addMessageForTextRange(\r\n              TSDocMessageId.CommentOpeningDelimiterSyntax,\r\n              'Expecting a leading \"/**\"',\r\n              range.getNewRange(currentIndex, currentIndex + 1)\r\n            );\r\n            return false;\r\n          }\r\n          break;\r\n        case State.CollectingFirstLine:\r\n        case State.CollectingLine:\r\n          if (current === '\\n') {\r\n            // Ignore an empty line if it is immediately after the \"/**\"\r\n            if (state !== State.CollectingFirstLine || collectingLineEnd > collectingLineStart) {\r\n              // Record the line that we collected\r\n              lines.push(range.getNewRange(collectingLineStart, collectingLineEnd));\r\n            }\r\n            collectingLineStart = nextIndex;\r\n            collectingLineEnd = nextIndex;\r\n            state = State.AdvancingLine;\r\n          } else if (current === '*' && next === '/') {\r\n            if (collectingLineEnd > collectingLineStart) {\r\n              lines.push(range.getNewRange(collectingLineStart, collectingLineEnd));\r\n            }\r\n            collectingLineStart = 0;\r\n            collectingLineEnd = 0;\r\n            ++nextIndex; // skip the slash\r\n            commentRangeEnd = nextIndex;\r\n            state = State.Done;\r\n          } else if (!LineExtractor._whitespaceCharacterRegExp.test(current)) {\r\n            collectingLineEnd = nextIndex;\r\n          }\r\n          break;\r\n        case State.AdvancingLine:\r\n          if (current === '*') {\r\n            if (next === '/') {\r\n              collectingLineStart = 0;\r\n              collectingLineEnd = 0;\r\n\r\n              ++nextIndex; // skip the slash\r\n              commentRangeEnd = nextIndex;\r\n              state = State.Done;\r\n            } else {\r\n              // Discard the \"*\" at the start of a line\r\n\r\n              if (next === ' ') {\r\n                ++nextIndex; // Discard the space after the star\r\n              }\r\n\r\n              collectingLineStart = nextIndex;\r\n              collectingLineEnd = nextIndex;\r\n              state = State.CollectingLine;\r\n            }\r\n          } else if (current === '\\n') {\r\n            // Blank line\r\n            lines.push(range.getNewRange(currentIndex, currentIndex));\r\n            collectingLineStart = nextIndex;\r\n          } else if (!LineExtractor._whitespaceCharacterRegExp.test(current)) {\r\n            // If the star is missing, then start the line here\r\n            // Example: \"/**\\nL1*/\"\r\n\r\n            // (collectingLineStart was the start of this line)\r\n            collectingLineEnd = nextIndex;\r\n            state = State.CollectingLine;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Only fill in these if we successfully scanned a comment\r\n     */\r\n    parserContext.commentRange = range.getNewRange(commentRangeStart, commentRangeEnd);\r\n    parserContext.lines = lines;\r\n    return true;\r\n  }\r\n}\r\n", "import { TextRange } from './TextRange';\r\nimport { Token, TokenKind } from './Token';\r\n\r\nexport class Tokenizer {\r\n  private static readonly _commonMarkPunctuationCharacters: string = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^`{|}~';\r\n  private static readonly _wordCharacters: string =\r\n    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_';\r\n\r\n  private static _charCodeMap: { [charCode: number]: TokenKind | undefined };\r\n  private static _punctuationTokens: { [tokenKind: number]: boolean };\r\n\r\n  /**\r\n   * Given a list of input lines, this returns an array of extracted tokens.\r\n   * The last token will always be TokenKind.EndOfInput.\r\n   */\r\n  public static readTokens(lines: TextRange[]): Token[] {\r\n    Tokenizer._ensureInitialized();\r\n\r\n    const tokens: Token[] = [];\r\n\r\n    let lastLine: TextRange | undefined = undefined;\r\n\r\n    for (const line of lines) {\r\n      Tokenizer._pushTokensForLine(tokens, line);\r\n      lastLine = line;\r\n    }\r\n\r\n    if (lastLine) {\r\n      tokens.push(\r\n        new Token(TokenKind.EndOfInput, lastLine.getNewRange(lastLine.end, lastLine.end), lastLine)\r\n      );\r\n    } else {\r\n      tokens.push(new Token(TokenKind.EndOfInput, TextRange.empty, TextRange.empty));\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is a CommonMark punctuation character.\r\n   * These are basically all the ASCII punctuation characters.\r\n   */\r\n  public static isPunctuation(tokenKind: TokenKind): boolean {\r\n    Tokenizer._ensureInitialized();\r\n    return Tokenizer._punctuationTokens[tokenKind] || false;\r\n  }\r\n\r\n  private static _pushTokensForLine(tokens: Token[], line: TextRange): void {\r\n    const buffer: string = line.buffer;\r\n    const end: number = line.end;\r\n\r\n    let bufferIndex: number = line.pos;\r\n    let tokenKind: TokenKind | undefined = undefined;\r\n    let tokenPos: number = bufferIndex;\r\n\r\n    while (bufferIndex < end) {\r\n      // Read a character and determine its kind\r\n      const charCode: number = buffer.charCodeAt(bufferIndex);\r\n      let characterKind: TokenKind | undefined = Tokenizer._charCodeMap[charCode];\r\n      if (characterKind === undefined) {\r\n        characterKind = TokenKind.Other;\r\n      }\r\n\r\n      // Can we append to an existing token?  Yes if:\r\n      // 1. There is an existing token, AND\r\n      // 2. It is the same kind of token, AND\r\n      // 3. It's not punctuation (which is always one character)\r\n      if (\r\n        tokenKind !== undefined &&\r\n        characterKind === tokenKind &&\r\n        Tokenizer._isMultiCharacterToken(tokenKind)\r\n      ) {\r\n        // yes, append\r\n      } else {\r\n        // Is there a previous completed token to push?\r\n        if (tokenKind !== undefined) {\r\n          tokens.push(new Token(tokenKind, line.getNewRange(tokenPos, bufferIndex), line));\r\n        }\r\n\r\n        tokenPos = bufferIndex;\r\n        tokenKind = characterKind;\r\n      }\r\n\r\n      ++bufferIndex;\r\n    }\r\n\r\n    // Is there a previous completed token to push?\r\n    if (tokenKind !== undefined) {\r\n      tokens.push(new Token(tokenKind, line.getNewRange(tokenPos, bufferIndex), line));\r\n    }\r\n\r\n    tokens.push(new Token(TokenKind.Newline, line.getNewRange(line.end, line.end), line));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token can be comprised of multiple characters\r\n   */\r\n  private static _isMultiCharacterToken(kind: TokenKind): boolean {\r\n    switch (kind) {\r\n      case TokenKind.Spacing:\r\n      case TokenKind.AsciiWord:\r\n      case TokenKind.Other:\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private static _ensureInitialized(): void {\r\n    if (Tokenizer._charCodeMap) {\r\n      return;\r\n    }\r\n\r\n    Tokenizer._charCodeMap = {};\r\n    Tokenizer._punctuationTokens = {};\r\n\r\n    // All Markdown punctuation characters\r\n    const punctuation: string = Tokenizer._commonMarkPunctuationCharacters;\r\n    for (let i: number = 0; i < punctuation.length; ++i) {\r\n      const charCode: number = punctuation.charCodeAt(i);\r\n      Tokenizer._charCodeMap[charCode] = TokenKind.OtherPunctuation;\r\n    }\r\n\r\n    // Special symbols\r\n\r\n    // !\"#$%&\\'()*+,\\-.\\/:;<=>?@[\\\\]^_`{|}~\r\n    const specialMap: { [character: string]: TokenKind } = {\r\n      '\\\\': TokenKind.Backslash,\r\n      '<': TokenKind.LessThan,\r\n      '>': TokenKind.GreaterThan,\r\n      '=': TokenKind.Equals,\r\n      \"'\": TokenKind.SingleQuote,\r\n      '\"': TokenKind.DoubleQuote,\r\n      '/': TokenKind.Slash,\r\n      '-': TokenKind.Hyphen,\r\n      '@': TokenKind.AtSign,\r\n      '{': TokenKind.LeftCurlyBracket,\r\n      '}': TokenKind.RightCurlyBracket,\r\n      '`': TokenKind.Backtick,\r\n      '.': TokenKind.Period,\r\n      ':': TokenKind.Colon,\r\n      ',': TokenKind.Comma,\r\n      '[': TokenKind.LeftSquareBracket,\r\n      ']': TokenKind.RightSquareBracket,\r\n      '|': TokenKind.Pipe,\r\n      '(': TokenKind.LeftParenthesis,\r\n      ')': TokenKind.RightParenthesis,\r\n      '#': TokenKind.PoundSymbol,\r\n      '+': TokenKind.Plus,\r\n      $: TokenKind.DollarSign\r\n    };\r\n    for (const key of Object.getOwnPropertyNames(specialMap)) {\r\n      Tokenizer._charCodeMap[key.charCodeAt(0)] = specialMap[key];\r\n      Tokenizer._punctuationTokens[specialMap[key]] = true;\r\n    }\r\n\r\n    Tokenizer._punctuationTokens[TokenKind.OtherPunctuation] = true;\r\n\r\n    const word: string = Tokenizer._wordCharacters;\r\n    for (let i: number = 0; i < word.length; ++i) {\r\n      const charCode: number = word.charCodeAt(i);\r\n      Tokenizer._charCodeMap[charCode] = TokenKind.AsciiWord;\r\n    }\r\n    Tokenizer._charCodeMap[' '.charCodeAt(0)] = TokenKind.Spacing;\r\n    Tokenizer._charCodeMap['\\t'.charCodeAt(0)] = TokenKind.Spacing;\r\n  }\r\n}\r\n", "import { Token, TokenKind } from './Token';\r\nimport { TokenSequence } from './TokenSequence';\r\nimport { ParserContext } from './ParserContext';\r\n\r\n/**\r\n * Manages a stream of tokens that are read by the parser.\r\n *\r\n * @remarks\r\n * Use TokenReader.readToken() to read a token and advance the stream pointer.\r\n * Use TokenReader.peekToken() to preview the next token.\r\n * Use TokenReader.createMarker() and backtrackToMarker() to rewind to an earlier point.\r\n * Whenever readToken() is called, the token is added to an accumulated TokenSequence\r\n * that can be extracted by calling extractAccumulatedSequence().\r\n */\r\nexport class TokenReader {\r\n  public readonly tokens: ReadonlyArray<Token>;\r\n\r\n  private readonly _parserContext: ParserContext;\r\n\r\n  // The subrange of tokens to be processed by the TokenReader.  By default this is\r\n  // start=0 and end=tokens.length, unless an embeddedTokenSequence is specified.\r\n  private _readerStartIndex: number;\r\n  private _readerEndIndex: number;\r\n\r\n  // The index of the next token to be read\r\n  private _currentIndex: number;\r\n\r\n  // The start of the range to be returned by extractAccumulatedSequence()\r\n  private _accumulatedStartIndex: number;\r\n\r\n  public constructor(parserContext: ParserContext, embeddedTokenSequence?: TokenSequence) {\r\n    this._parserContext = parserContext;\r\n    this.tokens = parserContext.tokens;\r\n\r\n    if (embeddedTokenSequence) {\r\n      if (embeddedTokenSequence.parserContext !== this._parserContext) {\r\n        throw new Error('The embeddedTokenSequence must use the same parser context');\r\n      }\r\n      this._readerStartIndex = embeddedTokenSequence.startIndex;\r\n      this._readerEndIndex = embeddedTokenSequence.endIndex;\r\n    } else {\r\n      this._readerStartIndex = 0;\r\n      this._readerEndIndex = this.tokens.length;\r\n    }\r\n\r\n    this._currentIndex = this._readerStartIndex;\r\n    this._accumulatedStartIndex = this._readerStartIndex;\r\n  }\r\n\r\n  /**\r\n   * Extracts and returns the TokenSequence that was accumulated so far by calls to readToken().\r\n   * The next call to readToken() will start a new accumulated sequence.\r\n   */\r\n  public extractAccumulatedSequence(): TokenSequence {\r\n    if (this._accumulatedStartIndex === this._currentIndex) {\r\n      // If this happens, it indicates a parser bug:\r\n      throw new Error(\r\n        'Parser assertion failed: The queue should not be empty when' +\r\n          ' extractAccumulatedSequence() is called'\r\n      );\r\n    }\r\n\r\n    const sequence: TokenSequence = new TokenSequence({\r\n      parserContext: this._parserContext,\r\n      startIndex: this._accumulatedStartIndex,\r\n      endIndex: this._currentIndex\r\n    });\r\n\r\n    this._accumulatedStartIndex = this._currentIndex;\r\n\r\n    return sequence;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the accumulated sequence has any tokens yet.  This will be false\r\n   * when the TokenReader starts, and it will be false immediately after a call\r\n   * to extractAccumulatedSequence().  Otherwise, it will become true whenever readToken()\r\n   * is called.\r\n   */\r\n  public isAccumulatedSequenceEmpty(): boolean {\r\n    return this._accumulatedStartIndex === this._currentIndex;\r\n  }\r\n\r\n  /**\r\n   * Like extractAccumulatedSequence(), but returns undefined if nothing has been\r\n   * accumulated yet.\r\n   */\r\n  public tryExtractAccumulatedSequence(): TokenSequence | undefined {\r\n    if (this.isAccumulatedSequenceEmpty()) {\r\n      return undefined;\r\n    }\r\n    return this.extractAccumulatedSequence();\r\n  }\r\n\r\n  /**\r\n   * Asserts that isAccumulatedSequenceEmpty() should return false.  If not, an exception\r\n   * is throw indicating a parser bug.\r\n   */\r\n  public assertAccumulatedSequenceIsEmpty(): void {\r\n    if (!this.isAccumulatedSequenceEmpty()) {\r\n      // If this happens, it indicates a parser bug:\r\n      const sequence: TokenSequence = new TokenSequence({\r\n        parserContext: this._parserContext,\r\n        startIndex: this._accumulatedStartIndex,\r\n        endIndex: this._currentIndex\r\n      });\r\n      const tokenStrings: string[] = sequence.tokens.map((x) => x.toString());\r\n      throw new Error(\r\n        'Parser assertion failed: The queue should be empty, but it contains:\\n' +\r\n          JSON.stringify(tokenStrings)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the next token that would be returned by _readToken(), without\r\n   * consuming anything.\r\n   */\r\n  public peekToken(): Token {\r\n    return this.tokens[this._currentIndex];\r\n  }\r\n\r\n  /**\r\n   * Returns the TokenKind for the next token that would be returned by _readToken(), without\r\n   * consuming anything.\r\n   */\r\n  public peekTokenKind(): TokenKind {\r\n    if (this._currentIndex >= this._readerEndIndex) {\r\n      return TokenKind.EndOfInput;\r\n    }\r\n    return this.tokens[this._currentIndex].kind;\r\n  }\r\n\r\n  /**\r\n   * Like peekTokenKind(), but looks ahead two tokens.\r\n   */\r\n  public peekTokenAfterKind(): TokenKind {\r\n    if (this._currentIndex + 1 >= this._readerEndIndex) {\r\n      return TokenKind.EndOfInput;\r\n    }\r\n    return this.tokens[this._currentIndex + 1].kind;\r\n  }\r\n\r\n  /**\r\n   * Like peekTokenKind(), but looks ahead three tokens.\r\n   */\r\n  public peekTokenAfterAfterKind(): TokenKind {\r\n    if (this._currentIndex + 2 >= this._readerEndIndex) {\r\n      return TokenKind.EndOfInput;\r\n    }\r\n    return this.tokens[this._currentIndex + 2].kind;\r\n  }\r\n\r\n  /**\r\n   * Extract the next token from the input stream and return it.\r\n   * The token will also be appended to the accumulated sequence, which can\r\n   * later be accessed via extractAccumulatedSequence().\r\n   */\r\n  public readToken(): Token {\r\n    if (this._currentIndex >= this._readerEndIndex) {\r\n      // If this happens, it's a parser bug\r\n      throw new Error('Cannot read past end of stream');\r\n    }\r\n    const token: Token = this.tokens[this._currentIndex];\r\n    if (token.kind === TokenKind.EndOfInput) {\r\n      // We don't allow reading the EndOfInput token, because we want _peekToken()\r\n      // to be always guaranteed to return a valid result.\r\n\r\n      // If this happens, it's a parser bug\r\n      throw new Error('The EndOfInput token cannot be read');\r\n    }\r\n    this._currentIndex++;\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * Returns the kind of the token immediately before the current token.\r\n   */\r\n  public peekPreviousTokenKind(): TokenKind {\r\n    if (this._currentIndex === 0) {\r\n      return TokenKind.EndOfInput;\r\n    }\r\n    return this.tokens[this._currentIndex - 1].kind;\r\n  }\r\n\r\n  /**\r\n   * Remembers the current position in the stream.\r\n   */\r\n  public createMarker(): number {\r\n    return this._currentIndex;\r\n  }\r\n\r\n  /**\r\n   * Rewinds the stream pointer to a previous position in the stream.\r\n   */\r\n  public backtrackToMarker(marker: number): void {\r\n    if (marker > this._currentIndex) {\r\n      // If this happens, it's a parser bug\r\n      throw new Error('The marker has expired');\r\n    }\r\n\r\n    this._currentIndex = marker;\r\n    if (marker < this._accumulatedStartIndex) {\r\n      this._accumulatedStartIndex = marker;\r\n    }\r\n  }\r\n}\r\n", "/* eslint-disable max-lines */\r\n\r\nimport { ParserContext } from './ParserContext';\r\nimport { Token, TokenKind } from './Token';\r\nimport { Tokenizer } from './Tokenizer';\r\nimport {\r\n  DocBlockTag,\r\n  DocCodeSpan,\r\n  DocErrorText,\r\n  DocEscapedText,\r\n  DocHtmlAttribute,\r\n  DocHtmlEndTag,\r\n  DocHtmlStartTag,\r\n  DocInlineTag,\r\n  DocNode,\r\n  DocPlainText,\r\n  DocSoftBreak,\r\n  EscapeStyle,\r\n  DocComment,\r\n  DocBlock,\r\n  DocNodeKind,\r\n  DocSection,\r\n  DocParamBlock,\r\n  DocFencedCode,\r\n  DocLinkTag,\r\n  IDocLinkTagParameters,\r\n  DocMemberReference,\r\n  DocDeclarationReference,\r\n  DocMemberSymbol,\r\n  DocMemberIdentifier,\r\n  DocMemberSelector,\r\n  DocInheritDocTag,\r\n  IDocInheritDocTagParameters,\r\n  IDocInlineTagParsedParameters,\r\n  DocInlineTagBase,\r\n  IDocLinkTagParsedParameters,\r\n  IDocMemberReferenceParsedParameters\r\n} from '../nodes';\r\nimport { TokenSequence } from './TokenSequence';\r\nimport { TokenReader } from './TokenReader';\r\nimport { StringChecks } from './StringChecks';\r\nimport { ModifierTagSet } from '../details/ModifierTagSet';\r\nimport { TSDocConfiguration } from '../configuration/TSDocConfiguration';\r\nimport { TSDocTagDefinition, TSDocTagSyntaxKind } from '../configuration/TSDocTagDefinition';\r\nimport { StandardTags } from '../details/StandardTags';\r\nimport { PlainTextEmitter } from '../emitters/PlainTextEmitter';\r\nimport { TSDocMessageId } from './TSDocMessageId';\r\n\r\ninterface IFailure {\r\n  // (We use \"failureMessage\" instead of \"errorMessage\" here so that DocErrorText doesn't\r\n  // accidentally implement this interface.)\r\n  failureMessageId: TSDocMessageId;\r\n  failureMessage: string;\r\n  failureLocation: TokenSequence;\r\n}\r\n\r\ntype ResultOrFailure<T> = T | IFailure;\r\n\r\nfunction isFailure<T>(resultOrFailure: ResultOrFailure<T>): resultOrFailure is IFailure {\r\n  return resultOrFailure !== undefined && Object.hasOwnProperty.call(resultOrFailure, 'failureMessage');\r\n}\r\n\r\n/**\r\n * The main parser for TSDoc comments.\r\n */\r\nexport class NodeParser {\r\n  private readonly _parserContext: ParserContext;\r\n  private readonly _configuration: TSDocConfiguration;\r\n  private _currentSection: DocSection;\r\n\r\n  public constructor(parserContext: ParserContext) {\r\n    this._parserContext = parserContext;\r\n    this._configuration = parserContext.configuration;\r\n\r\n    this._currentSection = parserContext.docComment.summarySection;\r\n  }\r\n\r\n  public parse(): void {\r\n    const tokenReader: TokenReader = new TokenReader(this._parserContext);\r\n\r\n    let done: boolean = false;\r\n    while (!done) {\r\n      // Extract the next token\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.EndOfInput:\r\n          done = true;\r\n          break;\r\n        case TokenKind.Newline:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n          tokenReader.readToken();\r\n          this._pushNode(\r\n            new DocSoftBreak({\r\n              parsed: true,\r\n              configuration: this._configuration,\r\n              softBreakExcerpt: tokenReader.extractAccumulatedSequence()\r\n            })\r\n          );\r\n          break;\r\n        case TokenKind.Backslash:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n          this._pushNode(this._parseBackslashEscape(tokenReader));\r\n          break;\r\n        case TokenKind.AtSign:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n          this._parseAndPushBlock(tokenReader);\r\n          break;\r\n        case TokenKind.LeftCurlyBracket: {\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n\r\n          const marker: number = tokenReader.createMarker();\r\n          const docNode: DocNode = this._parseInlineTag(tokenReader);\r\n          const docComment: DocComment = this._parserContext.docComment;\r\n\r\n          if (docNode instanceof DocInheritDocTag) {\r\n            // The @inheritDoc tag is irregular because it looks like an inline tag, but\r\n            // it actually represents the entire comment body\r\n            const tagEndMarker: number = tokenReader.createMarker() - 1;\r\n            if (docComment.inheritDocTag === undefined) {\r\n              this._parserContext.docComment.inheritDocTag = docNode;\r\n            } else {\r\n              this._pushNode(\r\n                this._backtrackAndCreateErrorRange(\r\n                  tokenReader,\r\n                  marker,\r\n                  tagEndMarker,\r\n                  TSDocMessageId.ExtraInheritDocTag,\r\n                  'A doc comment cannot have more than one @inheritDoc tag'\r\n                )\r\n              );\r\n            }\r\n          } else {\r\n            this._pushNode(docNode);\r\n          }\r\n          break;\r\n        }\r\n        case TokenKind.RightCurlyBracket:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n          this._pushNode(\r\n            this._createError(\r\n              tokenReader,\r\n              TSDocMessageId.EscapeRightBrace,\r\n              'The \"}\" character should be escaped using a backslash to avoid confusion with a TSDoc inline tag'\r\n            )\r\n          );\r\n          break;\r\n        case TokenKind.LessThan:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n          // Look ahead two tokens to see if this is \"<a>\" or \"</a>\".\r\n          if (tokenReader.peekTokenAfterKind() === TokenKind.Slash) {\r\n            this._pushNode(this._parseHtmlEndTag(tokenReader));\r\n          } else {\r\n            this._pushNode(this._parseHtmlStartTag(tokenReader));\r\n          }\r\n          break;\r\n        case TokenKind.GreaterThan:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n          this._pushNode(\r\n            this._createError(\r\n              tokenReader,\r\n              TSDocMessageId.EscapeGreaterThan,\r\n              'The \">\" character should be escaped using a backslash to avoid confusion with an HTML tag'\r\n            )\r\n          );\r\n          break;\r\n        case TokenKind.Backtick:\r\n          this._pushAccumulatedPlainText(tokenReader);\r\n\r\n          if (\r\n            tokenReader.peekTokenAfterKind() === TokenKind.Backtick &&\r\n            tokenReader.peekTokenAfterAfterKind() === TokenKind.Backtick\r\n          ) {\r\n            this._pushNode(this._parseFencedCode(tokenReader));\r\n          } else {\r\n            this._pushNode(this._parseCodeSpan(tokenReader));\r\n          }\r\n          break;\r\n        default:\r\n          // If nobody recognized this token, then accumulate plain text\r\n          tokenReader.readToken();\r\n          break;\r\n      }\r\n    }\r\n    this._pushAccumulatedPlainText(tokenReader);\r\n    this._performValidationChecks();\r\n  }\r\n\r\n  private _performValidationChecks(): void {\r\n    const docComment: DocComment = this._parserContext.docComment;\r\n    if (docComment.deprecatedBlock) {\r\n      if (!PlainTextEmitter.hasAnyTextContent(docComment.deprecatedBlock)) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.MissingDeprecationMessage,\r\n          `The ${docComment.deprecatedBlock.blockTag.tagName} block must include a deprecation message,` +\r\n            ` e.g. describing the recommended alternative`,\r\n          docComment.deprecatedBlock.blockTag.getTokenSequence(),\r\n          docComment.deprecatedBlock\r\n        );\r\n      }\r\n    }\r\n\r\n    if (docComment.inheritDocTag) {\r\n      if (docComment.remarksBlock) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.InheritDocIncompatibleTag,\r\n          `A \"${docComment.remarksBlock.blockTag.tagName}\" block must not be used, because that` +\r\n            ` content is provided by the @inheritDoc tag`,\r\n          docComment.remarksBlock.blockTag.getTokenSequence(),\r\n          docComment.remarksBlock.blockTag\r\n        );\r\n      }\r\n      if (PlainTextEmitter.hasAnyTextContent(docComment.summarySection)) {\r\n        this._parserContext.log.addMessageForTextRange(\r\n          TSDocMessageId.InheritDocIncompatibleSummary,\r\n          'The summary section must not have any content, because that' +\r\n            ' content is provided by the @inheritDoc tag',\r\n          this._parserContext.commentRange\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _validateTagDefinition(\r\n    tagDefinition: TSDocTagDefinition | undefined,\r\n    tagName: string,\r\n    expectingInlineTag: boolean,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): void {\r\n    if (tagDefinition) {\r\n      const isInlineTag: boolean = tagDefinition.syntaxKind === TSDocTagSyntaxKind.InlineTag;\r\n\r\n      if (isInlineTag !== expectingInlineTag) {\r\n        // The tag is defined, but it is used incorrectly\r\n        if (expectingInlineTag) {\r\n          this._parserContext.log.addMessageForTokenSequence(\r\n            TSDocMessageId.TagShouldNotHaveBraces,\r\n            `The TSDoc tag \"${tagName}\" is not an inline tag; it must not be enclosed in \"{ }\" braces`,\r\n            tokenSequenceForErrorContext,\r\n            nodeForErrorContext\r\n          );\r\n        } else {\r\n          this._parserContext.log.addMessageForTokenSequence(\r\n            TSDocMessageId.InlineTagMissingBraces,\r\n            `The TSDoc tag \"${tagName}\" is an inline tag; it must be enclosed in \"{ }\" braces`,\r\n            tokenSequenceForErrorContext,\r\n            nodeForErrorContext\r\n          );\r\n        }\r\n      } else {\r\n        if (this._parserContext.configuration.validation.reportUnsupportedTags) {\r\n          if (!this._parserContext.configuration.isTagSupported(tagDefinition)) {\r\n            // The tag is defined, but not supported\r\n            this._parserContext.log.addMessageForTokenSequence(\r\n              TSDocMessageId.UnsupportedTag,\r\n              `The TSDoc tag \"${tagName}\" is not supported by this tool`,\r\n              tokenSequenceForErrorContext,\r\n              nodeForErrorContext\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // The tag is not defined\r\n      if (!this._parserContext.configuration.validation.ignoreUndefinedTags) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.UndefinedTag,\r\n          `The TSDoc tag \"${tagName}\" is not defined in this configuration`,\r\n          tokenSequenceForErrorContext,\r\n          nodeForErrorContext\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private _pushAccumulatedPlainText(tokenReader: TokenReader): void {\r\n    if (!tokenReader.isAccumulatedSequenceEmpty()) {\r\n      this._pushNode(\r\n        new DocPlainText({\r\n          parsed: true,\r\n          configuration: this._configuration,\r\n          textExcerpt: tokenReader.extractAccumulatedSequence()\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  private _parseAndPushBlock(tokenReader: TokenReader): void {\r\n    const docComment: DocComment = this._parserContext.docComment;\r\n    const configuration: TSDocConfiguration = this._parserContext.configuration;\r\n    const modifierTagSet: ModifierTagSet = docComment.modifierTagSet;\r\n\r\n    const parsedBlockTag: DocNode = this._parseBlockTag(tokenReader);\r\n    if (parsedBlockTag.kind !== DocNodeKind.BlockTag) {\r\n      this._pushNode(parsedBlockTag);\r\n      return;\r\n    }\r\n\r\n    const docBlockTag: DocBlockTag = parsedBlockTag as DocBlockTag;\r\n\r\n    // Do we have a definition for this tag?\r\n    const tagDefinition: TSDocTagDefinition | undefined = configuration.tryGetTagDefinitionWithUpperCase(\r\n      docBlockTag.tagNameWithUpperCase\r\n    );\r\n    this._validateTagDefinition(\r\n      tagDefinition,\r\n      docBlockTag.tagName,\r\n      /* expectingInlineTag */ false,\r\n      docBlockTag.getTokenSequence(),\r\n      docBlockTag\r\n    );\r\n\r\n    if (tagDefinition) {\r\n      switch (tagDefinition.syntaxKind) {\r\n        case TSDocTagSyntaxKind.BlockTag:\r\n          if (docBlockTag.tagNameWithUpperCase === StandardTags.param.tagNameWithUpperCase) {\r\n            const docParamBlock: DocParamBlock = this._parseParamBlock(\r\n              tokenReader,\r\n              docBlockTag,\r\n              StandardTags.param.tagName\r\n            );\r\n\r\n            this._parserContext.docComment.params.add(docParamBlock);\r\n\r\n            this._currentSection = docParamBlock.content;\r\n            return;\r\n          } else if (docBlockTag.tagNameWithUpperCase === StandardTags.typeParam.tagNameWithUpperCase) {\r\n            const docParamBlock: DocParamBlock = this._parseParamBlock(\r\n              tokenReader,\r\n              docBlockTag,\r\n              StandardTags.typeParam.tagName\r\n            );\r\n\r\n            this._parserContext.docComment.typeParams.add(docParamBlock);\r\n\r\n            this._currentSection = docParamBlock.content;\r\n            return;\r\n          } else {\r\n            const newBlock: DocBlock = new DocBlock({\r\n              configuration: this._configuration,\r\n              blockTag: docBlockTag\r\n            });\r\n\r\n            this._addBlockToDocComment(newBlock);\r\n\r\n            this._currentSection = newBlock.content;\r\n          }\r\n\r\n          return;\r\n        case TSDocTagSyntaxKind.ModifierTag:\r\n          // The block tag was recognized as a modifier, so add it to the modifier tag set\r\n          // and do NOT call currentSection.appendNode(parsedNode)\r\n          modifierTagSet.addTag(docBlockTag);\r\n          return;\r\n      }\r\n    }\r\n\r\n    this._pushNode(docBlockTag);\r\n  }\r\n\r\n  private _addBlockToDocComment(block: DocBlock): void {\r\n    const docComment: DocComment = this._parserContext.docComment;\r\n\r\n    switch (block.blockTag.tagNameWithUpperCase) {\r\n      case StandardTags.remarks.tagNameWithUpperCase:\r\n        docComment.remarksBlock = block;\r\n        break;\r\n      case StandardTags.privateRemarks.tagNameWithUpperCase:\r\n        docComment.privateRemarks = block;\r\n        break;\r\n      case StandardTags.deprecated.tagNameWithUpperCase:\r\n        docComment.deprecatedBlock = block;\r\n        break;\r\n      case StandardTags.returns.tagNameWithUpperCase:\r\n        docComment.returnsBlock = block;\r\n        break;\r\n      case StandardTags.see.tagNameWithUpperCase:\r\n        docComment._appendSeeBlock(block);\r\n        break;\r\n      default:\r\n        docComment.appendCustomBlock(block);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used by `_parseParamBlock()`, this parses a JSDoc expression remainder like `string}` or `=\"]\"]` from\r\n   * an input like `@param {string} [x=\"]\"] - the X value`.  It detects nested balanced pairs of delimiters\r\n   * and escaped string literals.\r\n   */\r\n  private _tryParseJSDocTypeOrValueRest(\r\n    tokenReader: TokenReader,\r\n    openKind: TokenKind,\r\n    closeKind: TokenKind,\r\n    startMarker: number\r\n  ): TokenSequence | undefined {\r\n    let quoteKind: TokenKind | undefined;\r\n    let openCount: number = 1;\r\n    while (openCount > 0) {\r\n      let tokenKind: TokenKind = tokenReader.peekTokenKind();\r\n      switch (tokenKind) {\r\n        case openKind:\r\n          // ignore open bracket/brace inside of a quoted string\r\n          if (quoteKind === undefined) openCount++;\r\n          break;\r\n        case closeKind:\r\n          // ignore close bracket/brace inside of a quoted string\r\n          if (quoteKind === undefined) openCount--;\r\n          break;\r\n        case TokenKind.Backslash:\r\n          // ignore backslash outside of quoted string\r\n          if (quoteKind !== undefined) {\r\n            // skip the backslash and the next character.\r\n            tokenReader.readToken();\r\n            tokenKind = tokenReader.peekTokenKind();\r\n          }\r\n          break;\r\n        case TokenKind.DoubleQuote:\r\n        case TokenKind.SingleQuote:\r\n        case TokenKind.Backtick:\r\n          if (quoteKind === tokenKind) {\r\n            // exit quoted string if quote character matches.\r\n            quoteKind = undefined;\r\n          } else if (quoteKind === undefined) {\r\n            // start quoted string if not in a quoted string.\r\n            quoteKind = tokenKind;\r\n          }\r\n          break;\r\n      }\r\n      // give up at end of input and backtrack to start.\r\n      if (tokenKind === TokenKind.EndOfInput) {\r\n        tokenReader.backtrackToMarker(startMarker);\r\n        return undefined;\r\n      }\r\n      tokenReader.readToken();\r\n    }\r\n    return tokenReader.tryExtractAccumulatedSequence();\r\n  }\r\n\r\n  /**\r\n   * Used by `_parseParamBlock()`, this parses a JSDoc expression like `{string}` from\r\n   * an input like `@param {string} x - the X value`.\r\n   */\r\n  private _tryParseUnsupportedJSDocType(\r\n    tokenReader: TokenReader,\r\n    docBlockTag: DocBlockTag,\r\n    tagName: string\r\n  ): TokenSequence | undefined {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n\r\n    // do not parse `{@...` as a JSDoc type\r\n    if (\r\n      tokenReader.peekTokenKind() !== TokenKind.LeftCurlyBracket ||\r\n      tokenReader.peekTokenAfterKind() === TokenKind.AtSign\r\n    ) {\r\n      return undefined;\r\n    }\r\n\r\n    const startMarker: number = tokenReader.createMarker();\r\n    tokenReader.readToken(); // read the \"{\"\r\n\r\n    let jsdocTypeExcerpt: TokenSequence | undefined = this._tryParseJSDocTypeOrValueRest(\r\n      tokenReader,\r\n      TokenKind.LeftCurlyBracket,\r\n      TokenKind.RightCurlyBracket,\r\n      startMarker\r\n    );\r\n\r\n    if (jsdocTypeExcerpt) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ParamTagWithInvalidType,\r\n        'The ' + tagName + \" block should not include a JSDoc-style '{type}'\",\r\n        jsdocTypeExcerpt,\r\n        docBlockTag\r\n      );\r\n\r\n      const spacingAfterJsdocTypeExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(\r\n        tokenReader\r\n      );\r\n      if (spacingAfterJsdocTypeExcerpt) {\r\n        jsdocTypeExcerpt = jsdocTypeExcerpt.getNewSequence(\r\n          jsdocTypeExcerpt.startIndex,\r\n          spacingAfterJsdocTypeExcerpt.endIndex\r\n        );\r\n      }\r\n    }\r\n    return jsdocTypeExcerpt;\r\n  }\r\n\r\n  /**\r\n   * Used by `_parseParamBlock()`, this parses a JSDoc expression remainder like `=[]]` from\r\n   * an input like `@param {string} [x=[]] - the X value`.\r\n   */\r\n  private _tryParseJSDocOptionalNameRest(tokenReader: TokenReader): TokenSequence | undefined {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    if (tokenReader.peekTokenKind() !== TokenKind.EndOfInput) {\r\n      const startMarker: number = tokenReader.createMarker();\r\n      return this._tryParseJSDocTypeOrValueRest(\r\n        tokenReader,\r\n        TokenKind.LeftSquareBracket,\r\n        TokenKind.RightSquareBracket,\r\n        startMarker\r\n      );\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private _parseParamBlock(\r\n    tokenReader: TokenReader,\r\n    docBlockTag: DocBlockTag,\r\n    tagName: string\r\n  ): DocParamBlock {\r\n    const startMarker: number = tokenReader.createMarker();\r\n\r\n    const spacingBeforeParameterNameExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(\r\n      tokenReader\r\n    );\r\n\r\n    // Skip past a JSDoc type (i.e., '@param {type} paramName') if found, and report a warning.\r\n    const unsupportedJsdocTypeBeforeParameterNameExcerpt:\r\n      | TokenSequence\r\n      | undefined = this._tryParseUnsupportedJSDocType(tokenReader, docBlockTag, tagName);\r\n\r\n    // Parse opening of invalid JSDoc optional parameter name (e.g., '[')\r\n    let unsupportedJsdocOptionalNameOpenBracketExcerpt: TokenSequence | undefined;\r\n    if (tokenReader.peekTokenKind() === TokenKind.LeftSquareBracket) {\r\n      tokenReader.readToken(); // read the \"[\"\r\n      unsupportedJsdocOptionalNameOpenBracketExcerpt = tokenReader.extractAccumulatedSequence();\r\n    }\r\n\r\n    let parameterName: string = '';\r\n\r\n    let done: boolean = false;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.AsciiWord:\r\n        case TokenKind.Period:\r\n        case TokenKind.DollarSign:\r\n          parameterName += tokenReader.readToken();\r\n          break;\r\n        default:\r\n          done = true;\r\n          break;\r\n      }\r\n    }\r\n\r\n    const explanation: string | undefined = StringChecks.explainIfInvalidUnquotedIdentifier(parameterName);\r\n\r\n    if (explanation !== undefined) {\r\n      tokenReader.backtrackToMarker(startMarker);\r\n\r\n      const errorParamBlock: DocParamBlock = new DocParamBlock({\r\n        configuration: this._configuration,\r\n        blockTag: docBlockTag,\r\n        parameterName: ''\r\n      });\r\n      const errorMessage: string =\r\n        parameterName.length > 0\r\n          ? 'The ' + tagName + ' block should be followed by a valid parameter name: ' + explanation\r\n          : 'The ' + tagName + ' block should be followed by a parameter name';\r\n\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ParamTagWithInvalidName,\r\n        errorMessage,\r\n        docBlockTag.getTokenSequence(),\r\n        docBlockTag\r\n      );\r\n      return errorParamBlock;\r\n    }\r\n\r\n    const parameterNameExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // Parse closing of invalid JSDoc optional parameter name (e.g., ']', '=default]').\r\n    let unsupportedJsdocOptionalNameRestExcerpt: TokenSequence | undefined;\r\n    if (unsupportedJsdocOptionalNameOpenBracketExcerpt) {\r\n      unsupportedJsdocOptionalNameRestExcerpt = this._tryParseJSDocOptionalNameRest(tokenReader);\r\n\r\n      let errorSequence: TokenSequence | undefined = unsupportedJsdocOptionalNameOpenBracketExcerpt;\r\n      if (unsupportedJsdocOptionalNameRestExcerpt) {\r\n        errorSequence = docBlockTag\r\n          .getTokenSequence()\r\n          .getNewSequence(\r\n            unsupportedJsdocOptionalNameOpenBracketExcerpt.startIndex,\r\n            unsupportedJsdocOptionalNameRestExcerpt.endIndex\r\n          );\r\n      }\r\n\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ParamTagWithInvalidOptionalName,\r\n        'The ' +\r\n          tagName +\r\n          \" should not include a JSDoc-style optional name; it must not be enclosed in '[ ]' brackets.\",\r\n        errorSequence,\r\n        docBlockTag\r\n      );\r\n    }\r\n\r\n    const spacingAfterParameterNameExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(\r\n      tokenReader\r\n    );\r\n\r\n    // Skip past a trailing JSDoc type (i.e., '@param paramName {type}') if found, and report a warning.\r\n    const unsupportedJsdocTypeAfterParameterNameExcerpt:\r\n      | TokenSequence\r\n      | undefined = this._tryParseUnsupportedJSDocType(tokenReader, docBlockTag, tagName);\r\n\r\n    // TODO: Warn if there is no space before or after the hyphen\r\n    let hyphenExcerpt: TokenSequence | undefined;\r\n    let spacingAfterHyphenExcerpt: TokenSequence | undefined;\r\n    let unsupportedJsdocTypeAfterHyphenExcerpt: TokenSequence | undefined;\r\n    if (tokenReader.peekTokenKind() === TokenKind.Hyphen) {\r\n      tokenReader.readToken();\r\n      hyphenExcerpt = tokenReader.extractAccumulatedSequence();\r\n      // TODO: Only read one space\r\n      spacingAfterHyphenExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n      // Skip past a JSDoc type (i.e., '@param paramName - {type}') if found, and report a warning.\r\n      unsupportedJsdocTypeAfterHyphenExcerpt = this._tryParseUnsupportedJSDocType(\r\n        tokenReader,\r\n        docBlockTag,\r\n        tagName\r\n      );\r\n    } else {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ParamTagMissingHyphen,\r\n        'The ' + tagName + ' block should be followed by a parameter name and then a hyphen',\r\n        docBlockTag.getTokenSequence(),\r\n        docBlockTag\r\n      );\r\n    }\r\n\r\n    return new DocParamBlock({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      blockTag: docBlockTag,\r\n\r\n      spacingBeforeParameterNameExcerpt,\r\n\r\n      unsupportedJsdocTypeBeforeParameterNameExcerpt,\r\n      unsupportedJsdocOptionalNameOpenBracketExcerpt,\r\n\r\n      parameterNameExcerpt,\r\n      parameterName,\r\n\r\n      unsupportedJsdocOptionalNameRestExcerpt,\r\n\r\n      spacingAfterParameterNameExcerpt,\r\n\r\n      unsupportedJsdocTypeAfterParameterNameExcerpt,\r\n\r\n      hyphenExcerpt,\r\n\r\n      spacingAfterHyphenExcerpt,\r\n\r\n      unsupportedJsdocTypeAfterHyphenExcerpt\r\n    });\r\n  }\r\n\r\n  private _pushNode(docNode: DocNode): void {\r\n    if (this._configuration.docNodeManager.isAllowedChild(DocNodeKind.Paragraph, docNode.kind)) {\r\n      this._currentSection.appendNodeInParagraph(docNode);\r\n    } else {\r\n      this._currentSection.appendNode(docNode);\r\n    }\r\n  }\r\n\r\n  private _parseBackslashEscape(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    tokenReader.readToken(); // read the backslash\r\n\r\n    if (tokenReader.peekTokenKind() === TokenKind.EndOfInput) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.UnnecessaryBackslash,\r\n        'A backslash must precede another character that is being escaped'\r\n      );\r\n    }\r\n\r\n    const escapedToken: Token = tokenReader.readToken(); // read the escaped character\r\n\r\n    // In CommonMark, a backslash is only allowed before a punctuation\r\n    // character.  In all other contexts, the backslash is interpreted as a\r\n    // literal character.\r\n    if (!Tokenizer.isPunctuation(escapedToken.kind)) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.UnnecessaryBackslash,\r\n        'A backslash can only be used to escape a punctuation character'\r\n      );\r\n    }\r\n\r\n    const encodedTextExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    return new DocEscapedText({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      escapeStyle: EscapeStyle.CommonMarkBackslash,\r\n      encodedTextExcerpt,\r\n      decodedText: escapedToken.toString()\r\n    });\r\n  }\r\n\r\n  private _parseBlockTag(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    if (tokenReader.peekTokenKind() !== TokenKind.AtSign) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.MissingTag,\r\n        'Expecting a TSDoc tag starting with \"@\"'\r\n      );\r\n    }\r\n\r\n    // \"@one\" is a valid TSDoc tag at the start of a line, but \"@one@two\" is\r\n    // a syntax error.  For two tags it should be \"@one @two\", or for literal text it\r\n    // should be \"\\@one\\@two\".\r\n    switch (tokenReader.peekPreviousTokenKind()) {\r\n      case TokenKind.EndOfInput:\r\n      case TokenKind.Spacing:\r\n      case TokenKind.Newline:\r\n        break;\r\n      default:\r\n        return this._backtrackAndCreateError(\r\n          tokenReader,\r\n          marker,\r\n          TSDocMessageId.AtSignInWord,\r\n          'The \"@\" character looks like part of a TSDoc tag; use a backslash to escape it'\r\n        );\r\n    }\r\n\r\n    // Include the \"@\" as part of the tagName\r\n    let tagName: string = tokenReader.readToken().toString();\r\n\r\n    if (tokenReader.peekTokenKind() !== TokenKind.AsciiWord) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.AtSignWithoutTagName,\r\n        'Expecting a TSDoc tag name after \"@\"; if it is not a tag, use a backslash to escape this character'\r\n      );\r\n    }\r\n\r\n    const tagNameMarker: number = tokenReader.createMarker();\r\n\r\n    while (tokenReader.peekTokenKind() === TokenKind.AsciiWord) {\r\n      tagName += tokenReader.readToken().toString();\r\n    }\r\n\r\n    switch (tokenReader.peekTokenKind()) {\r\n      case TokenKind.Spacing:\r\n      case TokenKind.Newline:\r\n      case TokenKind.EndOfInput:\r\n        break;\r\n      default:\r\n        const badCharacter: string = tokenReader.peekToken().range.toString()[0];\r\n        return this._backtrackAndCreateError(\r\n          tokenReader,\r\n          marker,\r\n          TSDocMessageId.CharactersAfterBlockTag,\r\n          `The token \"${tagName}\" looks like a TSDoc tag but contains an invalid character` +\r\n            ` ${JSON.stringify(badCharacter)}; if it is not a tag, use a backslash to escape the \"@\"`\r\n        );\r\n    }\r\n\r\n    if (StringChecks.explainIfInvalidTSDocTagName(tagName)) {\r\n      const failure: IFailure = this._createFailureForTokensSince(\r\n        tokenReader,\r\n        TSDocMessageId.MalformedTagName,\r\n        'A TSDoc tag name must start with a letter and contain only letters and numbers',\r\n        tagNameMarker\r\n      );\r\n      return this._backtrackAndCreateErrorForFailure(tokenReader, marker, '', failure);\r\n    }\r\n\r\n    return new DocBlockTag({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      tagName,\r\n      tagNameExcerpt: tokenReader.extractAccumulatedSequence()\r\n    });\r\n  }\r\n\r\n  private _parseInlineTag(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    if (tokenReader.peekTokenKind() !== TokenKind.LeftCurlyBracket) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.MissingTag,\r\n        'Expecting a TSDoc tag starting with \"{\"'\r\n      );\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    const openingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // For inline tags, if we handle errors by backtracking to the \"{\"  token, then the main loop\r\n    // will then interpret the \"@\" as a block tag, which is almost certainly incorrect.  So the\r\n    // DocErrorText needs to include both the \"{\" and \"@\" tokens.\r\n    // We will use _backtrackAndCreateErrorRangeForFailure() for that.\r\n    const atSignMarker: number = tokenReader.createMarker();\r\n\r\n    if (tokenReader.peekTokenKind() !== TokenKind.AtSign) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.MalformedInlineTag,\r\n        'Expecting a TSDoc tag starting with \"{@\"'\r\n      );\r\n    }\r\n\r\n    // Include the \"@\" as part of the tagName\r\n    let tagName: string = tokenReader.readToken().toString();\r\n\r\n    while (tokenReader.peekTokenKind() === TokenKind.AsciiWord) {\r\n      tagName += tokenReader.readToken().toString();\r\n    }\r\n\r\n    if (tagName === '@') {\r\n      // This is an unusual case\r\n      const failure: IFailure = this._createFailureForTokensSince(\r\n        tokenReader,\r\n        TSDocMessageId.MalformedInlineTag,\r\n        'Expecting a TSDoc inline tag name after the \"{@\" characters',\r\n        atSignMarker\r\n      );\r\n      return this._backtrackAndCreateErrorRangeForFailure(tokenReader, marker, atSignMarker, '', failure);\r\n    }\r\n\r\n    if (StringChecks.explainIfInvalidTSDocTagName(tagName)) {\r\n      const failure: IFailure = this._createFailureForTokensSince(\r\n        tokenReader,\r\n        TSDocMessageId.MalformedTagName,\r\n        'A TSDoc tag name must start with a letter and contain only letters and numbers',\r\n        atSignMarker\r\n      );\r\n      return this._backtrackAndCreateErrorRangeForFailure(tokenReader, marker, atSignMarker, '', failure);\r\n    }\r\n\r\n    const tagNameExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const spacingAfterTagNameExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(\r\n      tokenReader\r\n    );\r\n\r\n    if (spacingAfterTagNameExcerpt === undefined) {\r\n      // If there were no spaces at all, that's an error unless it's the degenerate \"{@tag}\" case\r\n      if (tokenReader.peekTokenKind() !== TokenKind.RightCurlyBracket) {\r\n        const badCharacter: string = tokenReader.peekToken().range.toString()[0];\r\n        const failure: IFailure = this._createFailureForToken(\r\n          tokenReader,\r\n          TSDocMessageId.CharactersAfterInlineTag,\r\n          `The character ${JSON.stringify(\r\n            badCharacter\r\n          )} cannot appear after the TSDoc tag name; expecting a space`\r\n        );\r\n        return this._backtrackAndCreateErrorRangeForFailure(tokenReader, marker, atSignMarker, '', failure);\r\n      }\r\n    }\r\n\r\n    let done: boolean = false;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.EndOfInput:\r\n          return this._backtrackAndCreateErrorRange(\r\n            tokenReader,\r\n            marker,\r\n            atSignMarker,\r\n            TSDocMessageId.InlineTagMissingRightBrace,\r\n            'The TSDoc inline tag name is missing its closing \"}\"'\r\n          );\r\n        case TokenKind.Backslash:\r\n          // http://usejsdoc.org/about-block-inline-tags.html\r\n          // \"If your tag's text includes a closing curly brace (}), you must escape it with\r\n          // a leading backslash (\\).\"\r\n          tokenReader.readToken(); // discard the backslash\r\n\r\n          // In CommonMark, a backslash is only allowed before a punctuation\r\n          // character.  In all other contexts, the backslash is interpreted as a\r\n          // literal character.\r\n          if (!Tokenizer.isPunctuation(tokenReader.peekTokenKind())) {\r\n            const failure: IFailure = this._createFailureForToken(\r\n              tokenReader,\r\n              TSDocMessageId.UnnecessaryBackslash,\r\n              'A backslash can only be used to escape a punctuation character'\r\n            );\r\n            return this._backtrackAndCreateErrorRangeForFailure(\r\n              tokenReader,\r\n              marker,\r\n              atSignMarker,\r\n              'Error reading inline TSDoc tag: ',\r\n              failure\r\n            );\r\n          }\r\n\r\n          tokenReader.readToken();\r\n          break;\r\n        case TokenKind.LeftCurlyBracket: {\r\n          const failure: IFailure = this._createFailureForToken(\r\n            tokenReader,\r\n            TSDocMessageId.InlineTagUnescapedBrace,\r\n            'The \"{\" character must be escaped with a backslash when used inside a TSDoc inline tag'\r\n          );\r\n          return this._backtrackAndCreateErrorRangeForFailure(tokenReader, marker, atSignMarker, '', failure);\r\n        }\r\n        case TokenKind.RightCurlyBracket:\r\n          done = true;\r\n          break;\r\n        default:\r\n          tokenReader.readToken();\r\n          break;\r\n      }\r\n    }\r\n\r\n    const tagContentExcerpt: TokenSequence | undefined = tokenReader.tryExtractAccumulatedSequence();\r\n\r\n    // Read the right curly bracket\r\n    tokenReader.readToken();\r\n    const closingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const docInlineTagParsedParameters: IDocInlineTagParsedParameters = {\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      openingDelimiterExcerpt,\r\n\r\n      tagNameExcerpt,\r\n      tagName,\r\n      spacingAfterTagNameExcerpt,\r\n\r\n      tagContentExcerpt,\r\n\r\n      closingDelimiterExcerpt\r\n    };\r\n\r\n    const tagNameWithUpperCase: string = tagName.toUpperCase();\r\n\r\n    // Create a new TokenReader that will reparse the tokens corresponding to the tagContent.\r\n    const embeddedTokenReader: TokenReader = new TokenReader(\r\n      this._parserContext,\r\n      tagContentExcerpt ? tagContentExcerpt : TokenSequence.createEmpty(this._parserContext)\r\n    );\r\n\r\n    let docNode: DocNode;\r\n    switch (tagNameWithUpperCase) {\r\n      case StandardTags.inheritDoc.tagNameWithUpperCase:\r\n        docNode = this._parseInheritDocTag(docInlineTagParsedParameters, embeddedTokenReader);\r\n        break;\r\n      case StandardTags.link.tagNameWithUpperCase:\r\n        docNode = this._parseLinkTag(docInlineTagParsedParameters, embeddedTokenReader);\r\n        break;\r\n      default:\r\n        docNode = new DocInlineTag(docInlineTagParsedParameters);\r\n    }\r\n\r\n    // Validate the tag\r\n    const tagDefinition:\r\n      | TSDocTagDefinition\r\n      | undefined = this._parserContext.configuration.tryGetTagDefinitionWithUpperCase(tagNameWithUpperCase);\r\n\r\n    this._validateTagDefinition(\r\n      tagDefinition,\r\n      tagName,\r\n      /* expectingInlineTag */ true,\r\n      tagNameExcerpt,\r\n      docNode\r\n    );\r\n\r\n    return docNode;\r\n  }\r\n\r\n  private _parseInheritDocTag(\r\n    docInlineTagParsedParameters: IDocInlineTagParsedParameters,\r\n    embeddedTokenReader: TokenReader\r\n  ): DocInlineTagBase {\r\n    // If an error occurs, then return a generic DocInlineTag instead of DocInheritDocTag\r\n    const errorTag: DocInlineTag = new DocInlineTag(docInlineTagParsedParameters);\r\n\r\n    const parameters: IDocInheritDocTagParameters = {\r\n      ...docInlineTagParsedParameters\r\n    };\r\n\r\n    if (embeddedTokenReader.peekTokenKind() !== TokenKind.EndOfInput) {\r\n      parameters.declarationReference = this._parseDeclarationReference(\r\n        embeddedTokenReader,\r\n        docInlineTagParsedParameters.tagNameExcerpt,\r\n        errorTag\r\n      );\r\n      if (!parameters.declarationReference) {\r\n        return errorTag;\r\n      }\r\n\r\n      if (embeddedTokenReader.peekTokenKind() !== TokenKind.EndOfInput) {\r\n        embeddedTokenReader.readToken();\r\n\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.InheritDocTagSyntax,\r\n          'Unexpected character after declaration reference',\r\n          embeddedTokenReader.extractAccumulatedSequence(),\r\n          errorTag\r\n        );\r\n        return errorTag;\r\n      }\r\n    }\r\n\r\n    return new DocInheritDocTag(parameters);\r\n  }\r\n\r\n  private _parseLinkTag(\r\n    docInlineTagParsedParameters: IDocInlineTagParsedParameters,\r\n    embeddedTokenReader: TokenReader\r\n  ): DocInlineTagBase {\r\n    // If an error occurs, then return a generic DocInlineTag instead of DocInheritDocTag\r\n    const errorTag: DocInlineTag = new DocInlineTag(docInlineTagParsedParameters);\r\n\r\n    const parameters: IDocLinkTagParsedParameters = {\r\n      ...docInlineTagParsedParameters\r\n    };\r\n\r\n    if (!docInlineTagParsedParameters.tagContentExcerpt) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.LinkTagEmpty,\r\n        'The @link tag content is missing',\r\n        parameters.tagNameExcerpt,\r\n        errorTag\r\n      );\r\n\r\n      return errorTag;\r\n    }\r\n\r\n    // Is the link destination a URL or a declaration reference?\r\n    //\r\n    // The JSDoc \"@link\" tag allows URLs, however supporting full URLs would be highly\r\n    // ambiguous, for example \"microsoft.windows.camera:\" is an actual valid URI scheme,\r\n    // and even the common \"mailto:example.com\" looks suspiciously like a declaration reference.\r\n    // In practice JSDoc URLs are nearly always HTTP or HTTPS, so it seems fairly reasonable to\r\n    // require the URL to have \"://\" and a scheme without any punctuation in it.  If a more exotic\r\n    // URL is needed, the HTML \"<a>\" tag can always be used.\r\n\r\n    // We start with a fairly broad classifier heuristic, and then the parsers will refine this:\r\n    // 1. Does it start with \"//\"?\r\n    // 2. Does it contain \"://\"?\r\n\r\n    let looksLikeUrl: boolean =\r\n      embeddedTokenReader.peekTokenKind() === TokenKind.Slash &&\r\n      embeddedTokenReader.peekTokenAfterKind() === TokenKind.Slash;\r\n    const marker: number = embeddedTokenReader.createMarker();\r\n\r\n    let done: boolean = looksLikeUrl;\r\n    while (!done) {\r\n      switch (embeddedTokenReader.peekTokenKind()) {\r\n        // An URI scheme can contain letters, numbers, minus, plus, and periods\r\n        case TokenKind.AsciiWord:\r\n        case TokenKind.Period:\r\n        case TokenKind.Hyphen:\r\n        case TokenKind.Plus:\r\n          embeddedTokenReader.readToken();\r\n          break;\r\n        case TokenKind.Colon:\r\n          embeddedTokenReader.readToken();\r\n          // Once we a reach a colon, then it's a URL only if we see \"://\"\r\n          looksLikeUrl =\r\n            embeddedTokenReader.peekTokenKind() === TokenKind.Slash &&\r\n            embeddedTokenReader.peekTokenAfterKind() === TokenKind.Slash;\r\n          done = true;\r\n          break;\r\n        default:\r\n          done = true;\r\n      }\r\n    }\r\n\r\n    embeddedTokenReader.backtrackToMarker(marker);\r\n\r\n    // Is the hyperlink a URL or a declaration reference?\r\n    if (looksLikeUrl) {\r\n      // It starts with something like \"http://\", so parse it as a URL\r\n      if (\r\n        !this._parseLinkTagUrlDestination(\r\n          embeddedTokenReader,\r\n          parameters,\r\n          docInlineTagParsedParameters.tagNameExcerpt,\r\n          errorTag\r\n        )\r\n      ) {\r\n        return errorTag;\r\n      }\r\n    } else {\r\n      // Otherwise, assume it's a declaration reference\r\n      if (\r\n        !this._parseLinkTagCodeDestination(\r\n          embeddedTokenReader,\r\n          parameters,\r\n          docInlineTagParsedParameters.tagNameExcerpt,\r\n          errorTag\r\n        )\r\n      ) {\r\n        return errorTag;\r\n      }\r\n    }\r\n\r\n    if (embeddedTokenReader.peekTokenKind() === TokenKind.Spacing) {\r\n      // The above parser rules should have consumed any spacing before the pipe\r\n      throw new Error('Unconsumed spacing encountered after construct');\r\n    }\r\n\r\n    if (embeddedTokenReader.peekTokenKind() === TokenKind.Pipe) {\r\n      // Read the link text\r\n      embeddedTokenReader.readToken();\r\n      parameters.pipeExcerpt = embeddedTokenReader.extractAccumulatedSequence();\r\n      parameters.spacingAfterPipeExcerpt = this._tryReadSpacingAndNewlines(embeddedTokenReader);\r\n\r\n      // Read everything until the end\r\n      // NOTE: Because we're using an embedded TokenReader, the TokenKind.EndOfInput occurs\r\n      // when we reach the \"}\", not the end of the original input\r\n      done = false;\r\n      let spacingAfterLinkTextMarker: number | undefined = undefined;\r\n      while (!done) {\r\n        switch (embeddedTokenReader.peekTokenKind()) {\r\n          case TokenKind.EndOfInput:\r\n            done = true;\r\n            break;\r\n          case TokenKind.Pipe:\r\n          case TokenKind.LeftCurlyBracket:\r\n            const badCharacter: string = embeddedTokenReader.readToken().toString();\r\n            this._parserContext.log.addMessageForTokenSequence(\r\n              TSDocMessageId.LinkTagUnescapedText,\r\n              `The \"${badCharacter}\" character may not be used in the link text without escaping it`,\r\n              embeddedTokenReader.extractAccumulatedSequence(),\r\n              errorTag\r\n            );\r\n            return errorTag;\r\n          case TokenKind.Spacing:\r\n          case TokenKind.Newline:\r\n            embeddedTokenReader.readToken();\r\n            break;\r\n          default:\r\n            // We found a non-spacing character, so move the spacingAfterLinkTextMarker\r\n            spacingAfterLinkTextMarker = embeddedTokenReader.createMarker() + 1;\r\n            embeddedTokenReader.readToken();\r\n        }\r\n      }\r\n\r\n      const linkTextAndSpacing:\r\n        | TokenSequence\r\n        | undefined = embeddedTokenReader.tryExtractAccumulatedSequence();\r\n      if (linkTextAndSpacing) {\r\n        if (spacingAfterLinkTextMarker === undefined) {\r\n          // We never found any non-spacing characters, so everything is trailing spacing\r\n          parameters.spacingAfterLinkTextExcerpt = linkTextAndSpacing;\r\n        } else if (spacingAfterLinkTextMarker >= linkTextAndSpacing.endIndex) {\r\n          // We found no trailing spacing, so everything we found is the text\r\n          parameters.linkTextExcerpt = linkTextAndSpacing;\r\n        } else {\r\n          // Split the trailing spacing from the link text\r\n          parameters.linkTextExcerpt = linkTextAndSpacing.getNewSequence(\r\n            linkTextAndSpacing.startIndex,\r\n            spacingAfterLinkTextMarker\r\n          );\r\n          parameters.spacingAfterLinkTextExcerpt = linkTextAndSpacing.getNewSequence(\r\n            spacingAfterLinkTextMarker,\r\n            linkTextAndSpacing.endIndex\r\n          );\r\n        }\r\n      }\r\n    } else if (embeddedTokenReader.peekTokenKind() !== TokenKind.EndOfInput) {\r\n      embeddedTokenReader.readToken();\r\n\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.LinkTagDestinationSyntax,\r\n        'Unexpected character after link destination',\r\n        embeddedTokenReader.extractAccumulatedSequence(),\r\n        errorTag\r\n      );\r\n      return errorTag;\r\n    }\r\n\r\n    return new DocLinkTag(parameters);\r\n  }\r\n\r\n  private _parseLinkTagUrlDestination(\r\n    embeddedTokenReader: TokenReader,\r\n    parameters: IDocLinkTagParsedParameters,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): boolean {\r\n    // Simply accumulate everything up to the next space. We won't try to implement a proper\r\n    // URI parser here.\r\n    let urlDestination: string = '';\r\n\r\n    let done: boolean = false;\r\n    while (!done) {\r\n      switch (embeddedTokenReader.peekTokenKind()) {\r\n        case TokenKind.Spacing:\r\n        case TokenKind.Newline:\r\n        case TokenKind.EndOfInput:\r\n        case TokenKind.Pipe:\r\n        case TokenKind.RightCurlyBracket:\r\n          done = true;\r\n          break;\r\n        default:\r\n          urlDestination += embeddedTokenReader.readToken();\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (urlDestination.length === 0) {\r\n      // This should be impossible since the caller ensures that peekTokenKind() === TokenKind.AsciiWord\r\n      throw new Error('Missing URL in _parseLinkTagUrlDestination()');\r\n    }\r\n\r\n    const urlDestinationExcerpt: TokenSequence = embeddedTokenReader.extractAccumulatedSequence();\r\n\r\n    const invalidUrlExplanation: string | undefined = StringChecks.explainIfInvalidLinkUrl(urlDestination);\r\n    if (invalidUrlExplanation) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.LinkTagInvalidUrl,\r\n        invalidUrlExplanation,\r\n        urlDestinationExcerpt,\r\n        nodeForErrorContext\r\n      );\r\n      return false;\r\n    }\r\n\r\n    parameters.urlDestinationExcerpt = urlDestinationExcerpt;\r\n    parameters.spacingAfterDestinationExcerpt = this._tryReadSpacingAndNewlines(embeddedTokenReader);\r\n\r\n    return true;\r\n  }\r\n\r\n  private _parseLinkTagCodeDestination(\r\n    embeddedTokenReader: TokenReader,\r\n    parameters: IDocLinkTagParameters,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): boolean {\r\n    parameters.codeDestination = this._parseDeclarationReference(\r\n      embeddedTokenReader,\r\n      tokenSequenceForErrorContext,\r\n      nodeForErrorContext\r\n    );\r\n\r\n    return !!parameters.codeDestination;\r\n  }\r\n\r\n  private _parseDeclarationReference(\r\n    tokenReader: TokenReader,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): DocDeclarationReference | undefined {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n\r\n    // The package name can contain characters that look like a member reference.  This means we need to scan forwards\r\n    // to see if there is a \"#\".  However, we need to be careful not to match a \"#\" that is part of a quoted expression.\r\n\r\n    const marker: number = tokenReader.createMarker();\r\n    let hasHash: boolean = false;\r\n\r\n    // A common mistake is to forget the \"#\" for package name or import path.  The telltale sign\r\n    // of this is mistake is that we see path-only characters such as \"@\" or \"/\" in the beginning\r\n    // where this would be a syntax error for a member reference.\r\n    let lookingForImportCharacters: boolean = true;\r\n    let sawImportCharacters: boolean = false;\r\n\r\n    let done: boolean = false;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.DoubleQuote:\r\n        case TokenKind.EndOfInput:\r\n        case TokenKind.LeftCurlyBracket:\r\n        case TokenKind.LeftParenthesis:\r\n        case TokenKind.LeftSquareBracket:\r\n        case TokenKind.Newline:\r\n        case TokenKind.Pipe:\r\n        case TokenKind.RightCurlyBracket:\r\n        case TokenKind.RightParenthesis:\r\n        case TokenKind.RightSquareBracket:\r\n        case TokenKind.SingleQuote:\r\n        case TokenKind.Spacing:\r\n          done = true;\r\n          break;\r\n        case TokenKind.PoundSymbol:\r\n          hasHash = true;\r\n          done = true;\r\n          break;\r\n        case TokenKind.Slash:\r\n        case TokenKind.AtSign:\r\n          if (lookingForImportCharacters) {\r\n            sawImportCharacters = true;\r\n          }\r\n          tokenReader.readToken();\r\n          break;\r\n        case TokenKind.AsciiWord:\r\n        case TokenKind.Period:\r\n        case TokenKind.Hyphen:\r\n          // It's a character that looks like part of a package name or import path,\r\n          // so don't set lookingForImportCharacters = false\r\n          tokenReader.readToken();\r\n          break;\r\n        default:\r\n          // Once we reach something other than AsciiWord and Period, then the meaning of\r\n          // slashes and at-signs is no longer obvious.\r\n          lookingForImportCharacters = false;\r\n\r\n          tokenReader.readToken();\r\n      }\r\n    }\r\n\r\n    if (!hasHash && sawImportCharacters) {\r\n      // We saw characters that will be a syntax error if interpreted as a member reference,\r\n      // but would make sense as a package name or import path, but we did not find a \"#\"\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ReferenceMissingHash,\r\n        'The declaration reference appears to contain a package name or import path,' +\r\n          ' but it is missing the \"#\" delimiter',\r\n        tokenReader.extractAccumulatedSequence(),\r\n        nodeForErrorContext\r\n      );\r\n      return undefined;\r\n    }\r\n\r\n    tokenReader.backtrackToMarker(marker);\r\n\r\n    let packageNameExcerpt: TokenSequence | undefined;\r\n    let importPathExcerpt: TokenSequence | undefined;\r\n    let importHashExcerpt: TokenSequence | undefined;\r\n    let spacingAfterImportHashExcerpt: TokenSequence | undefined;\r\n\r\n    if (hasHash) {\r\n      // If it starts with a \".\" then it's a relative path, not a package name\r\n      if (tokenReader.peekTokenKind() !== TokenKind.Period) {\r\n        // Read the package name:\r\n        const scopedPackageName: boolean = tokenReader.peekTokenKind() === TokenKind.AtSign;\r\n        let finishedScope: boolean = false;\r\n\r\n        done = false;\r\n        while (!done) {\r\n          switch (tokenReader.peekTokenKind()) {\r\n            case TokenKind.EndOfInput:\r\n              // If hasHash=true, then we are expecting to stop when we reach the hash\r\n              throw new Error('Expecting pound symbol');\r\n            case TokenKind.Slash:\r\n              // Stop at the first slash, unless this is a scoped package, in which case we stop at the second slash\r\n              if (scopedPackageName && !finishedScope) {\r\n                tokenReader.readToken();\r\n                finishedScope = true;\r\n              } else {\r\n                done = true;\r\n              }\r\n              break;\r\n            case TokenKind.PoundSymbol:\r\n              done = true;\r\n              break;\r\n            default:\r\n              tokenReader.readToken();\r\n          }\r\n        }\r\n\r\n        if (!tokenReader.isAccumulatedSequenceEmpty()) {\r\n          packageNameExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n          // Check that the packageName is syntactically valid\r\n          const explanation: string | undefined = StringChecks.explainIfInvalidPackageName(\r\n            packageNameExcerpt.toString()\r\n          );\r\n          if (explanation) {\r\n            this._parserContext.log.addMessageForTokenSequence(\r\n              TSDocMessageId.ReferenceMalformedPackageName,\r\n              explanation,\r\n              packageNameExcerpt,\r\n              nodeForErrorContext\r\n            );\r\n            return undefined;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Read the import path:\r\n      done = false;\r\n      while (!done) {\r\n        switch (tokenReader.peekTokenKind()) {\r\n          case TokenKind.EndOfInput:\r\n            // If hasHash=true, then we are expecting to stop when we reach the hash\r\n            throw new Error('Expecting pound symbol');\r\n          case TokenKind.PoundSymbol:\r\n            done = true;\r\n            break;\r\n          default:\r\n            tokenReader.readToken();\r\n        }\r\n      }\r\n\r\n      if (!tokenReader.isAccumulatedSequenceEmpty()) {\r\n        importPathExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n        // Check that the importPath is syntactically valid\r\n        const explanation: string | undefined = StringChecks.explainIfInvalidImportPath(\r\n          importPathExcerpt.toString(),\r\n          !!packageNameExcerpt\r\n        );\r\n        if (explanation) {\r\n          this._parserContext.log.addMessageForTokenSequence(\r\n            TSDocMessageId.ReferenceMalformedImportPath,\r\n            explanation,\r\n            importPathExcerpt,\r\n            nodeForErrorContext\r\n          );\r\n          return undefined;\r\n        }\r\n      }\r\n\r\n      // Read the import hash\r\n      if (tokenReader.peekTokenKind() !== TokenKind.PoundSymbol) {\r\n        // The above logic should have left us at the PoundSymbol\r\n        throw new Error('Expecting pound symbol');\r\n      }\r\n      tokenReader.readToken();\r\n      importHashExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      spacingAfterImportHashExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n      if (packageNameExcerpt === undefined && importPathExcerpt === undefined) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceHashSyntax,\r\n          'The hash character must be preceded by a package name or import path',\r\n          importHashExcerpt,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    // Read the member references:\r\n    const memberReferences: DocMemberReference[] = [];\r\n\r\n    done = false;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.Period:\r\n        case TokenKind.LeftParenthesis:\r\n        case TokenKind.AsciiWord:\r\n        case TokenKind.Colon:\r\n        case TokenKind.LeftSquareBracket:\r\n        case TokenKind.DoubleQuote:\r\n          const expectingDot: boolean = memberReferences.length > 0;\r\n          const memberReference: DocMemberReference | undefined = this._parseMemberReference(\r\n            tokenReader,\r\n            expectingDot,\r\n            tokenSequenceForErrorContext,\r\n            nodeForErrorContext\r\n          );\r\n\r\n          if (!memberReference) {\r\n            return undefined;\r\n          }\r\n\r\n          memberReferences.push(memberReference);\r\n          break;\r\n        default:\r\n          done = true;\r\n      }\r\n    }\r\n\r\n    if (\r\n      packageNameExcerpt === undefined &&\r\n      importPathExcerpt === undefined &&\r\n      memberReferences.length === 0\r\n    ) {\r\n      // We didn't find any parts of a declaration reference\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.MissingReference,\r\n        'Expecting a declaration reference',\r\n        tokenSequenceForErrorContext,\r\n        nodeForErrorContext\r\n      );\r\n      return undefined;\r\n    }\r\n\r\n    return new DocDeclarationReference({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      packageNameExcerpt,\r\n      importPathExcerpt,\r\n\r\n      importHashExcerpt,\r\n      spacingAfterImportHashExcerpt,\r\n\r\n      memberReferences\r\n    });\r\n  }\r\n\r\n  private _parseMemberReference(\r\n    tokenReader: TokenReader,\r\n    expectingDot: boolean,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): DocMemberReference | undefined {\r\n    const parameters: IDocMemberReferenceParsedParameters = {\r\n      parsed: true,\r\n      configuration: this._configuration\r\n    };\r\n\r\n    // Read the dot operator\r\n    if (expectingDot) {\r\n      if (tokenReader.peekTokenKind() !== TokenKind.Period) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceMissingDot,\r\n          'Expecting a period before the next component of a declaration reference',\r\n          tokenSequenceForErrorContext,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n      tokenReader.readToken();\r\n      parameters.dotExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      parameters.spacingAfterDotExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n    }\r\n\r\n    // Read the left parenthesis if there is one\r\n    if (tokenReader.peekTokenKind() === TokenKind.LeftParenthesis) {\r\n      tokenReader.readToken();\r\n      parameters.leftParenthesisExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      parameters.spacingAfterLeftParenthesisExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n    }\r\n\r\n    // Read the member identifier or symbol\r\n    if (tokenReader.peekTokenKind() === TokenKind.LeftSquareBracket) {\r\n      parameters.memberSymbol = this._parseMemberSymbol(tokenReader, nodeForErrorContext);\r\n      if (!parameters.memberSymbol) {\r\n        return undefined;\r\n      }\r\n    } else {\r\n      parameters.memberIdentifier = this._parseMemberIdentifier(\r\n        tokenReader,\r\n        tokenSequenceForErrorContext,\r\n        nodeForErrorContext\r\n      );\r\n\r\n      if (!parameters.memberIdentifier) {\r\n        return undefined;\r\n      }\r\n    }\r\n    parameters.spacingAfterMemberExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n    // Read the colon\r\n    if (tokenReader.peekTokenKind() === TokenKind.Colon) {\r\n      tokenReader.readToken();\r\n\r\n      parameters.colonExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      parameters.spacingAfterColonExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n      if (!parameters.leftParenthesisExcerpt) {\r\n        // In the current TSDoc draft standard, a member reference with a selector requires the parentheses.\r\n        // It would be reasonable to make the parentheses optional, and we are contemplating simplifying the\r\n        // notation in the future.  But for now the parentheses are required.\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceSelectorMissingParens,\r\n          'Syntax error in declaration reference: the member selector must be enclosed in parentheses',\r\n          parameters.colonExcerpt,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n\r\n      // If there is a colon, then read the selector\r\n      parameters.selector = this._parseMemberSelector(\r\n        tokenReader,\r\n        parameters.colonExcerpt,\r\n        nodeForErrorContext\r\n      );\r\n      if (!parameters.selector) {\r\n        return undefined;\r\n      }\r\n\r\n      parameters.spacingAfterSelectorExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n    } else {\r\n      if (parameters.leftParenthesisExcerpt) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceMissingColon,\r\n          'Expecting a colon after the identifier because the expression is in parentheses',\r\n          parameters.leftParenthesisExcerpt,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    // Read the right parenthesis\r\n    if (parameters.leftParenthesisExcerpt) {\r\n      if (tokenReader.peekTokenKind() !== TokenKind.RightParenthesis) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceMissingRightParen,\r\n          'Expecting a matching right parenthesis',\r\n          parameters.leftParenthesisExcerpt,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n\r\n      tokenReader.readToken();\r\n\r\n      parameters.rightParenthesisExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      parameters.spacingAfterRightParenthesisExcerpt = this._tryReadSpacingAndNewlines(tokenReader);\r\n    }\r\n\r\n    return new DocMemberReference(parameters);\r\n  }\r\n\r\n  private _parseMemberSymbol(\r\n    tokenReader: TokenReader,\r\n    nodeForErrorContext: DocNode\r\n  ): DocMemberSymbol | undefined {\r\n    // Read the \"[\"\r\n    if (tokenReader.peekTokenKind() !== TokenKind.LeftSquareBracket) {\r\n      // This should be impossible since the caller ensures that peekTokenKind() === TokenKind.LeftSquareBracket\r\n      throw new Error('Expecting \"[\"');\r\n    }\r\n\r\n    tokenReader.readToken();\r\n    const leftBracketExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const spacingAfterLeftBracketExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(\r\n      tokenReader\r\n    );\r\n\r\n    // Read the declaration reference\r\n    const declarationReference: DocDeclarationReference | undefined = this._parseDeclarationReference(\r\n      tokenReader,\r\n      leftBracketExcerpt,\r\n      nodeForErrorContext\r\n    );\r\n\r\n    if (!declarationReference) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ReferenceSymbolSyntax,\r\n        'Missing declaration reference in symbol reference',\r\n        leftBracketExcerpt,\r\n        nodeForErrorContext\r\n      );\r\n\r\n      return undefined;\r\n    }\r\n\r\n    // (We don't need to worry about spacing here since _parseDeclarationReference() absorbs trailing spaces)\r\n\r\n    // Read the \"]\"\r\n    if (tokenReader.peekTokenKind() !== TokenKind.RightSquareBracket) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ReferenceMissingRightBracket,\r\n        'Missing closing square bracket for symbol reference',\r\n        leftBracketExcerpt,\r\n        nodeForErrorContext\r\n      );\r\n\r\n      return undefined;\r\n    }\r\n\r\n    tokenReader.readToken();\r\n    const rightBracketExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    return new DocMemberSymbol({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      leftBracketExcerpt,\r\n      spacingAfterLeftBracketExcerpt,\r\n      symbolReference: declarationReference,\r\n      rightBracketExcerpt\r\n    });\r\n  }\r\n\r\n  private _parseMemberIdentifier(\r\n    tokenReader: TokenReader,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): DocMemberIdentifier | undefined {\r\n    let leftQuoteExcerpt: TokenSequence | undefined = undefined;\r\n    let rightQuoteExcerpt: TokenSequence | undefined = undefined;\r\n\r\n    // Is this a quoted identifier?\r\n    if (tokenReader.peekTokenKind() === TokenKind.DoubleQuote) {\r\n      // Read the opening '\"'\r\n      tokenReader.readToken();\r\n      leftQuoteExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      // Read the text inside the quotes\r\n      while (tokenReader.peekTokenKind() !== TokenKind.DoubleQuote) {\r\n        if (tokenReader.peekTokenKind() === TokenKind.EndOfInput) {\r\n          this._parserContext.log.addMessageForTokenSequence(\r\n            TSDocMessageId.ReferenceMissingQuote,\r\n            'Unexpected end of input inside quoted member identifier',\r\n            leftQuoteExcerpt,\r\n            nodeForErrorContext\r\n          );\r\n          return undefined;\r\n        }\r\n\r\n        tokenReader.readToken();\r\n      }\r\n\r\n      if (tokenReader.isAccumulatedSequenceEmpty()) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceEmptyIdentifier,\r\n          'The quoted identifier cannot be empty',\r\n          leftQuoteExcerpt,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n\r\n      const identifierExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n      // Read the closing '\"\"\r\n      tokenReader.readToken(); // read the quote\r\n      rightQuoteExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n      return new DocMemberIdentifier({\r\n        parsed: true,\r\n        configuration: this._configuration,\r\n\r\n        leftQuoteExcerpt,\r\n        identifierExcerpt,\r\n        rightQuoteExcerpt\r\n      });\r\n    } else {\r\n      // Otherwise assume it's a valid TypeScript identifier\r\n\r\n      let done: boolean = false;\r\n      while (!done) {\r\n        switch (tokenReader.peekTokenKind()) {\r\n          case TokenKind.AsciiWord:\r\n          case TokenKind.DollarSign:\r\n            tokenReader.readToken();\r\n            break;\r\n          default:\r\n            done = true;\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (tokenReader.isAccumulatedSequenceEmpty()) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceMissingIdentifier,\r\n          'Syntax error in declaration reference: expecting a member identifier',\r\n          tokenSequenceForErrorContext,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n\r\n      const identifierExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n      const identifier: string = identifierExcerpt.toString();\r\n\r\n      const explanation: string | undefined = StringChecks.explainIfInvalidUnquotedMemberIdentifier(\r\n        identifier\r\n      );\r\n      if (explanation) {\r\n        this._parserContext.log.addMessageForTokenSequence(\r\n          TSDocMessageId.ReferenceUnquotedIdentifier,\r\n          explanation,\r\n          identifierExcerpt,\r\n          nodeForErrorContext\r\n        );\r\n        return undefined;\r\n      }\r\n\r\n      return new DocMemberIdentifier({\r\n        parsed: true,\r\n        configuration: this._configuration,\r\n\r\n        leftQuoteExcerpt,\r\n        identifierExcerpt,\r\n        rightQuoteExcerpt\r\n      });\r\n    }\r\n  }\r\n\r\n  private _parseMemberSelector(\r\n    tokenReader: TokenReader,\r\n    tokenSequenceForErrorContext: TokenSequence,\r\n    nodeForErrorContext: DocNode\r\n  ): DocMemberSelector | undefined {\r\n    if (tokenReader.peekTokenKind() !== TokenKind.AsciiWord) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ReferenceMissingLabel,\r\n        'Expecting a selector label after the colon',\r\n        tokenSequenceForErrorContext,\r\n        nodeForErrorContext\r\n      );\r\n    }\r\n\r\n    const selector: string = tokenReader.readToken().toString();\r\n    const selectorExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const docMemberSelector: DocMemberSelector = new DocMemberSelector({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      selectorExcerpt,\r\n      selector\r\n    });\r\n\r\n    if (docMemberSelector.errorMessage) {\r\n      this._parserContext.log.addMessageForTokenSequence(\r\n        TSDocMessageId.ReferenceSelectorSyntax,\r\n        docMemberSelector.errorMessage,\r\n        selectorExcerpt,\r\n        nodeForErrorContext\r\n      );\r\n      return undefined;\r\n    }\r\n\r\n    return docMemberSelector;\r\n  }\r\n\r\n  private _parseHtmlStartTag(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    // Read the \"<\" delimiter\r\n    const lessThanToken: Token = tokenReader.readToken();\r\n    if (lessThanToken.kind !== TokenKind.LessThan) {\r\n      // This would be a parser bug -- the caller of _parseHtmlStartTag() should have verified this while\r\n      // looking ahead\r\n      throw new Error('Expecting an HTML tag starting with \"<\"');\r\n    }\r\n\r\n    // NOTE: CommonMark does not permit whitespace after the \"<\"\r\n\r\n    const openingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // Read the element name\r\n    const nameExcerpt: ResultOrFailure<TokenSequence> = this._parseHtmlName(tokenReader);\r\n    if (isFailure(nameExcerpt)) {\r\n      return this._backtrackAndCreateErrorForFailure(\r\n        tokenReader,\r\n        marker,\r\n        'Invalid HTML element: ',\r\n        nameExcerpt\r\n      );\r\n    }\r\n\r\n    const spacingAfterNameExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n    const htmlAttributes: DocHtmlAttribute[] = [];\r\n\r\n    // Read the attributes until we see a \">\" or \"/>\"\r\n    while (tokenReader.peekTokenKind() === TokenKind.AsciiWord) {\r\n      // Read the attribute\r\n      const attributeNode: ResultOrFailure<DocHtmlAttribute> = this._parseHtmlAttribute(tokenReader);\r\n      if (isFailure(attributeNode)) {\r\n        return this._backtrackAndCreateErrorForFailure(\r\n          tokenReader,\r\n          marker,\r\n          'The HTML element has an invalid attribute: ',\r\n          attributeNode\r\n        );\r\n      }\r\n\r\n      htmlAttributes.push(attributeNode);\r\n    }\r\n\r\n    // Read the closing \"/>\" or \">\" as the Excerpt.suffix\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const endDelimiterMarker: number = tokenReader.createMarker();\r\n\r\n    let selfClosingTag: boolean = false;\r\n    if (tokenReader.peekTokenKind() === TokenKind.Slash) {\r\n      tokenReader.readToken();\r\n      selfClosingTag = true;\r\n    }\r\n    if (tokenReader.peekTokenKind() !== TokenKind.GreaterThan) {\r\n      const failure: IFailure = this._createFailureForTokensSince(\r\n        tokenReader,\r\n        TSDocMessageId.HtmlTagMissingGreaterThan,\r\n        'Expecting an attribute or \">\" or \"/>\"',\r\n        endDelimiterMarker\r\n      );\r\n      return this._backtrackAndCreateErrorForFailure(\r\n        tokenReader,\r\n        marker,\r\n        'The HTML tag has invalid syntax: ',\r\n        failure\r\n      );\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    const closingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // NOTE: We don't read excerptParameters.separator here, since if there is any it\r\n    // will be represented as DocPlainText.\r\n\r\n    return new DocHtmlStartTag({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      openingDelimiterExcerpt,\r\n\r\n      nameExcerpt,\r\n      spacingAfterNameExcerpt,\r\n\r\n      htmlAttributes,\r\n\r\n      selfClosingTag,\r\n\r\n      closingDelimiterExcerpt\r\n    });\r\n  }\r\n\r\n  private _parseHtmlAttribute(tokenReader: TokenReader): ResultOrFailure<DocHtmlAttribute> {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n\r\n    // Read the attribute name\r\n    const nameExcerpt: ResultOrFailure<TokenSequence> = this._parseHtmlName(tokenReader);\r\n    if (isFailure(nameExcerpt)) {\r\n      return nameExcerpt;\r\n    }\r\n\r\n    const spacingAfterNameExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n    // Read the equals\r\n    if (tokenReader.peekTokenKind() !== TokenKind.Equals) {\r\n      return this._createFailureForToken(\r\n        tokenReader,\r\n        TSDocMessageId.HtmlTagMissingEquals,\r\n        'Expecting \"=\" after HTML attribute name'\r\n      );\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    const equalsExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const spacingAfterEqualsExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n    // Read the attribute value\r\n    const attributeValue: ResultOrFailure<string> = this._parseHtmlString(tokenReader);\r\n    if (isFailure(attributeValue)) {\r\n      return attributeValue;\r\n    }\r\n\r\n    const valueExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const spacingAfterValueExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n    return new DocHtmlAttribute({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      nameExcerpt,\r\n      spacingAfterNameExcerpt,\r\n\r\n      equalsExcerpt,\r\n      spacingAfterEqualsExcerpt,\r\n\r\n      valueExcerpt,\r\n      spacingAfterValueExcerpt\r\n    });\r\n  }\r\n\r\n  private _parseHtmlString(tokenReader: TokenReader): ResultOrFailure<string> {\r\n    const marker: number = tokenReader.createMarker();\r\n    const quoteTokenKind: TokenKind = tokenReader.peekTokenKind();\r\n    if (quoteTokenKind !== TokenKind.DoubleQuote && quoteTokenKind !== TokenKind.SingleQuote) {\r\n      return this._createFailureForToken(\r\n        tokenReader,\r\n        TSDocMessageId.HtmlTagMissingString,\r\n        'Expecting an HTML string starting with a single-quote or double-quote character'\r\n      );\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    let textWithoutQuotes: string = '';\r\n\r\n    for (;;) {\r\n      const peekedTokenKind: TokenKind = tokenReader.peekTokenKind();\r\n      // Did we find the matching token?\r\n      if (peekedTokenKind === quoteTokenKind) {\r\n        tokenReader.readToken(); // extract the quote\r\n        break;\r\n      }\r\n      if (peekedTokenKind === TokenKind.EndOfInput || peekedTokenKind === TokenKind.Newline) {\r\n        return this._createFailureForToken(\r\n          tokenReader,\r\n          TSDocMessageId.HtmlStringMissingQuote,\r\n          'The HTML string is missing its closing quote',\r\n          marker\r\n        );\r\n      }\r\n      textWithoutQuotes += tokenReader.readToken().toString();\r\n    }\r\n\r\n    // The next attribute cannot start immediately after this one\r\n    if (tokenReader.peekTokenKind() === TokenKind.AsciiWord) {\r\n      return this._createFailureForToken(\r\n        tokenReader,\r\n        TSDocMessageId.TextAfterHtmlString,\r\n        'The next character after a closing quote must be spacing or punctuation'\r\n      );\r\n    }\r\n\r\n    return textWithoutQuotes;\r\n  }\r\n\r\n  private _parseHtmlEndTag(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    // Read the \"</\" delimiter\r\n    const lessThanToken: Token = tokenReader.peekToken();\r\n    if (lessThanToken.kind !== TokenKind.LessThan) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.MissingHtmlEndTag,\r\n        'Expecting an HTML tag starting with \"</\"'\r\n      );\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    const slashToken: Token = tokenReader.peekToken();\r\n    if (slashToken.kind !== TokenKind.Slash) {\r\n      return this._backtrackAndCreateError(\r\n        tokenReader,\r\n        marker,\r\n        TSDocMessageId.MissingHtmlEndTag,\r\n        'Expecting an HTML tag starting with \"</\"'\r\n      );\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    // NOTE: Spaces are not permitted here\r\n    // https://www.w3.org/TR/html5/syntax.html#end-tags\r\n\r\n    const openingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // Read the tag name\r\n    const nameExcerpt: ResultOrFailure<TokenSequence> = this._parseHtmlName(tokenReader);\r\n    if (isFailure(nameExcerpt)) {\r\n      return this._backtrackAndCreateErrorForFailure(\r\n        tokenReader,\r\n        marker,\r\n        'Expecting an HTML element name: ',\r\n        nameExcerpt\r\n      );\r\n    }\r\n\r\n    const spacingAfterNameExcerpt: TokenSequence | undefined = this._tryReadSpacingAndNewlines(tokenReader);\r\n\r\n    // Read the closing \">\"\r\n    if (tokenReader.peekTokenKind() !== TokenKind.GreaterThan) {\r\n      const failure: IFailure = this._createFailureForToken(\r\n        tokenReader,\r\n        TSDocMessageId.HtmlTagMissingGreaterThan,\r\n        'Expecting a closing \">\" for the HTML tag'\r\n      );\r\n      return this._backtrackAndCreateErrorForFailure(tokenReader, marker, '', failure);\r\n    }\r\n    tokenReader.readToken();\r\n\r\n    const closingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    return new DocHtmlEndTag({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      openingDelimiterExcerpt,\r\n\r\n      nameExcerpt,\r\n      spacingAfterNameExcerpt,\r\n\r\n      closingDelimiterExcerpt\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parses an HTML name such as an element name or attribute name.\r\n   */\r\n  private _parseHtmlName(tokenReader: TokenReader): ResultOrFailure<TokenSequence> {\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    if (tokenReader.peekTokenKind() === TokenKind.Spacing) {\r\n      return this._createFailureForTokensSince(\r\n        tokenReader,\r\n        TSDocMessageId.MalformedHtmlName,\r\n        'A space is not allowed here',\r\n        marker\r\n      );\r\n    }\r\n\r\n    let done: boolean = false;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.Hyphen:\r\n        case TokenKind.Period:\r\n        case TokenKind.AsciiWord:\r\n          tokenReader.readToken();\r\n          break;\r\n        default:\r\n          done = true;\r\n          break;\r\n      }\r\n    }\r\n    const excerpt: TokenSequence | undefined = tokenReader.tryExtractAccumulatedSequence();\r\n\r\n    if (!excerpt) {\r\n      return this._createFailureForToken(\r\n        tokenReader,\r\n        TSDocMessageId.MalformedHtmlName,\r\n        'Expecting an HTML name'\r\n      );\r\n    }\r\n\r\n    const htmlName: string = excerpt.toString();\r\n\r\n    const explanation: string | undefined = StringChecks.explainIfInvalidHtmlName(htmlName);\r\n\r\n    if (explanation) {\r\n      return this._createFailureForTokensSince(\r\n        tokenReader,\r\n        TSDocMessageId.MalformedHtmlName,\r\n        explanation,\r\n        marker\r\n      );\r\n    }\r\n\r\n    if (\r\n      this._configuration.validation.reportUnsupportedHtmlElements &&\r\n      !this._configuration.isHtmlElementSupported(htmlName)\r\n    ) {\r\n      return this._createFailureForToken(\r\n        tokenReader,\r\n        TSDocMessageId.UnsupportedHtmlElementName,\r\n        `The HTML element name ${JSON.stringify(htmlName)} is not defined by your TSDoc configuration`,\r\n        marker\r\n      );\r\n    }\r\n\r\n    return excerpt;\r\n  }\r\n\r\n  private _parseFencedCode(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n\r\n    const startMarker: number = tokenReader.createMarker();\r\n    const endOfOpeningDelimiterMarker: number = startMarker + 2;\r\n\r\n    switch (tokenReader.peekPreviousTokenKind()) {\r\n      case TokenKind.Newline:\r\n      case TokenKind.EndOfInput:\r\n        break;\r\n      default:\r\n        return this._backtrackAndCreateErrorRange(\r\n          tokenReader,\r\n          startMarker,\r\n          // include the three backticks so they don't get reinterpreted as a code span\r\n          endOfOpeningDelimiterMarker,\r\n          TSDocMessageId.CodeFenceOpeningIndent,\r\n          'The opening backtick for a code fence must appear at the start of the line'\r\n        );\r\n    }\r\n\r\n    // Read the opening ``` delimiter\r\n    let openingDelimiter: string = '';\r\n    openingDelimiter += tokenReader.readToken();\r\n    openingDelimiter += tokenReader.readToken();\r\n    openingDelimiter += tokenReader.readToken();\r\n\r\n    if (openingDelimiter !== '```') {\r\n      // This would be a parser bug -- the caller of _parseFencedCode() should have verified this while\r\n      // looking ahead to distinguish code spans/fences\r\n      throw new Error('Expecting three backticks');\r\n    }\r\n\r\n    const openingFenceExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // Read any spaces after the delimiter,\r\n    // but NOT the Newline since that goes with the spacingAfterLanguageExcerpt\r\n    while (tokenReader.peekTokenKind() === TokenKind.Spacing) {\r\n      tokenReader.readToken();\r\n    }\r\n\r\n    const spacingAfterOpeningFenceExcerpt:\r\n      | TokenSequence\r\n      | undefined = tokenReader.tryExtractAccumulatedSequence();\r\n\r\n    // Read the language specifier (if present) and newline\r\n    let done: boolean = false;\r\n    let startOfPaddingMarker: number | undefined = undefined;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.Spacing:\r\n        case TokenKind.Newline:\r\n          if (startOfPaddingMarker === undefined) {\r\n            // Starting a new run of spacing characters\r\n            startOfPaddingMarker = tokenReader.createMarker();\r\n          }\r\n          if (tokenReader.peekTokenKind() === TokenKind.Newline) {\r\n            done = true;\r\n          }\r\n          tokenReader.readToken();\r\n          break;\r\n        case TokenKind.Backtick:\r\n          const failure: IFailure = this._createFailureForToken(\r\n            tokenReader,\r\n            TSDocMessageId.CodeFenceSpecifierSyntax,\r\n            'The language specifier cannot contain backtick characters'\r\n          );\r\n          return this._backtrackAndCreateErrorRangeForFailure(\r\n            tokenReader,\r\n            startMarker,\r\n            endOfOpeningDelimiterMarker,\r\n            'Error parsing code fence: ',\r\n            failure\r\n          );\r\n        case TokenKind.EndOfInput:\r\n          const failure2: IFailure = this._createFailureForToken(\r\n            tokenReader,\r\n            TSDocMessageId.CodeFenceMissingDelimiter,\r\n            'Missing closing delimiter'\r\n          );\r\n          return this._backtrackAndCreateErrorRangeForFailure(\r\n            tokenReader,\r\n            startMarker,\r\n            endOfOpeningDelimiterMarker,\r\n            'Error parsing code fence: ',\r\n            failure2\r\n          );\r\n        default:\r\n          // more non-spacing content\r\n          startOfPaddingMarker = undefined;\r\n          tokenReader.readToken();\r\n          break;\r\n      }\r\n    }\r\n\r\n    // At this point, we must have accumulated at least a newline token.\r\n    // Example: \"pov-ray sdl    \\n\"\r\n    const restOfLineExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // Example: \"pov-ray sdl\"\r\n    const languageExcerpt: TokenSequence = restOfLineExcerpt.getNewSequence(\r\n      restOfLineExcerpt.startIndex,\r\n      startOfPaddingMarker!\r\n    );\r\n\r\n    // Example: \"    \\n\"\r\n    const spacingAfterLanguageExcerpt: TokenSequence | undefined = restOfLineExcerpt.getNewSequence(\r\n      startOfPaddingMarker!,\r\n      restOfLineExcerpt.endIndex\r\n    );\r\n\r\n    // Read the code content until we see the closing ``` delimiter\r\n    let codeEndMarker: number = -1;\r\n    let closingFenceStartMarker: number = -1;\r\n    done = false;\r\n    let tokenBeforeDelimiter: Token;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.EndOfInput:\r\n          const failure2: IFailure = this._createFailureForToken(\r\n            tokenReader,\r\n            TSDocMessageId.CodeFenceMissingDelimiter,\r\n            'Missing closing delimiter'\r\n          );\r\n          return this._backtrackAndCreateErrorRangeForFailure(\r\n            tokenReader,\r\n            startMarker,\r\n            endOfOpeningDelimiterMarker,\r\n            'Error parsing code fence: ',\r\n            failure2\r\n          );\r\n        case TokenKind.Newline:\r\n          tokenBeforeDelimiter = tokenReader.readToken();\r\n          codeEndMarker = tokenReader.createMarker();\r\n\r\n          while (tokenReader.peekTokenKind() === TokenKind.Spacing) {\r\n            tokenBeforeDelimiter = tokenReader.readToken();\r\n          }\r\n\r\n          if (tokenReader.peekTokenKind() !== TokenKind.Backtick) {\r\n            break;\r\n          }\r\n          closingFenceStartMarker = tokenReader.createMarker();\r\n          tokenReader.readToken(); // first backtick\r\n\r\n          if (tokenReader.peekTokenKind() !== TokenKind.Backtick) {\r\n            break;\r\n          }\r\n          tokenReader.readToken(); // second backtick\r\n\r\n          if (tokenReader.peekTokenKind() !== TokenKind.Backtick) {\r\n            break;\r\n          }\r\n          tokenReader.readToken(); // third backtick\r\n\r\n          done = true;\r\n          break;\r\n        default:\r\n          tokenReader.readToken();\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (tokenBeforeDelimiter!.kind !== TokenKind.Newline) {\r\n      this._parserContext.log.addMessageForTextRange(\r\n        TSDocMessageId.CodeFenceClosingIndent,\r\n        'The closing delimiter for a code fence must not be indented',\r\n        tokenBeforeDelimiter!.range\r\n      );\r\n    }\r\n\r\n    // Example: \"code 1\\ncode 2\\n  ```\"\r\n    const codeAndDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    // Example: \"code 1\\ncode 2\\n\"\r\n    const codeExcerpt: TokenSequence = codeAndDelimiterExcerpt.getNewSequence(\r\n      codeAndDelimiterExcerpt.startIndex,\r\n      codeEndMarker\r\n    );\r\n\r\n    // Example: \"  \"\r\n    const spacingBeforeClosingFenceExcerpt:\r\n      | TokenSequence\r\n      | undefined = codeAndDelimiterExcerpt.getNewSequence(codeEndMarker, closingFenceStartMarker);\r\n\r\n    // Example: \"```\"\r\n    const closingFenceExcerpt: TokenSequence = codeAndDelimiterExcerpt.getNewSequence(\r\n      closingFenceStartMarker,\r\n      codeAndDelimiterExcerpt.endIndex\r\n    );\r\n\r\n    // Read the spacing and newline after the closing delimiter\r\n    done = false;\r\n    while (!done) {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.Spacing:\r\n          tokenReader.readToken();\r\n          break;\r\n        case TokenKind.Newline:\r\n          done = true;\r\n          tokenReader.readToken();\r\n          break;\r\n        case TokenKind.EndOfInput:\r\n          done = true;\r\n          break;\r\n        default:\r\n          this._parserContext.log.addMessageForTextRange(\r\n            TSDocMessageId.CodeFenceClosingSyntax,\r\n            'Unexpected characters after closing delimiter for code fence',\r\n            tokenReader.peekToken().range\r\n          );\r\n          done = true;\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Example: \"   \\n\"\r\n    const spacingAfterClosingFenceExcerpt:\r\n      | TokenSequence\r\n      | undefined = tokenReader.tryExtractAccumulatedSequence();\r\n\r\n    return new DocFencedCode({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      openingFenceExcerpt,\r\n      spacingAfterOpeningFenceExcerpt,\r\n\r\n      languageExcerpt,\r\n      spacingAfterLanguageExcerpt,\r\n\r\n      codeExcerpt,\r\n\r\n      spacingBeforeClosingFenceExcerpt,\r\n      closingFenceExcerpt,\r\n      spacingAfterClosingFenceExcerpt\r\n    });\r\n  }\r\n\r\n  private _parseCodeSpan(tokenReader: TokenReader): DocNode {\r\n    tokenReader.assertAccumulatedSequenceIsEmpty();\r\n    const marker: number = tokenReader.createMarker();\r\n\r\n    // Parse the opening backtick\r\n    if (tokenReader.peekTokenKind() !== TokenKind.Backtick) {\r\n      // This would be a parser bug -- the caller of _parseCodeSpan() should have verified this while\r\n      // looking ahead to distinguish code spans/fences\r\n      throw new Error('Expecting a code span starting with a backtick character \"`\"');\r\n    }\r\n\r\n    tokenReader.readToken(); // read the backtick\r\n\r\n    const openingDelimiterExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    let codeExcerpt: TokenSequence | undefined = undefined;\r\n    let closingDelimiterExcerpt: TokenSequence | undefined = undefined;\r\n\r\n    // Parse the content backtick\r\n    for (;;) {\r\n      const peekedTokenKind: TokenKind = tokenReader.peekTokenKind();\r\n      // Did we find the matching token?\r\n      if (peekedTokenKind === TokenKind.Backtick) {\r\n        if (tokenReader.isAccumulatedSequenceEmpty()) {\r\n          return this._backtrackAndCreateErrorRange(\r\n            tokenReader,\r\n            marker,\r\n            marker + 1,\r\n            TSDocMessageId.CodeSpanEmpty,\r\n            'A code span must contain at least one character between the backticks'\r\n          );\r\n        }\r\n\r\n        codeExcerpt = tokenReader.extractAccumulatedSequence();\r\n\r\n        tokenReader.readToken();\r\n        closingDelimiterExcerpt = tokenReader.extractAccumulatedSequence();\r\n        break;\r\n      }\r\n      if (peekedTokenKind === TokenKind.EndOfInput || peekedTokenKind === TokenKind.Newline) {\r\n        return this._backtrackAndCreateError(\r\n          tokenReader,\r\n          marker,\r\n          TSDocMessageId.CodeSpanMissingDelimiter,\r\n          'The code span is missing its closing backtick'\r\n        );\r\n      }\r\n      tokenReader.readToken();\r\n    }\r\n\r\n    return new DocCodeSpan({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      openingDelimiterExcerpt,\r\n\r\n      codeExcerpt,\r\n\r\n      closingDelimiterExcerpt\r\n    });\r\n  }\r\n\r\n  private _tryReadSpacingAndNewlines(tokenReader: TokenReader): TokenSequence | undefined {\r\n    let done: boolean = false;\r\n    do {\r\n      switch (tokenReader.peekTokenKind()) {\r\n        case TokenKind.Spacing:\r\n        case TokenKind.Newline:\r\n          tokenReader.readToken();\r\n          break;\r\n        default:\r\n          done = true;\r\n          break;\r\n      }\r\n    } while (!done);\r\n    return tokenReader.tryExtractAccumulatedSequence();\r\n  }\r\n\r\n  /**\r\n   * Read the next token, and report it as a DocErrorText node.\r\n   */\r\n  private _createError(\r\n    tokenReader: TokenReader,\r\n    messageId: TSDocMessageId,\r\n    errorMessage: string\r\n  ): DocErrorText {\r\n    tokenReader.readToken();\r\n\r\n    const textExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const docErrorText: DocErrorText = new DocErrorText({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      textExcerpt,\r\n\r\n      messageId,\r\n      errorMessage,\r\n      errorLocation: textExcerpt\r\n    });\r\n    this._parserContext.log.addMessageForDocErrorText(docErrorText);\r\n    return docErrorText;\r\n  }\r\n\r\n  /**\r\n   * Rewind to the specified marker, read the next token, and report it as a DocErrorText node.\r\n   */\r\n  private _backtrackAndCreateError(\r\n    tokenReader: TokenReader,\r\n    marker: number,\r\n    messageId: TSDocMessageId,\r\n    errorMessage: string\r\n  ): DocErrorText {\r\n    tokenReader.backtrackToMarker(marker);\r\n    return this._createError(tokenReader, messageId, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * Rewind to the errorStartMarker, read the tokens up to and including errorInclusiveEndMarker,\r\n   * and report it as a DocErrorText node.\r\n   */\r\n  private _backtrackAndCreateErrorRange(\r\n    tokenReader: TokenReader,\r\n    errorStartMarker: number,\r\n    errorInclusiveEndMarker: number,\r\n    messageId: TSDocMessageId,\r\n    errorMessage: string\r\n  ): DocErrorText {\r\n    tokenReader.backtrackToMarker(errorStartMarker);\r\n    while (tokenReader.createMarker() !== errorInclusiveEndMarker) {\r\n      tokenReader.readToken();\r\n    }\r\n    if (tokenReader.peekTokenKind() !== TokenKind.EndOfInput) {\r\n      tokenReader.readToken();\r\n    }\r\n\r\n    const textExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const docErrorText: DocErrorText = new DocErrorText({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      textExcerpt,\r\n\r\n      messageId,\r\n      errorMessage: errorMessage,\r\n      errorLocation: textExcerpt\r\n    });\r\n    this._parserContext.log.addMessageForDocErrorText(docErrorText);\r\n    return docErrorText;\r\n  }\r\n\r\n  /**\r\n   * Rewind to the specified marker, read the next token, and report it as a DocErrorText node\r\n   * whose location is based on an IFailure.\r\n   */\r\n  private _backtrackAndCreateErrorForFailure(\r\n    tokenReader: TokenReader,\r\n    marker: number,\r\n    errorMessagePrefix: string,\r\n    failure: IFailure\r\n  ): DocErrorText {\r\n    tokenReader.backtrackToMarker(marker);\r\n    tokenReader.readToken();\r\n\r\n    const textExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const docErrorText: DocErrorText = new DocErrorText({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      textExcerpt,\r\n\r\n      messageId: failure.failureMessageId,\r\n      errorMessage: errorMessagePrefix + failure.failureMessage,\r\n      errorLocation: failure.failureLocation\r\n    });\r\n    this._parserContext.log.addMessageForDocErrorText(docErrorText);\r\n    return docErrorText;\r\n  }\r\n\r\n  /**\r\n   * Rewind to the errorStartMarker, read the tokens up to and including errorInclusiveEndMarker,\r\n   * and report it as a DocErrorText node whose location is based on an IFailure.\r\n   */\r\n  private _backtrackAndCreateErrorRangeForFailure(\r\n    tokenReader: TokenReader,\r\n    errorStartMarker: number,\r\n    errorInclusiveEndMarker: number,\r\n    errorMessagePrefix: string,\r\n    failure: IFailure\r\n  ): DocErrorText {\r\n    tokenReader.backtrackToMarker(errorStartMarker);\r\n    while (tokenReader.createMarker() !== errorInclusiveEndMarker) {\r\n      tokenReader.readToken();\r\n    }\r\n    if (tokenReader.peekTokenKind() !== TokenKind.EndOfInput) {\r\n      tokenReader.readToken();\r\n    }\r\n\r\n    const textExcerpt: TokenSequence = tokenReader.extractAccumulatedSequence();\r\n\r\n    const docErrorText: DocErrorText = new DocErrorText({\r\n      parsed: true,\r\n      configuration: this._configuration,\r\n\r\n      textExcerpt,\r\n\r\n      messageId: failure.failureMessageId,\r\n      errorMessage: errorMessagePrefix + failure.failureMessage,\r\n      errorLocation: failure.failureLocation\r\n    });\r\n    this._parserContext.log.addMessageForDocErrorText(docErrorText);\r\n    return docErrorText;\r\n  }\r\n\r\n  /**\r\n   * Creates an IFailure whose TokenSequence is a single token.  If a marker is not specified,\r\n   * then it is the current token.\r\n   */\r\n  private _createFailureForToken(\r\n    tokenReader: TokenReader,\r\n    failureMessageId: TSDocMessageId,\r\n    failureMessage: string,\r\n    tokenMarker?: number\r\n  ): IFailure {\r\n    if (!tokenMarker) {\r\n      tokenMarker = tokenReader.createMarker();\r\n    }\r\n\r\n    const tokenSequence: TokenSequence = new TokenSequence({\r\n      parserContext: this._parserContext,\r\n      startIndex: tokenMarker,\r\n      endIndex: tokenMarker + 1\r\n    });\r\n\r\n    return {\r\n      failureMessageId,\r\n      failureMessage,\r\n      failureLocation: tokenSequence\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates an IFailure whose TokenSequence starts from the specified marker and\r\n   * encompasses all tokens read since then.  If none were read, then the next token used.\r\n   */\r\n  private _createFailureForTokensSince(\r\n    tokenReader: TokenReader,\r\n    failureMessageId: TSDocMessageId,\r\n    failureMessage: string,\r\n    startMarker: number\r\n  ): IFailure {\r\n    let endMarker: number = tokenReader.createMarker();\r\n    if (endMarker < startMarker) {\r\n      // This would be a parser bug\r\n      throw new Error('Invalid startMarker');\r\n    }\r\n\r\n    if (endMarker === startMarker) {\r\n      ++endMarker;\r\n    }\r\n\r\n    const tokenSequence: TokenSequence = new TokenSequence({\r\n      parserContext: this._parserContext,\r\n      startIndex: startMarker,\r\n      endIndex: endMarker\r\n    });\r\n\r\n    return {\r\n      failureMessageId,\r\n      failureMessage,\r\n      failureLocation: tokenSequence\r\n    };\r\n  }\r\n}\r\n", "import { DocSection, DocNode, DocNodeKind, DocParagraph, DocPlainText } from '../nodes';\r\n\r\n/**\r\n * The ParagraphSplitter is a secondary stage that runs after the NodeParser has constructed\r\n * the DocComment.  It splits DocParagraph nodes into multiple paragraphs by looking for\r\n * paragraph delimiters.  Following CommonMark conventions, paragraphs are delimited by\r\n * one or more blank lines.  (These lines end with SoftBreak nodes.)  The blank lines are\r\n * not discarded.  Instead, they are attached to the preceding paragraph.  If the DocParagraph\r\n * starts with blank lines, they are preserved to avoid creating a paragraph containing only\r\n * whitespace.\r\n */\r\nexport class ParagraphSplitter {\r\n  private static readonly _whitespaceRegExp: RegExp = /^\\s*$/;\r\n\r\n  /**\r\n   * Split all paragraphs belonging to the provided subtree.\r\n   */\r\n  public static splitParagraphs(node: DocNode): void {\r\n    if (node instanceof DocSection) {\r\n      ParagraphSplitter.splitParagraphsForSection(node);\r\n\r\n      // (We don't recurse here, since sections cannot contain subsections)\r\n    } else {\r\n      for (const childNode of node.getChildNodes()) {\r\n        ParagraphSplitter.splitParagraphs(childNode);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Split all paragraphs belonging to the provided DocSection.\r\n   */\r\n  public static splitParagraphsForSection(docSection: DocSection): void {\r\n    const inputNodes: ReadonlyArray<DocNode> = docSection.nodes;\r\n    const outputNodes: DocNode[] = [];\r\n\r\n    for (const oldNode of inputNodes) {\r\n      if (oldNode.kind === DocNodeKind.Paragraph) {\r\n        ParagraphSplitter._splitParagraph(oldNode as DocParagraph, outputNodes);\r\n      } else {\r\n        outputNodes.push(oldNode);\r\n      }\r\n    }\r\n\r\n    // Replace the inputNodes with the outputNodes\r\n    docSection.clearNodes();\r\n    docSection.appendNodes(outputNodes);\r\n  }\r\n\r\n  private static _splitParagraph(oldParagraph: DocParagraph, outputNodes: DocNode[]): void {\r\n    const inputParagraphNodes: ReadonlyArray<DocNode> = oldParagraph.nodes;\r\n\r\n    let currentParagraph: DocParagraph = new DocParagraph({ configuration: oldParagraph.configuration });\r\n    outputNodes.push(currentParagraph);\r\n\r\n    const enum SplitterState {\r\n      Start,\r\n      AwaitingTrailer,\r\n      ReadingTrailer\r\n    }\r\n    let state: SplitterState = SplitterState.Start;\r\n\r\n    let currentIndex: number = 0;\r\n    while (currentIndex < inputParagraphNodes.length) {\r\n      // Scan forwards to the end of the line\r\n      let isBlankLine: boolean = true;\r\n      let lineEndIndex: number = currentIndex; // non-inclusive\r\n      do {\r\n        const node: DocNode = inputParagraphNodes[lineEndIndex++];\r\n        if (node.kind === DocNodeKind.SoftBreak) {\r\n          break;\r\n        }\r\n        if (isBlankLine) {\r\n          if (!this._isWhitespace(node)) {\r\n            isBlankLine = false;\r\n          }\r\n        }\r\n      } while (lineEndIndex < inputParagraphNodes.length);\r\n\r\n      // At this point, the line and SoftBreak will be in inputParagraphNodes.slice(currentIndex, lineEndIndex)\r\n\r\n      switch (state) {\r\n        case SplitterState.Start:\r\n          // We're skipping any blank lines that start the first paragraph\r\n          if (!isBlankLine) {\r\n            state = SplitterState.AwaitingTrailer;\r\n          }\r\n          break;\r\n        case SplitterState.AwaitingTrailer:\r\n          // We already saw some content, so now we're looking for a blank line that starts the trailer\r\n          // at the end of this paragraph\r\n          if (isBlankLine) {\r\n            state = SplitterState.ReadingTrailer;\r\n          }\r\n          break;\r\n        case SplitterState.ReadingTrailer:\r\n          // We already found the trailer, so now we're looking for a non-blank line that will\r\n          // begin a new paragraph\r\n          if (!isBlankLine) {\r\n            // Start a new paragraph\r\n            currentParagraph = new DocParagraph({ configuration: oldParagraph.configuration });\r\n            outputNodes.push(currentParagraph);\r\n\r\n            state = SplitterState.AwaitingTrailer;\r\n          }\r\n          break;\r\n      }\r\n\r\n      // Append the line onto the current paragraph\r\n      for (let i: number = currentIndex; i < lineEndIndex; ++i) {\r\n        currentParagraph.appendNode(inputParagraphNodes[i]);\r\n      }\r\n\r\n      currentIndex = lineEndIndex;\r\n    }\r\n  }\r\n\r\n  private static _isWhitespace(node: DocNode): boolean {\r\n    switch (node.kind) {\r\n      case DocNodeKind.PlainText:\r\n        const docPlainText: DocPlainText = node as DocPlainText;\r\n        return ParagraphSplitter._whitespaceRegExp.test(docPlainText.text);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}\r\n", "import { TextRange } from './TextRange';\r\nimport { ParserContext } from './ParserContext';\r\nimport { LineExtractor } from './LineExtractor';\r\nimport { Tokenizer } from './Tokenizer';\r\nimport { NodeParser } from './NodeParser';\r\nimport { TSDocConfiguration } from '../configuration/TSDocConfiguration';\r\nimport { ParagraphSplitter } from './ParagraphSplitter';\r\n\r\n/**\r\n * The main API for parsing TSDoc comments.\r\n */\r\nexport class TSDocParser {\r\n  /**\r\n   * The configuration that was provided for the TSDocParser.\r\n   */\r\n  public readonly configuration: TSDocConfiguration;\r\n\r\n  public constructor(configuration?: TSDocConfiguration) {\r\n    if (configuration) {\r\n      this.configuration = configuration;\r\n    } else {\r\n      this.configuration = new TSDocConfiguration();\r\n    }\r\n  }\r\n\r\n  public parseString(text: string): ParserContext {\r\n    return this.parseRange(TextRange.fromString(text));\r\n  }\r\n\r\n  public parseRange(range: TextRange): ParserContext {\r\n    const parserContext: ParserContext = new ParserContext(this.configuration, range);\r\n\r\n    if (LineExtractor.extract(parserContext)) {\r\n      parserContext.tokens = Tokenizer.readTokens(parserContext.lines);\r\n\r\n      const nodeParser: NodeParser = new NodeParser(parserContext);\r\n      nodeParser.parse();\r\n\r\n      ParagraphSplitter.splitParagraphs(parserContext.docComment);\r\n    }\r\n\r\n    return parserContext;\r\n  }\r\n}\r\n", "export { DocNodeManager, IDocNodeDefinition, DocNodeConstructor } from './configuration/DocNodeManager';\r\nexport { TSDocConfiguration } from './configuration/TSDocConfiguration';\r\nexport {\r\n  ITSDocTagDefinitionParameters,\r\n  TSDocTagSyntaxKind,\r\n  TSDocTagDefinition\r\n} from './configuration/TSDocTagDefinition';\r\nexport { TSDocValidationConfiguration } from './configuration/TSDocValidationConfiguration';\r\n\r\nexport { StandardTags } from './details/StandardTags';\r\nexport { Standardization } from './details/Standardization';\r\nexport { StandardModifierTagSet } from './details/StandardModifierTagSet';\r\nexport { ModifierTagSet } from './details/ModifierTagSet';\r\n\r\nexport { PlainTextEmitter } from './emitters/PlainTextEmitter';\r\nexport { StringBuilder, IStringBuilder } from './emitters/StringBuilder';\r\nexport { TSDocEmitter } from './emitters/TSDocEmitter';\r\n\r\nexport * from './nodes';\r\n\r\nexport { ParserContext } from './parser/ParserContext';\r\nexport { ParserMessage, IParserMessageParameters } from './parser/ParserMessage';\r\nexport { ParserMessageLog } from './parser/ParserMessageLog';\r\nexport { TextRange, ITextLocation } from './parser/TextRange';\r\nexport { Token, TokenKind } from './parser/Token';\r\nexport { TokenSequence, ITokenSequenceParameters } from './parser/TokenSequence';\r\nexport { TSDocMessageId } from './parser/TSDocMessageId';\r\nexport { TSDocParser } from './parser/TSDocParser';\r\n\r\nexport { DocNodeTransforms } from './transforms/DocNodeTransforms';\r\n", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        var desc = Object.getOwnPropertyDescriptor(m, k);\r\n        if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n            desc = { enumerable: true, get: function() { return m[k]; } };\r\n        }\r\n        Object.defineProperty(o, k2, desc);\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    __classPrivateFieldIn = function (state, receiver) {\r\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n    exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\r\n});\r\n", "/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      \u0130: \"\\u0069\",\n      I: \"\\u0131\",\n      I\u0307: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      \u0130: \"\\u0069\",\n      I: \"\\u0131\",\n      I\u0307: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      \u012E: \"\\u012F\\u0307\",\n      \u00CC: \"\\u0069\\u0307\\u0300\",\n      \u00CD: \"\\u0069\\u0307\\u0301\",\n      \u0128: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n", "import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n", "import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function pascalCaseTransform(input: string, index: number) {\n  const firstChar = input.charAt(0);\n  const lowerChars = input.substr(1).toLowerCase();\n  if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n    return `_${firstChar}${lowerChars}`;\n  }\n  return `${firstChar.toUpperCase()}${lowerChars}`;\n}\n\nexport function pascalCaseTransformMerge(input: string) {\n  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\n\nexport function pascalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \"\",\n    transform: pascalCaseTransform,\n    ...options,\n  });\n}\n", "import {\n  pascalCase,\n  pascalCaseTransform,\n  pascalCaseTransformMerge,\n  Options,\n} from \"pascal-case\";\n\nexport { Options };\n\nexport function camelCaseTransform(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransform(input, index);\n}\n\nexport function camelCaseTransformMerge(input: string, index: number) {\n  if (index === 0) return input.toLowerCase();\n  return pascalCaseTransformMerge(input);\n}\n\nexport function camelCase(input: string, options: Options = {}) {\n  return pascalCase(input, {\n    transform: camelCaseTransform,\n    ...options,\n  });\n}\n", "/**\n * Upper case the first character of an input string.\n */\nexport function upperCaseFirst(input: string) {\n  return input.charAt(0).toUpperCase() + input.substr(1);\n}\n", "import { noCase, Options } from \"no-case\";\nimport { upperCaseFirst } from \"upper-case-first\";\n\nexport { Options };\n\nexport function capitalCaseTransform(input: string) {\n  return upperCaseFirst(input.toLowerCase());\n}\n\nexport function capitalCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \" \",\n    transform: capitalCaseTransform,\n    ...options,\n  });\n}\n", "/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\",\n    },\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      i: \"\\u0130\",\n    },\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      i\u0307: \"\\u0049\",\n      j\u0307: \"\\u004A\",\n      \u012F\u0307: \"\\u012E\",\n      i\u0307\u0300: \"\\u00CC\",\n      i\u0307\u0301: \"\\u00CD\",\n      i\u0307\u0303: \"\\u0128\",\n    },\n  },\n};\n\n/**\n * Localized upper case.\n */\nexport function localeUpperCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return upperCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return upperCase(str);\n}\n\n/**\n * Upper case as a function.\n */\nexport function upperCase(str: string) {\n  return str.toUpperCase();\n}\n", "import { noCase, Options } from \"no-case\";\nimport { upperCase } from \"upper-case\";\n\nexport { Options };\n\nexport function constantCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \"_\",\n    transform: upperCase,\n    ...options,\n  });\n}\n", "import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function dotCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \".\",\n    ...options,\n  });\n}\n", "import { capitalCase, Options } from \"capital-case\";\n\nexport { Options };\n\nexport function headerCase(input: string, options: Options = {}) {\n  return capitalCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n", "import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function paramCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n", "import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function pathCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"/\",\n    ...options,\n  });\n}\n", "import { noCase, Options } from \"no-case\";\nimport { upperCaseFirst } from \"upper-case-first\";\n\nexport { Options };\n\nexport function sentenceCaseTransform(input: string, index: number) {\n  const result = input.toLowerCase();\n  if (index === 0) return upperCaseFirst(result);\n  return result;\n}\n\nexport function sentenceCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \" \",\n    transform: sentenceCaseTransform,\n    ...options,\n  });\n}\n", "import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function snakeCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"_\",\n    ...options,\n  });\n}\n", "export * from \"camel-case\";\nexport * from \"capital-case\";\nexport * from \"constant-case\";\nexport * from \"dot-case\";\nexport * from \"header-case\";\nexport * from \"no-case\";\nexport * from \"param-case\";\nexport * from \"pascal-case\";\nexport * from \"path-case\";\nexport * from \"sentence-case\";\nexport * from \"snake-case\";\n", "/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[e\u00E9]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n", "// require = require('esm')(module);\n\nimport meow, { AnyFlags, TypedFlags } from 'meow';\nimport updateNotifier, { Package } from 'update-notifier';\n\n// import { loadSrcLaunchConfig } from \"@srclaunch/logic\";\nimport buildCommands from './commands/build';\nimport changesetCommands from './commands/changesets';\nimport configCommands from './commands/config';\nimport createCommands from './commands/create';\nimport deployCommands from './commands/deploy';\nimport developmentCommands from './commands/dev';\nimport docsCommands from './commands/docs';\nimport generateCommands from './commands/generate';\nimport helpCommands from './commands/help';\nimport infrastructureCommands from './commands/infrastructure';\nimport installCommands from './commands/install';\nimport modelCommands from './commands/models';\nimport projectCommands from './commands/project';\nimport releaseCommands from './commands/release';\nimport runCommands from './commands/run';\nimport testCommands from './commands/test';\nimport { Command, handleCommand } from './lib/command';\nimport { loadSrcLaunchConfig } from './lib/config';\nimport { InteractiveModeFlag, InteractiveModeFlagType } from './lib/flags';\n\nexport const helpMessage = `\nUsage\n  $ srclaunch <command>\n\nCommands\n  build - Build SrcLaunch project if srclaunch.configon is found in the current directory\n  models\n    * build - Build models into Sequelize models, Typescript definitions and JSON\n  test - Run tests and collect coverage\n\nTo view information for a specific command add \"help\" after the command name, for example:\n  $ srclaunch build help\n`;\n\nexport const cli = meow<InteractiveModeFlagType>(helpMessage, {\n  flags: {\n    ...InteractiveModeFlag,\n  },\n  importMeta: import.meta,\n});\n\nexport async function main() {\n  try {\n    const command = cli.input;\n    const flags = cli.flags;\n    const config = await loadSrcLaunchConfig();\n\n    updateNotifier({ pkg: cli.pkg as Package }).notify();\n\n    await handleCommand({\n      cli,\n      command,\n      commands: [\n        buildCommands,\n        changesetCommands,\n        configCommands,\n        createCommands,\n        deployCommands,\n        developmentCommands,\n        docsCommands,\n        generateCommands,\n        helpCommands,\n        infrastructureCommands,\n        installCommands,\n        modelCommands,\n        projectCommands,\n        releaseCommands,\n        runCommands,\n        testCommands,\n      ] as Command<unknown, Record<string, unknown> & TypedFlags<AnyFlags>>[],\n      config: {\n        ...config,\n        package: cli.pkg,\n      },\n      flags,\n    });\n  } catch (error) {\n    // const { waitUntilExit } = render(\n    //   // <FullScreen>\n    //   <Text>{err.message}</Text>,\n    //   // </FullScreen>,\n    // );\n    // await waitUntilExit();\n    console.error(error);\n  }\n}\n\nexport default main();\n\nexport { type Command, CommandType } from './lib/command';\n", "import {\n  BuildOptions,\n  BuildTool,\n  ESBuildOptions,\n  ProjectConfig,\n  ViteBuildOptions,\n} from '@srclaunch/types';\nimport * as fs from 'fs-extra';\nimport { TypedFlags } from 'meow';\n\nimport { build as esbuild } from '../lib/build/esbuild';\nimport { build as buildTypes } from '../lib/build/types';\nimport { build as vite } from '../lib/build/vite';\nimport { Command, CommandType } from '../lib/command';\n\ntype BuildFlags = TypedFlags<{\n  readonly clean: {\n    readonly alias: 'c';\n    readonly default: true;\n    readonly description: 'Clean build directory before building';\n    readonly type: 'boolean';\n  };\n  readonly types: {\n    readonly alias: 't';\n    readonly default: true;\n    readonly description: 'Build types definitions';\n    readonly type: 'boolean';\n  };\n}>;\n\nexport default new Command<ProjectConfig, BuildFlags>({\n  commands: [\n    new Command<ProjectConfig, BuildFlags>({\n      description: 'Compiles and optionally bundles a package using esbuild',\n      name: 'esbuild',\n      run: async ({\n        config,\n      }: {\n        readonly config: ProjectConfig;\n        readonly flags: BuildFlags;\n      }) => {\n        const options = config.build as BuildOptions | BuildOptions[];\n\n        if (!options) {\n          throw new Error('Missing build configuration');\n        }\n\n        if (typeof options === 'object' && !Array.isArray(options)) {\n          await esbuild(options as ESBuildOptions);\n        } else if (Array.isArray(options) && options) {\n          for (const build of options) {\n            await esbuild({\n              ...build,\n            } as ESBuildOptions);\n          }\n        }\n      },\n    }),\n    new Command<ProjectConfig, BuildFlags>({\n      description: 'Compiles and bundles a package using Vite',\n      name: 'vite',\n      run: async ({ config }) => {\n        const BuildOptions = config.build;\n\n        if (!BuildOptions) {\n          throw new Error('Missing build configuration');\n        }\n\n        if (typeof BuildOptions === 'object' && !Array.isArray(BuildOptions)) {\n          const options = BuildOptions as ViteBuildOptions;\n          await vite({\n            ...options,\n            library: options.library\n              ? typeof options.library === 'boolean'\n                ? { name: config.name }\n                : { name: config.name, ...options.library }\n              : false,\n          } as ViteBuildOptions);\n        } else if (Array.isArray(BuildOptions)) {\n          const options = BuildOptions as ViteBuildOptions[];\n\n          for (const build of options) {\n            await vite({\n              ...build,\n              library: build.library\n                ? typeof build.library === 'boolean'\n                  ? { name: config.name }\n                  : { name: config.name, ...build.library }\n                : false,\n            } as ViteBuildOptions);\n          }\n        }\n      },\n      type: CommandType.Project,\n    }),\n    new Command({\n      description: 'Builds Typescript definitions',\n      name: 'types',\n      run: async ({ config, flags }) => {\n        const BuildOptions = config.build as BuildOptions | BuildOptions[];\n\n        if (typeof BuildOptions === 'object' && !Array.isArray(BuildOptions)) {\n          const options = BuildOptions as BuildOptions;\n          if (options.clean) {\n            await fs.emptyDir(options.output?.directory ?? 'dist');\n          }\n          await buildTypes({\n            ...options,\n          });\n        } else if (Array.isArray(BuildOptions)) {\n          const options = BuildOptions as BuildOptions[];\n          for (const build of options) {\n            if (build.clean) {\n              await fs.emptyDir(build.output?.directory ?? 'dist');\n            }\n\n            if (build.types) {\n              await buildTypes({\n                ...build,\n              });\n            }\n          }\n        }\n      },\n    }),\n    new Command({\n      description: 'Shows help for build commands',\n      name: 'help',\n      run: async () => {\n        console.info(\n          'Available build commands are: lib, web-app, web-service, types, and help',\n        );\n      },\n      type: CommandType.Project,\n    }),\n  ],\n  description: 'Commands for building various types of projects',\n  name: 'build',\n  run: async ({\n    config,\n    flags,\n  }: {\n    readonly config: ProjectConfig;\n    readonly flags: BuildFlags;\n  }) => {\n    const BuildOptions = config.build as BuildOptions | BuildOptions[];\n\n    if (!BuildOptions) {\n      throw new Error('Missing build configuration');\n    }\n\n    if (typeof BuildOptions === 'object' && !Array.isArray(BuildOptions)) {\n      const options = BuildOptions as BuildOptions;\n      switch (options.tool) {\n        case BuildTool.Vite:\n          await vite({\n            ...options,\n            clean: options.clean ?? flags.clean,\n            library: options.library\n              ? typeof options.library === 'boolean'\n                ? { name: config.name }\n                : { name: config.name, ...options.library }\n              : false,\n          } as ViteBuildOptions);\n          break;\n        default: {\n          await esbuild({\n            ...options,\n            clean: options.clean ?? flags.clean,\n          } as ESBuildOptions);\n        }\n      }\n\n      if (options.types ?? flags.types) {\n        await buildTypes({\n          ...options,\n        });\n      }\n    } else if (Array.isArray(BuildOptions)) {\n      const options = BuildOptions as BuildOptions[];\n      for (const build of options) {\n        switch (build.tool) {\n          case BuildTool.Vite:\n            await vite({\n              ...build,\n              library: build.library\n                ? typeof build.library === 'boolean'\n                  ? { name: config.name }\n                  : { name: config.name, ...build.library }\n                : false,\n            } as ViteBuildOptions);\n            break;\n          default:\n            await esbuild(build as ESBuildOptions);\n        }\n\n        if (build.types) {\n          await buildTypes({\n            ...build,\n          });\n        }\n      }\n    }\n  },\n});\n", "import { Image } from '../';\n\nexport type Activity = {\n  readonly how?: string;\n  readonly what?: {\n    readonly image?: Image;\n    readonly label?: string;\n    readonly name?: Activities;\n    readonly to?: string;\n  };\n  readonly when?: string;\n  readonly where?: string;\n  readonly who?: {\n    readonly image?: Image;\n    readonly name?: string;\n    readonly to?: string;\n  };\n  readonly why?: string;\n};\n\nexport enum Activities {\n  Comment = 'comment',\n  Create = 'create',\n  Delete = 'delete',\n  Edit = 'edit',\n  Invoice = 'invoice',\n  Message = 'message',\n  PageView = 'pageView',\n  Paid = 'paid',\n  Payment = 'payment',\n  Purchase = 'purchase',\n  Referral = 'referral',\n  Renewal = 'renewal',\n  Signup = 'signup',\n  Subscription = 'subscription',\n  Upgrade = 'upgrade',\n}\n", "import { UserAccessDevice } from '../../user/access';\nimport { Analytics, AnalyticsEvent } from '..';\n\nexport enum PageLeaveMethod {\n  CloseTab = 'close-tab',\n  ExternalLink = 'external-link',\n  NavigateAway = 'navigate-away',\n  Unknown = 'unknown',\n}\n\nexport type PageViewEvent = AnalyticsEvent<{\n  readonly data: {\n    readonly device: UserAccessDevice;\n    readonly referrer?: string;\n  };\n  readonly description: 'Occurs when a person views a page in a Website or application.';\n  readonly id: string;\n  readonly name: Analytics.PageView;\n}>;\n\nexport type PageLeaveEvent = AnalyticsEvent<{\n  readonly data: {\n    readonly device: UserAccessDevice;\n    readonly leaveMethod: PageLeaveMethod;\n  };\n  readonly description: 'Occurs when a person leaves a page.';\n  readonly id: string;\n  readonly name: Analytics.PageLeave;\n}>;\n\nexport type WebsiteVisitEvent = AnalyticsEvent<{\n  readonly description: 'Occurs when a person a website.';\n  readonly device: UserAccessDevice;\n  readonly id: string;\n  readonly name: Analytics.WebsiteVisit;\n}>;\n", "import { ISO8601 } from '../data/primitive';\n\nexport enum Analytics {\n  Business = 'business',\n  Engineering = 'engineering',\n  Exception = 'exception',\n  LogMessage = 'log-message',\n  Marketing = 'marketing',\n  PageLeave = 'page-leave',\n  PageView = 'page-view',\n  Product = 'product',\n  QualityManagement = 'quality-management',\n  UserAccess = 'user-access',\n  UserLogin = 'user-login',\n  UserLogout = 'user-logout',\n  UserPreferencesChanged = 'user-preferences-changed',\n  UserSignup = 'user-signup',\n  WebsiteVisit = 'website-visit',\n}\n\nexport type AnalyticsEvent<T = Record<string, unknown>> = T & {\n  readonly created: ISO8601;\n  readonly data?: Record<string, unknown>;\n  readonly id?: string;\n  readonly message?: string;\n  readonly name: Analytics;\n};\n\nexport * from './business';\nexport * from './engineering';\nexport * from './marketing';\nexport * from './product';\nexport * from './user';\nexport * from './web';\n", "export enum BuildFormat {\n  CJS = 'cjs',\n  ESM = 'esm',\n  IIFE = 'iife',\n  UMD = 'umd',\n}\n", "export enum Platform {\n  Browser = 'browser',\n  Node = 'node',\n  Universal = 'universal',\n}\n", "export enum BuildTarget {\n  ES2015 = 'es2015',\n  ES2016 = 'es2016',\n  ES2017 = 'es2017',\n  ES2018 = 'es2018',\n  ES2019 = 'es2019',\n  ES2020 = 'es2020',\n  ES2021 = 'es2021',\n  ES2022 = 'es2022',\n  ES5 = 'es5',\n  ES6 = 'es6',\n  ESNext = 'esnext',\n  Latest = 'latest',\n  Modules = 'modules',\n}\n", "export enum BuildTool {\n  ESBuild = 'esbuild',\n  Vite = 'vite',\n}\n", "export enum PaymentIntentStatus {\n  Canceled = 'canceled',\n  Processing = 'processing',\n  RequiresAction = 'requires_action',\n  RequiresCapture = 'requires_capture',\n  RequiresConfirmation = 'requires_confirmation',\n  RequiresPaymentMethod = 'requires_payment_method',\n  Succeeded = 'succeeded',\n}\n\nexport type PaymentMethod = {\n  readonly brand: string;\n  readonly country: string;\n  readonly expirationMonth: number;\n  readonly expirationYear: number;\n  readonly id: string;\n  readonly lastFourDigits: string;\n  readonly stripeId: string;\n  readonly threeDSecureUsageSupported: boolean;\n};\n", "import { Person } from '../../../people/person';\nimport { PaymentMethod } from '../payment-method';\nimport { Product } from '../product/index';\n\nexport enum SubscriptionStatus {\n  Active = 'active',\n  Canceled = 'canceled',\n  Incomplete = 'incomplete',\n  IncompleteExpired = 'incomplete_expired',\n  PastDue = 'past_due',\n  Trialing = 'trialing',\n  Unpaid = 'unpaid',\n}\n\nexport enum SubscriptionPlanDuration {\n  Lifetime = 'lifetime',\n  Monthly = 'monthly',\n  Quarterly = 'quarterly',\n  Yearly = 'yearly',\n}\n\nexport type Subscription = {\n  readonly active: boolean;\n  readonly canceled: boolean;\n  readonly endDate: Date;\n  readonly id: string;\n  readonly paymentMethodId: PaymentMethod['id'];\n  readonly personId: Person['id'];\n  readonly planDuration: SubscriptionPlanDuration;\n  readonly productId: Product['id'];\n  readonly renewalDate: Date;\n  readonly status: SubscriptionStatus;\n  readonly trialMembershipActive: boolean;\n  readonly trialMembershipEndDate: Date;\n};\n", "export enum ChangeType {\n  /**\n   * A change created from an automated source.\n   */\n  Automated = 'automated',\n  /**\n   * Change that fix a bug\n   */\n  BugFix = 'fix',\n  /**\n   * Change that affect build components like build tool, ci pipeline, dependencies, project version\n   */\n  Build = 'build',\n  /**\n   * Miscellaneous change e.g. modifying .gitignore\n   */\n  Chore = 'chore',\n  /**\n   * Change that affect documentation only\n   */\n  Documentation = 'docs',\n  /**\n   * Change that adds a new feature\n   */\n  Feature = 'feature',\n  /**\n   * Change that adds a new feature\n   */\n  Performance = 'perf',\n  /**\n   * Change that rewrites/restructures your code, however does not change any behaviour\n   */\n  Refactor = 'refactor',\n  /**\n   * Change that affects infrastructure, deployments, or releases\n   */\n  Release = 'release',\n  /**\n   * Change that rolls back another change\n   */\n  RollBack = 'revert',\n  /**\n   * Change to code that do not affect the meaning (white-space, formatting, missing semi-colons, etc)\n   */\n  Style = 'style',\n  /**\n   * Change that add missing tests or fix/improve existing tests\n   */\n  Test = 'test',\n}\n\nexport type ChangesetConfig = {\n  readonly logs: {\n    readonly path: string;\n  };\n  readonly types: ReadonlyArray<{\n    readonly [key: string]: {\n      readonly hidden?: boolean | undefined;\n      readonly section?: string | undefined;\n      readonly type: string;\n    };\n  }>;\n};\n\nexport type Change = {\n  readonly diff: {\n    readonly added: readonly string[];\n    readonly modified: readonly string[];\n    readonly removed: readonly string[];\n  };\n  readonly id: string;\n};\n\nexport type Changeset = {\n  readonly changes?: readonly Change[];\n  readonly files?: string | readonly string[];\n  readonly id?: string;\n  readonly message: string;\n  readonly remote?: {\n    readonly synced?: boolean;\n  };\n  readonly scope?: string;\n  readonly type: ChangeType;\n};\n", "import { ISO8601String } from '../../i18n/date';\nimport { Person } from '../../people/person';\n\nexport enum ChatMessageStatus {\n  Delivered = 'delivered',\n  Read = 'read',\n  Sending = 'sending',\n  Sent = 'sent',\n}\n\nexport enum ChatMessageType {\n  Audio = 'audio',\n  File = 'file',\n  Image = 'image',\n  Text = 'text',\n  Video = 'video',\n}\n\nexport enum ChatMessageAttachmentType {\n  Audio = 'audio',\n  File = 'file',\n  Image = 'image',\n  Video = 'video',\n}\n\nexport enum ChatMessageReactionType {\n  Angry = 'angry',\n  Laugh = 'laugh',\n  Like = 'like',\n  Love = 'love',\n  Sad = 'sad',\n  Wink = 'wink',\n  Wow = 'wow',\n  Yay = 'yay',\n}\n\nexport type ChatMessage = {\n  // The message attachments.\n  readonly attachments?: readonly {\n    // The attachment type.\n    readonly type: ChatMessageAttachmentType;\n\n    // The attachment URL.\n    readonly url: string;\n  }[];\n\n  // The message text.\n  readonly body: string;\n\n  // The time the message was sent.\n  readonly date: ISO8601String;\n\n  // Unique identifier for the message.\n  readonly id?: string;\n\n  // The message reactions.\n  readonly reactions?: readonly {\n    // The reaction type.\n    readonly type: ChatMessageReactionType;\n  }[];\n\n  readonly recipients?: readonly Person[];\n\n  // The user who sent the message.\n  readonly sender?: {\n    readonly avatar?: string;\n    readonly id: string;\n    readonly name: string;\n  };\n\n  // The message status.\n  readonly status?: ChatMessageStatus;\n\n  // Subject of the message.\n  readonly subject?: string;\n  // The type of message.\n  readonly type?: ChatMessageType;\n};\n", "export enum CommunicationMedium {\n  Email = 'email',\n  PhoneNumber = 'phone-number',\n}\n", "import { Condition } from '../index';\n\nexport enum AlgorithmHashCondition {\n  IsAlgorithmHash = Condition.IsAlgorithmHash,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SemanticVersionCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsString = Condition.IsString,\n}\n\nexport enum UUIDCondition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsUUID = Condition.IsUUID,\n}\n\nexport enum MD5Condition {\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMD5 = Condition.IsMD5,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum BooleanCondition {\n  IsBoolean = Condition.IsBoolean,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum ColorCondition {\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsNotNull = Condition.IsNotNull,\n  IsRGBColor = Condition.IsRGBColor,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\nexport enum DateCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DateRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsDateRange = Condition.IsDateRange,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum DateTimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDate = Condition.IsDate,\n  IsEqual = Condition.IsEqual,\n  IsNotDate = Condition.IsNotDate,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNotToday = Condition.IsNotToday,\n  IsThisWeek = Condition.IsThisWeek,\n  IsThisMonth = Condition.IsThisMonth,\n  IsThisQuarter = Condition.IsThisQuarter,\n  IsThisYear = Condition.IsThisYear,\n  IsToday = Condition.IsToday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum DayOfMonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDayOfMonth = Condition.IsDayOfMonth,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsToday = Condition.IsToday,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum MonthCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMonth = Condition.IsMonth,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisMonth = Condition.IsThisMonth,\n}\n\nexport enum TimeCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTime = Condition.IsTime,\n}\n\nexport enum TimeRangeCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsTime = Condition.IsTime,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum TimeOfDayCondition {\n  IsAfter = Condition.IsAfter,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrAfter = Condition.IsBeforeOrAfter,\n  IsBetween = Condition.IsBetween,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsTimeOfDay = Condition.IsTimeOfDay,\n  IsTimeRange = Condition.IsTimeRange,\n}\n\nexport enum WeekdayCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n}\n\nexport enum YearCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsThisYear = Condition.IsThisYear,\n  IsYear = Condition.IsYear,\n}\n", "import { Condition } from '../index';\n\nexport enum HexadecimalCondition {\n  IsEqual = Condition.IsEqual,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum JSONCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MarkdownCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsMarkdown = Condition.IsMarkdown,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from \"../../index\";\n\nexport enum CurrencyCondition {\n  IsBetween = Condition.IsBetween,\n  IsCurrency = Condition.IsCurrency,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsISO8601 = Condition.IsISO8601,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n}\n\nexport enum BitcoinAddressCondition {\n  IsBitcoinAddress = Condition.IsBitcoinAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum EthereumAddressCondition {\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from \"../../index\";\n\nexport enum LanguageCondition {\n  IsEqual = Condition.IsEqual,\n  IsJSON = Condition.IsJSON,\n  IsLanguage = Condition.IsLanguage,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from \"../../index\";\n\nexport enum CityCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum CountryCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsCountry = Condition.IsCountry,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum LatitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum LongitudeCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum PostalCodeCondition {\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsPostalCode = Condition.IsPostalCode,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum ProvinceCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsProvince = Condition.IsProvince,\n  IsString = Condition.IsString,\n}\n\nexport enum StateCondition {\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsState = Condition.IsState,\n  IsString = Condition.IsString,\n}\n\nexport enum StreetAddressCondition {\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n\n  IsString = Condition.IsString,\n  IsStreetAddress = Condition.IsStreetAddress,\n}\n", "import { Condition } from '../index';\n\nexport enum MenuCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum TagsCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n", "import { Condition } from '../index';\n\nexport enum DataURICondition {\n  Contains = Condition.Contains,\n  IsDataURI = Condition.IsDataURI,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum DomainNameCondition {\n  Contains = Condition.Contains,\n  IsDomainName = Condition.IsDomainName,\n  IsEqual = Condition.IsEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum EmailCondition {\n  Contains = Condition.Contains,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum IPAddressRangeCondition {\n  IsEqual = Condition.IsEqual,\n  IsIPAddressRange = Condition.IsIPAddressRange,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum PortCondition {\n  IsEqual = Condition.IsEqual,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInteger = Condition.IsInteger,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n}\n\nexport enum MACAddressCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MagnetURICondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum MimeTypeCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsMimeType = Condition.IsMimeType,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\nexport enum SlugCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsSlug = Condition.IsSlug,\n}\n\nexport enum URLCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsURL = Condition.IsURL,\n}\n", "import { Condition } from '../index';\n\nexport enum NumberCondition {\n  IsAfter = Condition.IsAfter,\n  IsAfterOrEqual = Condition.IsAfterOrEqual,\n  IsBefore = Condition.IsBefore,\n  IsBeforeOrEqual = Condition.IsBeforeOrEqual,\n  IsBetween = Condition.IsBetween,\n  IsDecimal = Condition.IsDecimal,\n  IsDivisibleBy = Condition.IsDivisibleBy,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsEvenNumber = Condition.IsEvenNumber,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsInt = Condition.IsInteger,\n  IsISBN = Condition.IsISBN,\n  IsISMN = Condition.IsISMN,\n  IsISSN = Condition.IsISSN,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsMACAddress = Condition.IsMACAddress,\n  IsNumber = Condition.IsNumber,\n  IsNegativeNumber = Condition.IsNegativeNumber,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsOddNumber = Condition.IsOddNumber,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPositiveNumber = Condition.IsPositiveNumber,\n  IsPostalCode = Condition.IsPostalCode,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSSN = Condition.IsSSN,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsUUID = Condition.IsUUID,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n\nexport enum FloatCondition {\n  IsEqual = Condition.IsEqual,\n  IsFloat = Condition.IsFloat,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n\nexport enum IntegerCondition {\n  IsEqual = Condition.IsEqual,\n  IsInteger = Condition.IsInteger,\n  IsGreaterThan = Condition.IsGreaterThan,\n  IsGreaterThanOrEqual = Condition.IsGreaterThanOrEqual,\n  IsLessThan = Condition.IsLessThan,\n  IsLessThanOrEqual = Condition.IsLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n}\n", "import { Condition } from '../index';\n\nexport enum CreditCardCondition {\n  IsCreditCard = Condition.IsCreditCard,\n  IsEqual = Condition.IsEqual,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum EmailAddressCondition {\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n}\n\nexport enum LicensePlateNumberCondition {\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PassportNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PasswordCondition {\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsInList = Condition.IsInList,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsStrongPassword = Condition.IsStrongPassword,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum PhoneNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n\nexport enum SocialSecurityNumberCondition {\n  IsNotNull = Condition.IsNotNull,\n  IsSSN = Condition.IsSSN,\n  IsString = Condition.IsString,\n  IsRegexMatch = Condition.IsRegexMatch,\n}\n", "import { Condition } from '../../../index';\n\nexport enum AirportCondition {\n  IsAirport = Condition.IsAirport,\n  IsAlpha = Condition.IsAlpha,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n", "import { Condition } from '../index';\n\n/**\n * Bank Identification Code\n *\n * @remarks\n * BIC means Bank Identification Code, or Bank Identifier Code.\n * It is an 8 to 11-character code that is used to identify a\n * specific bank when you make an international transaction.\n * */\nexport enum BICCondition {\n  Contains = Condition.Contains,\n  IsBIC = Condition.IsBIC,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * European Article Number\n *\n * @remarks\n * The International Article Number (also known as European\n * Article Number or EAN) is a standard describing a barcode\n * symbology and numbering system used in global trade to identify\n * a specific retail product type, in a specific packaging\n * configuration, from a specific manufacturer.\n *\n * The most commonly used EAN standard is the thirteen-digit EAN-13\n * */\nexport enum EANCondition {\n  Contains = Condition.Contains,\n  IsEAN = Condition.IsEAN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Employer Identification Number\n *\n * @remarks\n *\n * The Employer Identification Number (EIN), also known as the Federal\n * Employer Identification Number (FEIN) or the Federal Tax Identification\n * Number, is a unique nine-digit number assigned by the Internal Revenue\n * Service (IRS) to business entities operating in the United States for the\n * purposes of identification.\n */\nexport enum EINCondition {\n  Contains = Condition.Contains,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Bank Account Number\n *\n * @remarks\n *\n * An IBAN, or international bank account number, is a standard\n * international numbering system developed to identify an overseas\n * bank account. The number starts with a two-digit country code, then\n * two numbers, followed by several more alphanumeric characters.\n */\nexport enum IBANCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Book Number\n *\n * @remarks\n *\n * ISBN is the acronym for International Standard Book Number. This\n * 10 or 13-digit number identifies a specific book, an edition of a\n * book, or a book-like product (such as an audiobook). Since 1970 each\n * published book has a unique ISBN. In 2007, assigned ISBNs changed\n * from 10 digits to 13.\n */\nexport enum ISBNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISBN = Condition.IsISBN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Securities Identification Number\n *\n * @remarks\n * An ISIN is a 12-digit alphanumeric code that uniquely identifies a\n * specific security. The numbers are allocated by a country's respective\n * national numbering agency (NNA). An ISIN is not the same as the ticker\n * symbol, which identifies the stock at the exchange level.\n */\nexport enum ISINCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISIN = Condition.IsISIN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Music Number\n *\n * @remarks\n * The International Standard Music Number or ISMN (ISO 10957) is a\n * thirteen-character alphanumeric identifier for printed music developed\n * by ISO.\n */\nexport enum ISMNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISMN = Condition.IsISMN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * International Standard Serial Number\n *\n * @remarks\n * An International Standard Serial Number (ISSN) is an eight-digit\n * serial number used to uniquely identify a serial publication,\n * such as a magazine. The ISSN is especially helpful in distinguishing\n * between serials with the same title.\n */\nexport enum ISSNCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsISSN = Condition.IsISSN,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n}\n\n/**\n * Tax Identification Number\n *\n * @remarks\n * A Tax Identification Number (TIN) is a nine-digit number used as a\n * tracking number by the Internal Revenue Service (IRS)\n */\nexport enum TaxIDNumberCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n}\n\n/**\n * Value Added Tax (VAT) Registration Number\n *\n * @remarks\n * A VAT registration number is a nine-digit number used to identify\n * a business or person in the European Union.\n */\nexport enum VATCondition {\n  Contains = Condition.Contains,\n  IsEqual = Condition.IsEqual,\n  IsInList = Condition.IsInList,\n  IsNotEqual = Condition.IsNotEqual,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsString = Condition.IsString,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n}\n", "import { Condition } from '../index';\n\n// TODO: Example the number of conditions a string can support\nexport enum StringCondition {\n  Contains = Condition.Contains,\n  HasNumberCount = Condition.HasNumberCount,\n  HasLowercaseCount = Condition.HasLowercaseCount,\n  HasLetterCount = Condition.HasLetterCount,\n  HasSpacesCount = Condition.HasSpacesCount,\n  HasSymbolCount = Condition.HasSymbolCount,\n  HasUppercaseCount = Condition.HasUppercaseCount,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsAscii = Condition.IsAscii,\n  IsBase64 = Condition.IsBase64,\n  IsColor = Condition.IsColor,\n  IsComplexEnough = Condition.IsComplexEnough,\n  IsCreditCard = Condition.IsCreditCard,\n  IsDataURI = Condition.IsDataURI,\n  IsDomainName = Condition.IsDomainName,\n  IsEmailAddress = Condition.IsEmailAddress,\n  IsEthereumAddress = Condition.IsEthereumAddress,\n  IsEAN = Condition.IsEAN,\n  IsEIN = Condition.IsEIN,\n  IsEqual = Condition.IsEqual,\n  IsIBAN = Condition.IsIBAN,\n  IsHSLColor = Condition.IsHSLColor,\n  IsHexColor = Condition.IsHexColor,\n  IsHexadecimal = Condition.IsHexadecimal,\n  IsIdentityCardCode = Condition.IsIdentityCardCode,\n  IsIMEI = Condition.IsIMEI,\n  IsInList = Condition.IsInList,\n  IsIPAddress = Condition.IsIPAddress,\n  IsInIPAddressRange = Condition.IsInIPAddressRange,\n  IsISBN = Condition.IsISBN,\n  IsISIN = Condition.IsISIN,\n  IsISMN = Condition.IsISMN,\n  IsISRC = Condition.IsISRC,\n  IsISSN = Condition.IsISSN,\n  IsLanguage = Condition.IsLanguage,\n  IsLatitude = Condition.IsLatitude,\n  IsLongitude = Condition.IsLongitude,\n  IsLengthEqual = Condition.IsLengthEqual,\n  IsLengthGreaterThan = Condition.IsLengthGreaterThan,\n  IsLengthGreaterThanOrEqual = Condition.IsLengthGreaterThanOrEqual,\n  IsLengthLessThan = Condition.IsLengthLessThan,\n  IsLengthLessThanOrEqual = Condition.IsLengthLessThanOrEqual,\n  IsLicensePlateNumber = Condition.IsLicensePlateNumber,\n  IsLowercase = Condition.IsLowercase,\n  IsOctal = Condition.IsOctal,\n  IsMACAddress = Condition.IsMACAddress,\n  IsMD5 = Condition.IsMD5,\n  IsMagnetURI = Condition.IsMagnetURI,\n  IsMarkdown = Condition.IsMarkdown,\n  IsMimeType = Condition.IsMimeType,\n  IsMonth = Condition.IsMonth,\n  IsNotInIPAddressRange = Condition.IsNotInIPAddressRange,\n  IsNotInList = Condition.IsNotInList,\n  IsNotNull = Condition.IsNotNull,\n  IsNotRegexMatch = Condition.IsNotRegexMatch,\n  IsNumber = Condition.IsNumber,\n  IsNumeric = Condition.IsNumeric,\n  IsPassportNumber = Condition.IsPassportNumber,\n  IsPhoneNumber = Condition.IsPhoneNumber,\n  IsPort = Condition.IsPort,\n  IsPostalCode = Condition.IsPostalCode,\n  IsProvince = Condition.IsProvince,\n  IsRegexMatch = Condition.IsRegexMatch,\n  IsSemanticVersion = Condition.IsSemanticVersion,\n  IsSlug = Condition.IsSlug,\n  IsSSN = Condition.IsSSN,\n  IsState = Condition.IsState,\n  IsStreetAddress = Condition.IsStreetAddress,\n  IsString = Condition.IsString,\n  IsTaxIDNumber = Condition.IsTaxIDNumber,\n  IsURL = Condition.IsURL,\n  IsUUID = Condition.IsUUID,\n  IsUppercase = Condition.IsUppercase,\n  IsVATIDNumber = Condition.IsVATIDNumber,\n  IsWeekday = Condition.IsWeekday,\n  IsWeekend = Condition.IsWeekend,\n  IsYear = Condition.IsYear,\n}\n\nexport enum LongTextCondition {\n  Contains = Condition.Contains,\n  IsAlpha = Condition.IsAlpha,\n  IsAlphanumeric = Condition.IsAlphanumeric,\n  IsInList = Condition.IsInList,\n  IsMarkdown = Condition.IsMarkdown,\n  IsNotInList = Condition.IsNotInList,\n  IsNumeric = Condition.IsNumeric,\n  IsLowercase = Condition.IsLowercase,\n  IsString = Condition.IsString,\n  IsUppercase = Condition.IsUppercase,\n}\n", "export enum Condition {\n  Contains = 'contains',\n  HasCharacterCount = 'has-character-count',\n  HasLetterCount = 'has-letter-count',\n  HasLowercaseCount = 'has-lowercase-count',\n  HasNumberCount = 'has-number-count',\n  HasSpacesCount = 'has-spaces-count',\n  HasSymbolCount = 'has-symbol-count',\n  HasUppercaseCount = 'has-uppercase-count',\n  IsAfter = 'is-after',\n  IsAfterOrEqual = 'is-after-or-equal',\n  IsAirport = 'is-airport',\n  IsAlgorithmHash = 'is-algorithm-hash',\n  IsAlpha = 'is-alpha',\n  IsAlphanumeric = 'is-alphanumeric',\n  IsAscii = 'is-ascii',\n  IsBIC = 'is-bic',\n  IsBase64 = 'is-base-64',\n  IsBefore = 'is-before',\n  IsBeforeOrAfter = 'is-before-or-after',\n  IsBeforeOrEqual = 'is-before-or-equal',\n  IsBetween = 'is-between',\n  IsBitcoinAddress = 'is-bitcoin-address',\n  IsBoolean = 'is-boolean',\n  IsColor = 'is-color',\n  IsComplexEnough = 'is-complex-enough',\n  IsCountry = 'is-country',\n  IsCreditCard = 'is-credit-card',\n  IsCurrency = 'is-currency',\n  IsDataURI = 'is-data-uri',\n  IsDate = 'is-date',\n  IsDateRange = 'is-date-range',\n  IsDateTime = 'is-date-time',\n  IsDayOfMonth = 'is-day-of-month',\n  IsDecimal = 'is-decimal',\n  IsDivisibleBy = 'is-divisible-by',\n  IsDomainName = 'is-domain-name',\n  IsEAN = 'is-ean',\n  IsEIN = 'is-ein',\n  IsEmailAddress = 'is-email-address',\n  IsEqual = 'is-equal',\n  IsEthereumAddress = 'is-ethereum-address',\n  IsEvenNumber = 'is-even-number',\n  IsFloat = 'is-float',\n  IsGreaterThan = 'greater-than',\n  IsGreaterThanOrEqual = 'greater-than-or-equal',\n  IsHSLColor = 'is-hsl-color',\n  IsHexColor = 'is-hex-color',\n  IsHexadecimal = 'is-hexadecimal',\n  IsIBAN = 'is-iban',\n  IsIMEI = 'is-imei',\n  IsIPAddress = 'is-ip-address',\n  IsIPAddressRange = 'is-ip-address-range',\n  IsISBN = 'is-isbn',\n  IsISIN = 'is-isin',\n  IsISMN = 'is-ismn',\n  IsISO31661Alpha2 = 'is-iso-31661-alpha-2',\n  IsISO31661Alpha3 = 'is-iso-31661-alpha-3',\n  IsISO4217 = 'is-iso-4217',\n  IsISO8601 = 'is-iso-8601',\n  IsISRC = 'is-isrc',\n  IsISSN = 'is-issn',\n  IsIdentityCardCode = 'is-identity-card-code',\n  IsInIPAddressRange = 'is-in-ip-address-range',\n  IsInList = 'is-in-list',\n  IsInTheLast = 'is-in-the-last',\n  IsInteger = 'is-integer',\n  IsJSON = 'is-json',\n  IsLanguage = 'is-language',\n  IsLatitude = 'is-latitude',\n  IsLengthEqual = 'is-length-equal',\n  IsLengthGreaterThan = 'is-length-greater-than',\n  IsLengthGreaterThanOrEqual = 'is-length-great-than-or-equal',\n  IsLengthLessThan = 'is-length-less-than',\n  IsLengthLessThanOrEqual = 'is-length-less-than-or-equal',\n  IsLessThan = 'less-than',\n  IsLessThanOrEqual = 'less-than-or-equal',\n  IsLicensePlateNumber = 'is-license-plate-number',\n  IsLongitude = 'is-longitude',\n  IsLowercase = 'is-lowercase',\n  IsMACAddress = 'is-mac-address',\n  IsMD5 = 'is-md5',\n  IsMagnetURI = 'is-magnet-uri',\n  IsMarkdown = 'is-markdown',\n  IsMimeType = 'is-mime-type',\n  IsMonth = 'is-month',\n  IsNegativeNumber = 'is-negative-number',\n  IsNotDate = 'is-not-date',\n  IsNotEqual = 'is-not-equal',\n  IsNotInIPAddressRange = 'is-not-in-ip-address-range',\n  IsNotInList = 'is-not-in-list',\n  IsNotNull = 'is-not-null',\n  IsNotRegexMatch = 'is-not-regex-match',\n  IsNotToday = 'is-not-today',\n  IsNumber = 'is-number',\n  IsNumeric = 'is-numeric',\n  IsOctal = 'is-octal',\n  IsOddNumber = 'is-odd-number',\n  IsPassportNumber = 'is-passport-number',\n  IsPhoneNumber = 'is-phone-number',\n  IsPort = 'is-port',\n  IsPositiveNumber = 'is-positive-number',\n  IsPostalCode = 'is-postal-code',\n  IsProvince = 'is-province',\n  IsRGBColor = 'is-rgb-color',\n  IsRegexMatch = 'is-regex-match',\n  IsRequired = 'is-required',\n  IsSSN = 'is-ssn',\n  IsSemanticVersion = 'is-semantic-version',\n  IsSlug = 'is-slug',\n  IsState = 'is-state',\n  IsStreetAddress = 'is-street-address',\n  IsString = 'is-string',\n  IsStrongPassword = 'is-strong-password',\n  IsTags = 'is-tags',\n  IsTaxIDNumber = 'is-tax-id-number',\n  IsThisMonth = 'is-this-month',\n  IsThisQuarter = 'is-this-quarter',\n  IsThisWeek = 'is-this-week',\n  IsThisWeekend = 'is-this-weekend',\n  IsThisYear = 'is-this-year',\n  IsTime = 'is-time',\n  IsTimeOfDay = 'is-time-of-day',\n  IsTimeRange = 'is-time-range',\n  IsToday = 'is-today',\n  IsURL = 'is-url',\n  IsUUID = 'is-uuid',\n  IsUppercase = 'is-uppercase',\n  IsUsernameAvailable = 'is-username-available',\n  IsVATIDNumber = 'is-vat-id-number',\n  IsValidStreetAddress = 'is-valid-street-address',\n  IsWeekday = 'is-weekday',\n  IsWeekend = 'is-weekend',\n  IsYear = 'is-year',\n}\n\nexport enum AuthenticationCondition {\n  IsAuthenticated = 'is-authenticated',\n  IsNotAuthenticated = 'is-not-authenticated',\n  IsUsernameAvailable = 'is-username-available',\n  PasswordMismatch = 'password-mismatch',\n}\n\nexport * from './primitive';\n", "import { CurrencyCode } from '../../i18n/currency';\nimport { Person } from '../../people/person';\n\nexport enum DataPointMetric {\n  AccountBalance = 'AccountBalance',\n  UserAssets = 'UserAssets',\n  UserCreditCardDebt = 'UserCreditCardDebt',\n  UserCreditLimit = 'UserCreditLimit',\n  UserCreditUtilization = 'UserCreditUtilization',\n  UserDebt = 'UserDebt',\n  UserInvestments = 'UserInvestments',\n  UserRetirement = 'UserRetirement',\n  UserSavings = 'UserSavings',\n}\n\nexport type DataPoint = {\n  readonly currencyCode?: CurrencyCode;\n  readonly date: Date;\n  readonly id: string;\n  readonly metric: DataPointMetric;\n  readonly personId: Person['id'];\n  readonly value: number;\n};\n", "export enum DefaultValue {\n  DateTime = 'date_time',\n  False = 'false',\n  True = 'true',\n  UniqueId = 'unique_id',\n}\n", "import { ISO8601 } from '../primitive';\nimport { ModelField } from './field';\nimport { Relationship } from './relationship';\n\nexport enum ModelType {\n  DomainModel = 'domain_entity',\n  GenericModel = 'generic_entity',\n}\n\nexport type ModelProps<T = {}> = T & {\n  readonly created?: ISO8601;\n  readonly description?: string;\n  readonly fields: Record<string, ModelField>;\n  readonly id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  readonly name: string;\n  readonly relationships?: Relationship;\n  readonly updated?: ISO8601;\n};\n\nexport class Model implements ModelProps {\n  readonly created?: ISO8601;\n  readonly description?: string;\n  readonly fields: Record<string, ModelField>;\n  readonly id?: string; // This won't be optional when entities are stored in a database instead of a file.\n  readonly name: string;\n  readonly relationships?: Relationship;\n  readonly updated?: ISO8601;\n\n  constructor(props: ModelProps) {\n    const { created, description, fields, name, id, relationships, updated } =\n      props;\n\n    this.created = created;\n    this.description = description;\n    this.fields = fields;\n    this.id = id;\n    this.name = name;\n    this.relationships = relationships;\n    this.updated = updated;\n  }\n}\n\nexport * from './defaults';\nexport * from './field';\nexport * from './relationship';\n", "import { CurrencyCode } from '../../i18n/currency';\nimport { ISO8601String } from '../../i18n/date';\nimport { LanguageCode } from '../../i18n/language';\nimport { CountryCode } from '../../i18n/locale/country';\nimport { TimezoneRegions } from '../../i18n/time/region';\n\nexport type MenuItem = {\n  readonly label: string;\n  readonly to?: string;\n  readonly value?: boolean | number | string;\n};\n\nexport type AirportCode = string;\nexport type BankIDCode = string;\nexport type BitcoinAddress = string;\nexport type Boolean = boolean;\nexport type City = string;\nexport type Color = string;\nexport type CreditCard = string;\nexport type CurrencyAmount = number;\nexport type DataURI = string;\nexport type Date = ISO8601String;\nexport type DateRange = readonly ISO8601String[];\nexport type DateTime = ISO8601String;\nexport type DayOfMonth = string;\nexport type DomainName = string;\nexport type EmailAddress = string;\nexport type EthereumAddress = string;\nexport type EAN = string;\nexport type EIN = string;\nexport type Float = number;\nexport type GeographicCoordinate = number;\nexport type GeographicCoordinates = readonly number[];\nexport type GitRepositoryURL = string;\nexport type HSLColor = string;\nexport type HexColor = string;\nexport type Hexadecimal = string;\nexport type IBAN = string;\nexport type IMEI = number;\nexport type IPAddress = string;\nexport type IPAddressRange = readonly string[];\nexport type ISBN = string;\nexport type ISIN = string;\nexport type ISMN = string;\nexport type ISSN = string;\nexport type ISO8601 = string;\nexport type ISO31661Alpha2 = string;\nexport type ISO31661Alpha3 = string;\nexport type ISO4217 = CurrencyCode;\nexport type Image = {\n  readonly description?: string;\n  readonly format?: string;\n  readonly path?: string;\n  readonly url?: string;\n};\nexport type Integer = number;\nexport type JSONObject = Record<string, unknown>;\nexport type LicensePlateNumber = string;\nexport type LongText = string;\nexport type MD5 = string;\nexport type MACAddress = string;\nexport type MagnetURI = string;\nexport type Markdown = string;\nexport type Menu = {\n  readonly defaultValue?: MenuItem['value'];\n  readonly items: readonly MenuItem[];\n};\nexport type MimeType = string;\nexport type Month = string;\nexport type Number = number;\nexport type Password = string;\nexport type PassportNumber = string;\nexport type Percent = number;\nexport type PhoneNumber = string;\nexport type Port = number;\nexport type PostalCode = string;\nexport type Province = string;\nexport type RFC3339 = string;\nexport type RGBColor = string;\nexport type SemanticVersion = string;\nexport type SSN = number;\nexport type State = string;\nexport type StreetAddress = string;\nexport type String = string;\nexport type Tags = readonly MenuItem[];\nexport type TaxIDNumber = string;\nexport type Time = string;\nexport type TimeRange = readonly string[];\nexport type TimeOfDay = string;\nexport type Timezone = TimezoneRegions;\nexport type URL = string;\nexport type URLPath = string;\nexport type UUID = string;\nexport type VATIDNumber = string;\nexport type VerificationCode = string;\nexport type Video = {\n  readonly description?: string;\n  readonly format?: string;\n  readonly path?: string;\n  readonly url?: string;\n};\nexport type Weekday = string;\nexport type Year = number;\n\nexport type Primitive =\n  | AirportCode\n  | BankIDCode\n  | BitcoinAddress\n  | City\n  | Color\n  | CountryCode\n  | CreditCard\n  | CurrencyAmount\n  | CurrencyCode\n  | DataURI\n  | Date\n  | DateRange\n  | DateTime\n  | DayOfMonth\n  | DomainName\n  | EAN\n  | EIN\n  | EmailAddress\n  | EthereumAddress\n  | Float\n  | GeographicCoordinate\n  | GeographicCoordinates\n  | GitRepositoryURL\n  | Hexadecimal\n  | HexColor\n  | HSLColor\n  | IBAN\n  | Image\n  | IMEI\n  | Integer\n  | IPAddress\n  | IPAddressRange\n  | ISBN\n  | ISIN\n  | ISMN\n  | ISO4217\n  | ISO8601\n  | ISO31661Alpha2\n  | ISO31661Alpha3\n  | ISSN\n  | JSONObject\n  | LanguageCode\n  | LicensePlateNumber\n  | LongText\n  | MACAddress\n  | MagnetURI\n  | Markdown\n  | MD5\n  | Menu\n  | MimeType\n  | Month\n  | PassportNumber\n  | Password\n  | Percent\n  | PhoneNumber\n  | Port\n  | PostalCode\n  | Province\n  | RFC3339\n  | RGBColor\n  | SemanticVersion\n  | SSN\n  | State\n  | StreetAddress\n  | Tags\n  | TaxIDNumber\n  | Time\n  | TimeOfDay\n  | TimeRange\n  | Timezone\n  | URL\n  | URLPath\n  | UUID\n  | VATIDNumber\n  | VerificationCode\n  | Video\n  | Weekday\n  | Year\n  | boolean\n  | number\n  | string;\n\n// export enum Primitives {\n//   AirportCode = AirportCode,\n//   BankIDCode = BankIDCode,\n//   BitcoinAddress = BitcoinAddress,\n//   Boolean = Boolean,\n//   City = City,\n//   Color = Color,\n//   CountryCode = CountryCode,\n//   CreditCard = CreditCard,\n//   CurrencyAmount = CurrencyAmount,\n//   CurrencyCode =CurrencyCode,\n//   DataURI = 'data-uri',\n//   Date = 'date',\n//   DateRange = 'date-range',\n//   DateTime = 'date-time',\n//   DayOfMonth = 'day-of-month',\n//   DomainName = 'domain-name',\n//   EmailAddress = 'email-address',\n//   EthereumAddress = 'ethereum-address',\n//   EAN = 'european-article-number',\n//   EIN = 'employer-identification-number',\n//   Float = 'float',\n//   GeographicCoordinate = 'geographic-coordinate',\n//   GeographicCoordinates = 'geographic-coordinates',\n//   GitRepositoryURL = 'git-repository-url',\n//   HSLColor = 'hsl-color',\n//   HexColor = 'hex-color',\n//   Hexadecimal = 'hexadecimal',\n//   IBAN = 'international-bank-account-number',\n//   IMEI = 'international-mobile-equipment-identifier',\n//   IPAddress = 'ip-address',\n//   IPAddressRange = 'ip-address-range',\n//   ISBN = 'international-standard-book-number',\n//   ISIN = 'international-stock-number',\n//   ISMN = 'international-standard-music-number',\n//   ISSN = 'international-standard-serial-number',\n//   ISO8601 = 'iso-8601',\n//   ISO31661Alpha2 = 'iso-31661-alpha-2',\n//   ISO31661Alpha3 = 'iso-31661-alpha-3',\n//   ISO4217 = 'iso-4217',\n//   Image = 'image',\n//   Integer = 'integer',\n//   JSON = 'json',\n//   LanguageCode = 'language-code',\n//   LicensePlateNumber = 'license-plate-number',\n//   LongText = 'long-text',\n//   MD5 = 'md5',\n//   Markdown = 'markdown',\n//   Menu = 'menu',\n//   Number = 'number',\n//   MACAddress = 'mac-address',\n//   MagnetURI = 'magnet-uri',\n//   MimeType = 'mime-type',\n//   Month = 'month',\n//   Password = 'password',\n//   PassportNumber = 'passport-number',\n//   Percent = 'percent',\n//   PhoneNumber = 'phone-number',\n//   Port = 'port',\n//   PostalCode = 'postal-code',\n//   Province = 'province',\n//   RFC3339 = 'rfc-3339',\n//   RGBColor = 'rgb-color',\n//   SemanticVersion = 'semantic-version',\n//   SSN = 'social-security-number',\n//   State = 'state',\n//   StreetAddress = 'street-address',\n//   String = 'string',\n//   Tags = 'tags',\n//   TaxIDNumber = 'tax-id-number',\n//   Time = 'time',\n//   TimeOfDay = 'time-of-day',\n//   TimeRange = 'time-range',\n//   TimezoneRegion = 'timezone-region',\n//   URL = 'url',\n//   URLPath = 'url-path',\n//   UUID = 'uuid',\n//   VATIDNumber = 'value-added-tax-id-number',\n//   VerificationCode = 'verification-code',\n//   Video = 'video',\n//   Weekday = 'weekday',\n//   Year = 'year',\n// }\n\nexport enum Primitives {\n  AirportCode = 'AirportCode',\n  AlignHorizontal = 'AlignHorizontal',\n  AlignVertical = 'AlignVertical',\n  Amount = 'Amount',\n  BackgroundColor = 'BackgroundColor',\n  BackgroundImageRepeat = 'BackgroundImageRepeat',\n  BackgroundImageSize = 'BackgroundImageSize',\n  BankIDCode = 'BankIDCode',\n  BitcoinAddress = 'BitcoinAddress',\n  Boolean = 'Boolean',\n  BorderStyle = 'BorderStyle',\n  ButtonType = 'ButtonType',\n  CSSColor = 'CSSColor',\n  CSSMeasurement = 'CSSMeasurement',\n  City = 'City',\n  Color = 'Color',\n  CountryCode = 'CountryCode',\n  CreditCard = 'CreditCard',\n  CurrencyAmount = 'CurrencyAmount',\n  CurrencyCode = 'CurrencyCode',\n  Cursor = 'Cursor',\n  DataURI = 'DataURI',\n  Date = 'Date',\n  DateRange = 'DateRange',\n  DateTime = 'DateTime',\n  DayOfMonth = 'DayOfMonth',\n  Depth = 'Depth',\n  DomainName = 'DomainName',\n  EAN = 'EAN',\n  EIN = 'EIN',\n  EmailAddress = 'EmailAddress',\n  EthereumAddress = 'EthereumAddress',\n  Fill = 'Fill',\n  Float = 'Float',\n  GeographicCoordinate = 'GeographicCoordinate',\n  GeographicCoordinates = 'GeographicCoordinates',\n  GitRepositoryURL = 'GitRepositoryURL',\n  HSLColor = 'HSLColor',\n  HexColor = 'HexColor',\n  Hexadecimal = 'Hexadecimal',\n  IBAN = 'IBAN',\n  IMEI = 'IMEI',\n  IPAddress = 'IPAddress',\n  IPAddressRange = 'IPAddressRange',\n  Orientation = 'Orientation',\n  Shadow = 'Shadow',\n  ISBN = 'ISBN',\n  ISIN = 'ISIN',\n  ISMN = 'ISMN',\n  ISO31661Alpha2 = 'ISO31661Alpha2',\n  ISO31661Alpha3 = 'ISO31661Alpha3',\n  ISO4217 = 'ISO4217',\n  ISO8601 = 'ISO8601',\n  ISSN = 'ISSN',\n  Image = 'Image',\n  Integer = 'Integer',\n  JSON = 'JSON',\n  LanguageCode = 'LanguageCode',\n  LicensePlateNumber = 'LicensePlateNumber',\n  LongText = 'LongText',\n  MACAddress = 'MACAddress',\n  MD5 = 'MD5',\n  MagnetURI = 'MagnetURI',\n  Markdown = 'Markdown',\n  Menu = 'Menu',\n  MimeType = 'MimeType',\n  Month = 'Month',\n  Number = 'number',\n  PassportNumber = 'PassportNumber',\n  Password = 'Password',\n  Percent = 'Percent',\n  PhoneNumber = 'PhoneNumber',\n  Port = 'Port',\n  PostalCode = 'PostalCode',\n  Province = 'Province',\n  RFC3339 = 'RFC3339',\n  RGBColor = 'RGBColor',\n  ReactComponentProps = 'ReactComponentProps',\n  SSN = 'SSN',\n  SemanticVersion = 'SemanticVersion',\n  Size = 'Size',\n  State = 'State',\n  StreetAddress = 'StreetAddress',\n  String = 'String',\n  Tags = 'Tags',\n  TaxIDNumber = 'TaxIDNumber',\n  TextAlign = 'TextAlign',\n  Time = 'Time',\n  TimeOfDay = 'TimeOfDay',\n  TimeRange = 'TimeRange',\n  TimezoneRegion = 'TimezoneRegion',\n  URL = 'URL',\n  URLPath = 'URLPath',\n  UUID = 'UUID',\n  VATIDNumber = 'VATIDNumber',\n  VerificationCode = 'VerificationCode',\n  Video = 'Video',\n  Weekday = 'Weekday',\n  Year = 'Year',\n}\n", "export enum CloudProviders {\n  AWS = 'aws',\n}\n\nexport enum InfrastuctureClass {\n  Large = 'large',\n  Largest = 'largest',\n  Medium = 'medium',\n  Small = 'small',\n  Smallest = 'smallest',\n}\n\nexport type DNSOptions = {\n  readonly host?: string;\n  readonly https?: boolean;\n  readonly path?: string;\n  readonly port?: number;\n};\n\nexport type InfrastructureOptions = {\n  readonly class?: InfrastuctureClass;\n  readonly dns?: DNSOptions;\n  readonly provider?: CloudProviders;\n};\n", "export enum DeploymentPlatform {\n  AWSECS = 'aws-ecs',\n  AWSLambda = 'aws-lambda',\n  AWSS3 = 'aws-s3',\n  GitHubPages = 'github-pages',\n  Netlify = 'netlify',\n  Surge = 'surge',\n  Vercel = 'vercel',\n}\n", "export enum DeploymentStrategy {\n  BlueGreen = 'blue-green',\n  Canary = 'canary',\n  Rolling = 'rolling',\n}\n", "export enum CodeFormatter {\n  Prettier = 'prettier',\n}\n", "export enum CodeLinter {\n  ESLint = 'eslint',\n  Stylelint = 'stylelint',\n}\n", "export enum SrcLaunchSDK {\n  CoreAPI = 'core-api',\n  DataClient = 'data-client',\n  Exceptions = 'exceptions',\n  HttpClient = 'http-client',\n  Models = 'models',\n  RTKQueryAPI = 'rtk-query-api',\n  RTKSlices = 'rtk-slices',\n  ReduxStore = 'redux-store',\n  SequelizeModels = 'sequelize-models',\n  Types = 'types',\n}\n", "export enum StaticTyping {\n  TypeScript = 'typescript',\n}\n", "export enum DocumentationType {\n  API = 'api',\n  ComponentLibrary = 'component-library',\n  DesktopApplication = 'desktop-application',\n  IconLibrary = 'icon-library',\n  Library = 'library',\n  MobileApplication = 'mobile-application',\n  Service = 'service',\n  ThemeLibrary = 'theme-library',\n  TypeScript = 'typescript',\n  WebApplication = 'web-application',\n}\n", "import { DeploymentOptions } from '../deployment';\nimport { DNSOptions } from '../deployment/infrastructure';\nimport { CodeFormatter, CodeLinter, StaticTyping } from '../development';\nimport { RunOptions } from '../run';\nexport * from './platform';\n\nexport enum EnvironmentType {\n  CI = 'ci',\n  Development = 'dev',\n  Preview = 'preview',\n  Production = 'production',\n  Test = 'test',\n}\n\nexport type Environment<T = Record<string, unknown>> = DNSOptions & {\n  readonly description?: string;\n  readonly id?: string;\n  readonly name?: string;\n  readonly run?: RunOptions<T>;\n  readonly type?: EnvironmentType;\n};\n\nexport type RemoteEnvironmentOptions<T = Record<string, unknown>> =\n  Environment<T> & {\n    readonly deployment?: DeploymentOptions;\n  };\n\nexport type DevelopmentEnvironmentOptions<T = Record<string, unknown>> =\n  Environment<T> & {\n    readonly formatters?: readonly CodeFormatter[];\n    readonly linters?: readonly CodeLinter[];\n    readonly staticTyping?: readonly StaticTyping[];\n  };\n\nexport type PreviewEnvironmentOptions<T = Record<string, unknown>> =\n  RemoteEnvironmentOptions<T> & {\n    readonly branches?: {\n      readonly [key: string]: RemoteEnvironmentOptions & {\n        readonly ssr?: boolean;\n      };\n    };\n  };\n\nexport type ProductionEnvironmentOptions<T = Record<string, unknown>> =\n  RemoteEnvironmentOptions<T>;\n\nexport type QAEnvironmentOptions<T = Record<string, unknown>> =\n  RemoteEnvironmentOptions<T> & {\n    readonly e2e?: boolean;\n    readonly integration?: boolean;\n    readonly lint?: boolean;\n    readonly unit?: boolean;\n  };\n\nexport interface EnvironmentOptions {\n  readonly development?: DevelopmentEnvironmentOptions;\n  readonly preview?: PreviewEnvironmentOptions;\n  readonly production?: ProductionEnvironmentOptions;\n  readonly qa?: QAEnvironmentOptions;\n}\n", "import { HttpResponseCode } from '../../networking/http';\n\nexport enum RetryStrategy {\n  Simple = 'simple',\n  ExponentialBackoff = 'exponential',\n  CircuitBreaker = 'circuit_breaker',\n}\n\nexport type ExceptionRemediation = {\n  readonly response?: {\n    readonly code?: HttpResponseCode;\n  };\n  readonly retry?:\n    | boolean\n    | {\n        readonly limit?: number;\n        readonly strategy?: RetryStrategy;\n      };\n};\n", "import { TimezoneRegions } from '../time/region';\nimport { TimezoneOffset } from '../time/timezone';\nimport { Timezones } from '../time/timezones';\nimport { CurrencyCode } from './../currency/index';\nimport { LocaleCode } from '.';\n\nexport enum CountryCode {\n  Afghanistan = 'AF',\n  Albania = 'AL',\n  Algeria = 'DZ',\n  AmericanSamoa = 'AS',\n  Andorra = 'AD',\n  Angola = 'AO',\n  Anguilla = 'AI',\n  Antarctica = 'AQ',\n  AntiguaAndBarbuda = 'AG',\n  Argentina = 'AR',\n  Armenia = 'AM',\n  Aruba = 'AW',\n  Australia = 'AU',\n  Austria = 'AT',\n  Azerbaijan = 'AZ',\n  Bahamas = 'BS',\n  Bahrain = 'BH',\n  Bangladesh = 'BD',\n  Barbados = 'BB',\n  Belarus = 'BY',\n  Belgium = 'BE',\n  Belize = 'BZ',\n  Benin = 'BJ',\n  Bermuda = 'BM',\n  Bhutan = 'BT',\n  Bolivia = 'BO',\n  BosniaAndHerzegovina = 'BA',\n  Botswana = 'BW',\n  BouvetIsland = 'BV',\n  Brazil = 'BR',\n  BritishIndianOceanTerritory = 'IO',\n  Brunei = 'BN',\n  Bulgaria = 'BG',\n  BurkinaFaso = 'BF',\n  Burundi = 'BI',\n  Cambodia = 'KH',\n  Cameroon = 'CM',\n  Canada = 'CA',\n  CapeVerde = 'CV',\n  CaymanIslands = 'KY',\n  CentralAfricanRepublic = 'CF',\n  Chad = 'TD',\n  Chile = 'CL',\n  China = 'CN',\n  ChristmasIsland = 'CX',\n  CocosKeelingIslands = 'CC',\n  Colombia = 'CO',\n  Comoros = 'KM',\n  Congo = 'CG',\n  CongoTheDemocraticRepublicOfThe = 'CD',\n  CookIslands = 'CK',\n  CostaRica = 'CR',\n  CoteDIvoire = 'CI',\n  Croatia = 'HR',\n  Cuba = 'CU',\n  Cyprus = 'CY',\n  CzechRepublic = 'CZ',\n  Denmark = 'DK',\n  Djibouti = 'DJ',\n  Dominica = 'DM',\n  DominicanRepublic = 'DO',\n  Ecuador = 'EC',\n  Egypt = 'EG',\n  ElSalvador = 'SV',\n  EquatorialGuinea = 'GQ',\n  Eritrea = 'ER',\n  Estonia = 'EE',\n  Ethiopia = 'ET',\n  FalklandIslands = 'FK',\n  FaroeIslands = 'FO',\n  Fiji = 'FJ',\n  Finland = 'FI',\n  France = 'FR',\n  FrenchGuiana = 'GF',\n  FrenchPolynesia = 'PF',\n  FrenchSouthernTerritories = 'TF',\n  Gabon = 'GA',\n  Gambia = 'GM',\n  Georgia = 'GE',\n  Germany = 'DE',\n  Ghana = 'GH',\n  Gibraltar = 'GI',\n  Greece = 'GR',\n  Greenland = 'GL',\n  Grenada = 'GD',\n  Guadeloupe = 'GP',\n  Guam = 'GU',\n  Guatemala = 'GT',\n  Guernsey = 'GG',\n  Guinea = 'GN',\n  GuineaBissau = 'GW',\n  Guyana = 'GY',\n  Haiti = 'HT',\n  HeardIslandMcdonaldIslands = 'HM',\n  HolySeeVaticanCityState = 'VA',\n  Honduras = 'HN',\n  HongKong = 'HK',\n  Hungary = 'HU',\n  Iceland = 'IS',\n  India = 'IN',\n  Indonesia = 'ID',\n  Iran = 'IR',\n  Iraq = 'IQ',\n  Ireland = 'IE',\n  IsleOfMan = 'IM',\n  Israel = 'IL',\n  Italy = 'IT',\n  Jamaica = 'JM',\n  Japan = 'JP',\n  Jersey = 'JE',\n  Jordan = 'JO',\n  Kazakhstan = 'KZ',\n  Kenya = 'KE',\n  Kiribati = 'KI',\n  Kuwait = 'KW',\n  Kyrgyzstan = 'KG',\n  Laos = 'LA',\n  Latvia = 'LV',\n  Lebanon = 'LB',\n  Lesotho = 'LS',\n  Liberia = 'LR',\n  Libya = 'LY',\n  Liechtenstein = 'LI',\n  Lithuania = 'LT',\n  Luxembourg = 'LU',\n  Macau = 'MO',\n  Madagascar = 'MG',\n  Malawi = 'MW',\n  Malaysia = 'MY',\n  Maldives = 'MV',\n  Mali = 'ML',\n  Malta = 'MT',\n  MarshallIslands = 'MH',\n  Martinique = 'MQ',\n  Mauritania = 'MR',\n  Mauritius = 'MU',\n  Mayotte = 'YT',\n  Mexico = 'MX',\n  MicronesiaFederatedStatesOf = 'FM',\n  Moldova = 'MD',\n  Monaco = 'MC',\n  Mongolia = 'MN',\n  Montenegro = 'ME',\n  Montserrat = 'MS',\n  Morocco = 'MA',\n  Mozambique = 'MZ',\n  Myanmar = 'MM',\n  Namibia = 'NA',\n  Nauru = 'NR',\n  Nepal = 'NP',\n  Netherlands = 'NL',\n  NetherlandsAntilles = 'AN',\n  NewCaledonia = 'NC',\n  NewZealand = 'NZ',\n  NorthKorea = 'KP',\n  Nicaragua = 'NI',\n  Niger = 'NE',\n  Nigeria = 'NG',\n  Niue = 'NU',\n  NorfolkIsland = 'NF',\n  NorthMacedonia = 'MK',\n  NorthernMarianaIslands = 'MP',\n  Norway = 'NO',\n  Oman = 'OM',\n  Pakistan = 'PK',\n  Palau = 'PW',\n  PalestinianTerritoryOccupied = 'PS',\n  Panama = 'PA',\n  PapuaNewGuinea = 'PG',\n  Paraguay = 'PY',\n  Peru = 'PE',\n  Philippines = 'PH',\n  Pitcairn = 'PN',\n  Poland = 'PL',\n  Portugal = 'PT',\n  PuertoRico = 'PR',\n  Qatar = 'QA',\n  Reunion = 'RE',\n  Romania = 'RO',\n  RussianFederation = 'RU',\n  Rwanda = 'RW',\n  SaintBarthelemy = 'BL',\n  SaintHelena = 'SH',\n  SaintKittsAndNevis = 'KN',\n  SaintLucia = 'LC',\n  SaintMartin = 'MF',\n  SaintPierreAndMiquelon = 'PM',\n  SaintVincentAndTheGrenadines = 'VC',\n  Samoa = 'WS',\n  SanMarino = 'SM',\n  SaoTomeAndPrincipe = 'ST',\n  SaudiArabia = 'SA',\n  Senegal = 'SN',\n  Serbia = 'RS',\n  SerbiaAndMontenegro = 'CS',\n  Seychelles = 'SC',\n  SierraLeone = 'SL',\n  Singapore = 'SG',\n  Slovakia = 'SK',\n  Slovenia = 'SI',\n  SolomonIslands = 'SB',\n  Somalia = 'SO',\n  SouthAfrica = 'ZA',\n  SouthGeorgiaAndTheSouthSandwichIslands = 'GS',\n  SouthKorea = 'KR',\n  Spain = 'ES',\n  SriLanka = 'LK',\n  Sudan = 'SD',\n  Suriname = 'SR',\n  SvalbardAndJanMayen = 'SJ',\n  Swaziland = 'SZ',\n  Sweden = 'SE',\n  Switzerland = 'CH',\n  Syria = 'SY',\n  Taiwan = 'TW',\n  Tajikistan = 'TJ',\n  Tanzania = 'TZ',\n  Thailand = 'TH',\n  TimorLeste = 'TL',\n  Togo = 'TG',\n  Tokelau = 'TK',\n  Tonga = 'TO',\n  TrinidadAndTobago = 'TT',\n  Tunisia = 'TN',\n  Turkey = 'TR',\n  Turkmenistan = 'TM',\n  TurksAndCaicosIslands = 'TC',\n  Tuvalu = 'TV',\n  Uganda = 'UG',\n  Ukraine = 'UA',\n  UnitedArabEmirates = 'AE',\n  UnitedKingdom = 'GB',\n  UnitedStates = 'US',\n  UnitedStatesMinorOutlyingIslands = 'UM',\n  Uruguay = 'UY',\n  Uzbekistan = 'UZ',\n  Vanuatu = 'VU',\n  Venezuela = 'VE',\n  Vietnam = 'VN',\n  VirginIslandsBritish = 'VG',\n  VirginIslandsUS = 'VI',\n  WallisAndFutuna = 'WF',\n  WesternSahara = 'EH',\n  Yemen = 'YE',\n  Zambia = 'ZM',\n  Zimbabwe = 'ZW',\n}\n\nexport type CountrySubdivision = {\n  // code: CountrySubdivisionCode;\n  name: string;\n  capital: string;\n  population: number;\n};\n\nexport type Country = {\n  i18n: {\n    calling_codes: number[];\n    currencies: CurrencyCode[];\n    languages: LocaleCode[];\n    tz: {\n      offsets: TimezoneOffset[];\n      regions: TimezoneRegions[];\n      timezones: Timezones[];\n    };\n  };\n  id: CountryCode;\n  info: {\n    flag: {\n      emoji: string;\n      emoji_unicode: string;\n      svg: string;\n    };\n    tld: string[];\n  };\n  iso: {\n    alpha2: CountryCode;\n    alpha3: string;\n    numeric: string;\n  };\n  name: {\n    alt_spellings: string[];\n    demonym: string;\n    native: {\n      endonym: string;\n    };\n    official: string;\n    short: string;\n    translations: {\n      [lang: string]: string;\n    };\n  };\n  statistics?: {\n    demographics: {\n      age: {\n        distribution: { age: string; percentage: number }[];\n        median_age: number;\n      };\n      population: {\n        largest_city: string;\n        total: number;\n      };\n    };\n    geography: {\n      area: number;\n      region: string;\n      sub_region: string;\n    };\n    government: {\n      capital: string;\n      type: string;\n    };\n  };\n};\n", "import { CountryCode } from '../locale/country';\n\n/**\n * ISO-4217 Currency Codes\n */\nexport enum CurrencyCode {\n  AfghanistanAfghani = 'AFN',\n  AlbaniaLek = 'ALL',\n  ArmeniaDram = 'AMD',\n  AlgeriaDinar = 'DZD',\n  AmericanSamoaTala = 'WST',\n  AngolaKwanza = 'AOA',\n  ArgentinaPeso = 'ARS',\n  AustraliaDollar = 'AUD',\n  ArubaFlorin = 'AWG',\n  AzerbaijanNewManat = 'AZN',\n  BosniaAndHerzegovinaConvertibleMark = 'BAM',\n  BahrainDinar = 'BHD',\n  BarbadosDollar = 'BBD',\n  BangladeshTaka = 'BDT',\n  BelgiumFranc = 'BGN',\n  BermudaDollar = 'BMD',\n  BruneiDollar = 'BND',\n  BoliviaBoliviano = 'BOB',\n  BrazilReal = 'BRL',\n  BahamasDollar = 'BSD',\n  BhutanNgultrum = 'BTN',\n  BotswanaPula = 'BWP',\n  BelarusRuble = 'BYN',\n  BelizeDollar = 'BZD',\n  BulgariaLev = 'BGN',\n  BurundiFranc = 'BIF',\n  BritishPound = 'GBP',\n  CanadaDollar = 'CAD',\n  CambodiaRiel = 'KHR',\n  ComorosFranc = 'KMF',\n  CaymanIslandsDollar = 'KYD',\n  ChilePeso = 'CLP',\n  ChinaYuan = 'CNY',\n  ColombiaPeso = 'COP',\n  CostaRicaColon = 'CRC',\n  CroatiaKuna = 'HRK',\n  CubaConvertiblePeso = 'CUC',\n  CubaPeso = 'CUP',\n  CapeVerdeEscudo = 'CVE',\n  CyprusPound = 'CYP',\n  CzechRepublicKoruna = 'CZK',\n  DjiboutiFranc = 'DJF',\n  DenmarkKrone = 'DKK',\n  DominicaDollar = 'XCD',\n  DominicanRepublicPeso = 'DOP',\n  EastCaribbeanDollar = 'XCD',\n  EgyptPound = 'EGP',\n  ElSalvadorColon = 'SVC',\n  EquatorialGuineaEkwele = 'GQE',\n  EritreaNakfa = 'ERN',\n  EstoniaKroon = 'EEK',\n  EthiopiaBirr = 'ETB',\n  Euro = 'EUR',\n  FijiDollar = 'FJD',\n  FalklandIslandsPound = 'FKP',\n  GambiaDalasi = 'GMD',\n  GabonFranc = 'GMD',\n  GeorgiaLari = 'GEL',\n  GhanaCedi = 'GHS',\n  GibraltarPound = 'GIP',\n  GuatemalaQuetzal = 'GTQ',\n  GuernseyPound = 'GGP',\n  GuineaBissauPeso = 'GWP',\n  GuyanaDollar = 'GYD',\n  HongKongDollar = 'HKD',\n  HondurasLempira = 'HNL',\n  HaitiGourde = 'HTG',\n  HungaryForint = 'HUF',\n  IndonesiaRupiah = 'IDR',\n  IsleOfManPound = 'IMP',\n  IsraelNewShekel = 'ILS',\n  IndiaRupee = 'INR',\n  IraqDinar = 'IQD',\n  IranRial = 'IRR',\n  IcelandKrona = 'ISK',\n  JamaicaDollar = 'JMD',\n  JapanYen = 'JPY',\n  JerseyPound = 'JEP',\n  JordanDinar = 'JOD',\n  KazakhstanTenge = 'KZT',\n  KenyaShilling = 'KES',\n  KyrgyzstanSom = 'KGS',\n  NorthKoreaWon = 'KPW',\n  SouthKoreaWon = 'KRW',\n  KuwaitDinar = 'KWD',\n  LaosKip = 'LAK',\n  LebanonPound = 'LBP',\n  LiberiaDollar = 'LRD',\n  LesothoLoti = 'LSL',\n  LibyanDinar = 'LYD',\n  LithuaniaLitas = 'LTL',\n  LatviaLats = 'LVL',\n  LibyaDinar = 'LYD',\n  MacauPataca = 'MOP',\n  MaldivesRufiyaa = 'MVR',\n  MalawiKwacha = 'MWK',\n  MaltaLira = 'MTL',\n  MauritiusRupee = 'MUR',\n  MongoliaTughrik = 'MNT',\n  MoroccoDirham = 'MAD',\n  MoldovaLeu = 'MDL',\n  MozambiqueMetical = 'MZN',\n  MadagascarAriary = 'MGA',\n  MacedoniaDenar = 'MKD',\n  MexicoPeso = 'MXN',\n  MalaysiaRinggit = 'MYR',\n  MyanmarKyat = 'MMK',\n  MicronesiaFederatedStatesDollar = 'USD',\n  NicaraguaCordoba = 'NIO',\n  NamibiaDollar = 'NAD',\n  NetherlandsAntillesGuilder = 'ANG',\n  NewCaledoniaFranc = 'XPF',\n  NigeriaNaira = 'NGN',\n  NicaraguaCordobaOro = 'NIO',\n  NigerCFAFranc = 'XOF',\n  NorwayKrone = 'NOK',\n  NepalRupee = 'NPR',\n  NewZealandDollar = 'NZD',\n  OmanRial = 'OMR',\n  PanamaBalboa = 'PAB',\n  PeruNuevoSol = 'PEN',\n  PapuaNewGuineaKina = 'PGK',\n  PhilippinesPeso = 'PHP',\n  PakistanRupee = 'PKR',\n  PeruNuevo = 'PEN',\n  PolandZloty = 'PLN',\n  ParaguayGuarani = 'PYG',\n  QatarRial = 'QAR',\n  RomaniaNewLeu = 'RON',\n  SerbiaDinar = 'RSD',\n  SriLankaRupee = 'LKR',\n  RussiaRuble = 'RUB',\n  RwandaFranc = 'RWF',\n  SaudiArabiaRiyal = 'SAR',\n  SlovakiaKoruna = 'SKK',\n  SloveniaTolar = 'SIT',\n  SolomonIslandsDollar = 'SBD',\n  SeychellesRupee = 'SCR',\n  SudanPound = 'SDG',\n  SwedenKrona = 'SEK',\n  SingaporeDollar = 'SGD',\n  SaintHelenaPound = 'SHP',\n  SierraLeoneLeone = 'SLL',\n  SomaliaShilling = 'SOS',\n  SurinameDollar = 'SRD',\n  SintMaartenPound = 'SXD',\n  SyriaPound = 'SYP',\n  SwazilandLilangeni = 'SZL',\n  SwitzerlandFranc = 'CHF',\n  ThailandBaht = 'THB',\n  TajikistanSomoni = 'TJS',\n  TurkmenistanManat = 'TMT',\n  TunisiaDinar = 'TND',\n  TongaPaanga = 'TOP',\n  TurkeyLira = 'TRY',\n  TrinidadAndTobagoDollar = 'TTD',\n  TaiwanNewDollar = 'TWD',\n  TanzaniaShilling = 'TZS',\n  UnitedArabEmiratesDirham = 'AED',\n  UkraineHryvnia = 'UAH',\n  UgandaShilling = 'UGX',\n  UnitedKingdomPound = 'GBP',\n  UnitedStatesDollar = 'USD',\n  UruguayPeso = 'UYU',\n  UzbekistanSom = 'UZS',\n  VenezuelaBolivar = 'VEF',\n  VietnamDong = 'VND',\n  VanuatuVatu = 'VUV',\n  SamoaTala = 'WST',\n  YemenRial = 'YER',\n  SouthAfricaRand = 'ZAR',\n  ZambiaKwacha = 'ZMW',\n  ZimbabweDollar = 'ZWL',\n}\n\nexport type Currency = {\n  code: CurrencyCode;\n  countries: CountryCode[];\n  symbol: string;\n  decimal_digits: number;\n  rounding: number;\n  name: string;\n  symbol_native: string;\n  decimal_separator: string;\n  thousands_separator: string;\n  positive_sign: string;\n  negative_sign: string;\n  symbol_placement: string;\n};\n\nexport const Currencies: Record<string, Currency> = {\n  AfghanistanAfghani: {\n    code: CurrencyCode.AfghanistanAfghani,\n    countries: [CountryCode.Afghanistan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Afghan Afghani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u060B',\n    symbol_native: '\u060B',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AlbaniaLek: {\n    code: CurrencyCode.AlbaniaLek,\n    countries: [CountryCode.Albania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Albanian Lek',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lek',\n    symbol_native: 'Lek',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  AlgeriaDinar: {\n    code: CurrencyCode.AlgeriaDinar,\n    countries: [CountryCode.Algeria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Algerian Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062C',\n    symbol_native: '\u062F.\u062C',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArgentinaPeso: {\n    code: CurrencyCode.ArgentinaPeso,\n    countries: [CountryCode.Argentina],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Argentine Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ArmeniaDram: {\n    code: CurrencyCode.ArmeniaDram,\n    countries: [CountryCode.Armenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Armenian Dram',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0564\u0580.',\n    symbol_native: '\u0564\u0580.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ArubaFlorin: {\n    code: CurrencyCode.ArubaFlorin,\n    countries: [CountryCode.Aruba],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Aruban Florin',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AustraliaDollar: {\n    code: CurrencyCode.AustraliaDollar,\n    countries: [CountryCode.Australia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Australian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  AzerbaijanManat: {\n    code: CurrencyCode.AzerbaijanNewManat,\n    countries: [CountryCode.Azerbaijan],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Azerbaijani Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043C\u0430\u043D',\n    symbol_native: '\u043C\u0430\u043D',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BahrainDinar: {\n    code: CurrencyCode.BahrainDinar,\n    countries: [CountryCode.Bahrain],\n    decimal_digits: 3,\n    decimal_separator: '.',\n    name: 'Bahraini Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '.\u062F.\u0628',\n    symbol_native: '.\u062F.\u0628',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BangladeshTaka: {\n    code: CurrencyCode.BangladeshTaka,\n    countries: [CountryCode.Bangladesh],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bangladeshi Taka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u09F3',\n    symbol_native: '\u09F3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BarbadosDollar: {\n    code: CurrencyCode.BarbadosDollar,\n    countries: [CountryCode.Barbados],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Barbadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BelarusRuble: {\n    code: CurrencyCode.BelarusRuble,\n    countries: [CountryCode.Belarus],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belarusian Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BelizeDollar: {\n    code: CurrencyCode.BelizeDollar,\n    countries: [CountryCode.Belize],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Belize Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'BZ$',\n    symbol_native: 'BZ$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BermudaDollar: {\n    code: CurrencyCode.BermudaDollar,\n    countries: [CountryCode.Bermuda],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bermudian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BoliviaBoliviano: {\n    code: CurrencyCode.BoliviaBoliviano,\n    countries: [CountryCode.Bolivia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bolivian Boliviano',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$b',\n    symbol_native: '$b',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BosniaAndHerzegovinaConvertibleMarka: {\n    code: CurrencyCode.BosniaAndHerzegovinaConvertibleMark,\n    countries: [CountryCode.BosniaAndHerzegovina],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Bosnia and Herzegovina Convertible Marka',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KM',\n    symbol_native: 'KM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BotswanaPula: {\n    code: CurrencyCode.BotswanaPula,\n    countries: [CountryCode.Botswana],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Botswana Pula',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'P',\n    symbol_native: 'P',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BrazilReal: {\n    code: CurrencyCode.BrazilReal,\n    countries: [CountryCode.Brazil],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Brazilian Real',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R$',\n    symbol_native: 'R$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BruneiDollar: {\n    code: CurrencyCode.BruneiDollar,\n    countries: [CountryCode.Brunei],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Brunei Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  BulgariaLev: {\n    code: CurrencyCode.BulgariaLev,\n    countries: [CountryCode.Bulgaria],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Bulgarian Lev',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u043B\u0432',\n    symbol_native: '\u043B\u0432',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  BurundiFranc: {\n    code: CurrencyCode.BurundiFranc,\n    countries: [CountryCode.Burundi],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Burundian Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'FBu',\n    symbol_native: 'FBu',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CambodiaRiel: {\n    code: CurrencyCode.CambodiaRiel,\n    countries: [CountryCode.Cambodia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cambodian Riel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u17DB',\n    symbol_native: '\u17DB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CanadaDollar: {\n    code: CurrencyCode.CanadaDollar,\n    countries: [CountryCode.Canada],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Canadian Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CapeVerdeEscudo: {\n    code: CurrencyCode.CapeVerdeEscudo,\n    countries: [CountryCode.CapeVerde],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cape Verde Escudo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Esc',\n    symbol_native: 'Esc',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CaymanIslandsDollar: {\n    code: CurrencyCode.CaymanIslandsDollar,\n    countries: [CountryCode.CaymanIslands],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Cayman Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChilePeso: {\n    code: CurrencyCode.ChilePeso,\n    countries: [CountryCode.Chile],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Chilean Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ChinaYuanRenminbi: {\n    code: CurrencyCode.ChinaYuan,\n    countries: [CountryCode.China],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Chinese Yuan',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\u00A5',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ColombiaPeso: {\n    code: CurrencyCode.ColombiaPeso,\n    countries: [CountryCode.Colombia],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Colombian Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ComorosFranc: {\n    code: CurrencyCode.ComorosFranc,\n    countries: [CountryCode.Comoros],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Comoros Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CF',\n    symbol_native: 'CF',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CostaRicaColon: {\n    code: CurrencyCode.CostaRicaColon,\n    countries: [CountryCode.CostaRica],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Costa Rican Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  CroatiaKuna: {\n    code: CurrencyCode.CroatiaKuna,\n    countries: [CountryCode.Croatia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Croatian Kuna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kn',\n    symbol_native: 'kn',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaConvertiblePeso: {\n    code: CurrencyCode.CubaConvertiblePeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Convertible Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CubaPeso: {\n    code: CurrencyCode.CubaPeso,\n    countries: [CountryCode.Cuba],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cuba Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CyprusPound: {\n    code: CurrencyCode.CyprusPound,\n    countries: [CountryCode.Cyprus],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Cyprus Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  CzechRepublicKoruna: {\n    code: CurrencyCode.CzechRepublicKoruna,\n    countries: [CountryCode.CzechRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Czech Republic Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K\u010D',\n    symbol_native: 'K\u010D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DenmarkKrone: {\n    code: CurrencyCode.DenmarkKrone,\n    countries: [CountryCode.Denmark],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Denmark Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  DjiboutiFranc: {\n    code: CurrencyCode.DjiboutiFranc,\n    countries: [CountryCode.Djibouti],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Djibouti Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Fdj',\n    symbol_native: 'Fdj',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  DominicanRepublicPeso: {\n    code: CurrencyCode.DominicanRepublicPeso,\n    countries: [CountryCode.DominicanRepublic],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Dominican Republic Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RD$',\n    symbol_native: 'RD$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EastCaribbeanDollar: {\n    code: CurrencyCode.EastCaribbeanDollar,\n    countries: [\n      CountryCode.AntiguaAndBarbuda,\n      CountryCode.Dominica,\n      CountryCode.Grenada,\n      CountryCode.SaintKittsAndNevis,\n      CountryCode.SaintLucia,\n      CountryCode.SaintVincentAndTheGrenadines,\n    ],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'East Caribbean Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EgyptPound: {\n    code: CurrencyCode.EgyptPound,\n    countries: [CountryCode.Egypt],\n    decimal_digits: 2,\n    decimal_separator: '.',\n    name: 'Egypt Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  ElSalvadorColon: {\n    code: CurrencyCode.ElSalvadorColon,\n    countries: [CountryCode.ElSalvador],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'El Salvador Colon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A1',\n    symbol_native: '\u20A1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EquatorialGuineaEkwele: {\n    code: CurrencyCode.EquatorialGuineaEkwele,\n    countries: [CountryCode.EquatorialGuinea],\n    decimal_digits: 0,\n    decimal_separator: '.',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'GQE',\n    symbol_native: 'GQE',\n    symbol_placement: 'before',\n    thousands_separator: ',',\n  },\n  EritreaNakfa: {\n    code: CurrencyCode.EritreaNakfa,\n    countries: [CountryCode.Eritrea],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Eritrea Nakfa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Nfk',\n    symbol_native: 'Nfk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EstoniaKroon: {\n    code: CurrencyCode.EstoniaKroon,\n    countries: [CountryCode.Estonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Estonia Kroon',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  EthiopiaBirr: {\n    code: CurrencyCode.EthiopiaBirr,\n    countries: [CountryCode.Ethiopia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ethiopia Birr',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Br',\n    symbol_native: 'Br',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  Euro: {\n    code: CurrencyCode.Euro,\n    countries: [\n      CountryCode.Andorra,\n      CountryCode.Austria,\n      CountryCode.Belgium,\n      CountryCode.Cyprus,\n      CountryCode.Estonia,\n      CountryCode.Finland,\n      CountryCode.France,\n      CountryCode.Germany,\n      CountryCode.Greece,\n      CountryCode.Ireland,\n      CountryCode.Italy,\n      CountryCode.Latvia,\n      CountryCode.Lithuania,\n      CountryCode.Luxembourg,\n      CountryCode.Malta,\n      CountryCode.Monaco,\n      CountryCode.Netherlands,\n      CountryCode.Portugal,\n      CountryCode.Spain,\n      CountryCode.Sweden,\n      CountryCode.UnitedKingdom,\n    ],\n\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Euro',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AC',\n    symbol_native: '\u20AC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FalklandIslandsPound: {\n    code: CurrencyCode.FalklandIslandsPound,\n    countries: [CountryCode.FalklandIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Equatorial Guinea Ekwele',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  FijiDollar: {\n    code: CurrencyCode.FijiDollar,\n    countries: [CountryCode.Fiji],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Fiji Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GambiaDalasi: {\n    code: CurrencyCode.GambiaDalasi,\n    countries: [CountryCode.Gambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gambia Dalasi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'D',\n    symbol_native: 'D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GeorgiaLari: {\n    code: CurrencyCode.GeorgiaLari,\n    countries: [CountryCode.Georgia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Georgia Lari',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BE',\n    symbol_native: '\u20BE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GhanaCedi: {\n    code: CurrencyCode.GhanaCedi,\n    countries: [CountryCode.Ghana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ghana Cedi',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GibraltarPound: {\n    code: CurrencyCode.GibraltarPound,\n    countries: [CountryCode.Gibraltar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Gibraltar Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuatemalaQuetzal: {\n    code: CurrencyCode.GuatemalaQuetzal,\n    countries: [CountryCode.Guatemala],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guatemala Quetzal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Q',\n    symbol_native: 'Q',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuernseyPound: {\n    code: CurrencyCode.GuernseyPound,\n    countries: [CountryCode.Guernsey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guernsey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuineaBissauPeso: {\n    code: CurrencyCode.GuineaBissauPeso,\n    countries: [CountryCode.GuineaBissau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guinea-Bissau Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B5',\n    symbol_native: '\u20B5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  GuyanaDollar: {\n    code: CurrencyCode.GuyanaDollar,\n    countries: [CountryCode.Guyana],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Guyana Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HaitiGourde: {\n    code: CurrencyCode.HaitiGourde,\n    countries: [CountryCode.Haiti],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Haiti Gourde',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'G',\n    symbol_native: 'G',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HondurasLempira: {\n    code: CurrencyCode.HondurasLempira,\n    countries: [CountryCode.Honduras],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Honduras Lempira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HongKongDollar: {\n    code: CurrencyCode.HongKongDollar,\n    countries: [CountryCode.HongKong],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hong Kong Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  HungaryForint: {\n    code: CurrencyCode.HungaryForint,\n    countries: [CountryCode.Hungary],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Hungary Forint',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ft',\n    symbol_native: 'Ft',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IcelandKrona: {\n    code: CurrencyCode.IcelandKrona,\n    countries: [CountryCode.Iceland],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iceland Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndianRupee: {\n    code: CurrencyCode.IndiaRupee,\n    countries: [CountryCode.India, CountryCode.Bhutan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Indian Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B9',\n    symbol_native: '\u20B9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IndonesiaRupiah: {\n    code: CurrencyCode.IndonesiaRupiah,\n    countries: [CountryCode.Indonesia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Indonesia Rupiah',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rp',\n    symbol_native: 'Rp',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IranRial: {\n    code: CurrencyCode.IranRial,\n    countries: [CountryCode.Iran],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Iran Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsleOfManPound: {\n    code: CurrencyCode.IsleOfManPound,\n    countries: [CountryCode.IsleOfMan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Isle of Man Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  IsraeliShekel: {\n    code: CurrencyCode.IsraelNewShekel,\n    countries: [CountryCode.Israel],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Israeli Shekel',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AA',\n    symbol_native: '\u20AA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JamaicaDollar: {\n    code: CurrencyCode.JamaicaDollar,\n    countries: [CountryCode.Jamaica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jamaica Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'J$',\n    symbol_native: 'J$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JapanYen: {\n    code: CurrencyCode.JapanYen,\n    countries: [CountryCode.Japan],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Japan Yen',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A5',\n    symbol_native: '\uFFE5',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JerseyPound: {\n    code: CurrencyCode.JerseyPound,\n    countries: [CountryCode.Jersey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Jersey Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  JordanDinar: {\n    code: CurrencyCode.JordanDinar,\n    countries: [CountryCode.Jordan],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Jordan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'JD',\n    symbol_native: 'JD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KazakhstanTenge: {\n    code: CurrencyCode.KazakhstanTenge,\n    countries: [CountryCode.Kazakhstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kazakhstan Tenge',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B8',\n    symbol_native: '\u20B8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KenyaShilling: {\n    code: CurrencyCode.KenyaShilling,\n    countries: [CountryCode.Kenya],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kenya Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KSh',\n    symbol_native: 'KSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KuwaitDinar: {\n    code: CurrencyCode.KuwaitDinar,\n    countries: [CountryCode.Kuwait],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Kuwait Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KD',\n    symbol_native: 'KD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  KyrgyzstanSom: {\n    code: CurrencyCode.KyrgyzstanSom,\n    countries: [CountryCode.Kyrgyzstan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Kyrgyzstan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'KGS',\n    symbol_native: 'KGS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LaosKip: {\n    code: CurrencyCode.LaosKip,\n    countries: [CountryCode.Laos],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Laos Kip',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AD',\n    symbol_native: '\u20AD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LatviaLats: {\n    code: CurrencyCode.LatviaLats,\n    countries: [CountryCode.Latvia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Latvia Lat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ls',\n    symbol_native: 'Ls',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LebanonPound: {\n    code: CurrencyCode.LebanonPound,\n    countries: [CountryCode.Lebanon],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Lebanon Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LesothoLoti: {\n    code: CurrencyCode.LesothoLoti,\n    countries: [CountryCode.Lesotho],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lesotho Loti',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'M',\n    symbol_native: 'M',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LiberiaDollar: {\n    code: CurrencyCode.LiberiaDollar,\n    countries: [CountryCode.Liberia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Liberia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LibyanDinar: {\n    code: CurrencyCode.LibyanDinar,\n    countries: [CountryCode.Libya],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Libyan Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'LD',\n    symbol_native: 'LD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  LithuaniaLitas: {\n    code: CurrencyCode.LithuaniaLitas,\n    countries: [CountryCode.Lithuania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Lithuania Litas',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lt',\n    symbol_native: 'Lt',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacauPataca: {\n    code: CurrencyCode.MacauPataca,\n    countries: [CountryCode.Macau],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macau Pataca',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MOP$',\n    symbol_native: 'MOP$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MacedoniaDenar: {\n    code: CurrencyCode.MacedoniaDenar,\n    countries: [CountryCode.NorthMacedonia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Macedonia Denar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0434\u0435\u043D',\n    symbol_native: '\u0434\u0435\u043D',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MadagascarAriary: {\n    code: CurrencyCode.MadagascarAriary,\n    countries: [CountryCode.Madagascar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Madagascar Ariary',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Ar',\n    symbol_native: 'Ar',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalawiKwacha: {\n    code: CurrencyCode.MalawiKwacha,\n    countries: [CountryCode.Malawi],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malawi Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MK',\n    symbol_native: 'MK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MalaysiaRinggit: {\n    code: CurrencyCode.MalaysiaRinggit,\n    countries: [CountryCode.Malaysia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malaysia Ringgit',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RM',\n    symbol_native: 'RM',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaldivesRufiyaa: {\n    code: CurrencyCode.MaldivesRufiyaa,\n    countries: [CountryCode.Maldives],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Maldives Rufiyaa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Rf',\n    symbol_native: 'Rf',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MaltaLira: {\n    code: CurrencyCode.MaltaLira,\n    countries: [CountryCode.Malta],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Malta Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Lm',\n    symbol_native: 'Lm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MauritiusRupee: {\n    code: CurrencyCode.MauritiusRupee,\n    countries: [CountryCode.Mauritius],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mauritius Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MexicoPeso: {\n    code: CurrencyCode.MexicoPeso,\n    countries: [CountryCode.Mexico],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mexico Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoldovaLeu: {\n    code: CurrencyCode.MoldovaLeu,\n    countries: [CountryCode.Moldova],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Moldova Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'L',\n    symbol_native: 'L',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MongoliaTughrik: {\n    code: CurrencyCode.MongoliaTughrik,\n    countries: [CountryCode.Mongolia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mongolia Tughrik',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AE',\n    symbol_native: '\u20AE',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MoroccoDirham: {\n    code: CurrencyCode.MoroccoDirham,\n    countries: [CountryCode.Morocco],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Morocco Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'DH',\n    symbol_native: 'DH',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MozambiqueMetical: {\n    code: CurrencyCode.MozambiqueMetical,\n    countries: [CountryCode.Mozambique],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Mozambique Metical',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'MT',\n    symbol_native: 'MT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  MyanmarKyat: {\n    code: CurrencyCode.MyanmarKyat,\n    countries: [CountryCode.Myanmar],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Myanmar Kyat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'K',\n    symbol_native: 'K',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NamibiaDollar: {\n    code: CurrencyCode.NamibiaDollar,\n    countries: [CountryCode.Namibia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Namibia Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NepalRupee: {\n    code: CurrencyCode.NepalRupee,\n    countries: [CountryCode.Nepal],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nepal Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NetherlandsAntillesGuilder: {\n    code: CurrencyCode.NetherlandsAntillesGuilder,\n    countries: [CountryCode.NetherlandsAntilles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Netherlands Antilles Guilder',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0192',\n    symbol_native: '\u0192',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewCaledoniaFranc: {\n    code: CurrencyCode.NewCaledoniaFranc,\n    countries: [CountryCode.NewCaledonia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'New Caledonia Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A3',\n    symbol_native: '\u20A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NewZealandDollar: {\n    code: CurrencyCode.NewZealandDollar,\n    countries: [CountryCode.NewZealand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'New Zealand Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NicaraguaCordoba: {\n    code: CurrencyCode.NicaraguaCordoba,\n    countries: [CountryCode.Nicaragua],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nicaragua Cordoba',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'C$',\n    symbol_native: 'C$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigerCFAFranc: {\n    code: CurrencyCode.NigerCFAFranc,\n    countries: [CountryCode.Niger],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Niger CFA Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CFA',\n    symbol_native: 'CFA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NigeriaNaira: {\n    code: CurrencyCode.NigeriaNaira,\n    countries: [CountryCode.Nigeria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Nigeria Naira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A6',\n    symbol_native: '\u20A6',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorthKoreaWon: {\n    code: CurrencyCode.NorthKoreaWon,\n    countries: [CountryCode.NorthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'North Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  NorwayKrone: {\n    code: CurrencyCode.NorwayKrone,\n    countries: [CountryCode.Norway],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Norway Krone',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  OmanRial: {\n    code: CurrencyCode.OmanRial,\n    countries: [CountryCode.Oman],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Oman Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PakistanRupee: {\n    code: CurrencyCode.PakistanRupee,\n    countries: [CountryCode.Pakistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Pakistan Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PanamaBalboa: {\n    code: CurrencyCode.PanamaBalboa,\n    countries: [CountryCode.Panama],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Panama Balboa',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'B/.',\n    symbol_native: 'B/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ParaguayGuarani: {\n    code: CurrencyCode.ParaguayGuarani,\n    countries: [CountryCode.Paraguay],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Paraguay Guarani',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Gs',\n    symbol_native: 'Gs',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PeruvianNuevo: {\n    code: CurrencyCode.PeruNuevo,\n    countries: [CountryCode.Peru],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Peruvian Nuevo',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S/.',\n    symbol_native: 'S/.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PhilippinesPeso: {\n    code: CurrencyCode.PhilippinesPeso,\n    countries: [CountryCode.Philippines],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Philippines Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B1',\n    symbol_native: '\u20B1',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  PolandZloty: {\n    code: CurrencyCode.PolandZloty,\n    countries: [CountryCode.Poland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Poland Zloty',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'z\u0142',\n    symbol_native: 'z\u0142',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  QatarRial: {\n    code: CurrencyCode.QatarRial,\n    countries: [CountryCode.Qatar],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Qatar Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RomaniaNewLeu: {\n    code: CurrencyCode.RomaniaNewLeu,\n    countries: [CountryCode.Romania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Romania New Leu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'lei',\n    symbol_native: 'lei',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RussiaRuble: {\n    code: CurrencyCode.RussiaRuble,\n    countries: [CountryCode.RussianFederation],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Russia Ruble',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BD',\n    symbol_native: '\u20BD',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  RwandaFranc: {\n    code: CurrencyCode.RwandaFranc,\n    countries: [CountryCode.Rwanda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Rwanda Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'RF',\n    symbol_native: 'RF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SaudiArabiaRiyal: {\n    code: CurrencyCode.SaudiArabiaRiyal,\n    countries: [CountryCode.SaudiArabia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Saudi Arabia Riyal',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SerbiaDinar: {\n    code: CurrencyCode.SerbiaDinar,\n    countries: [CountryCode.Serbia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Serbia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0414\u0438\u043D.',\n    symbol_native: '\u0414\u0438\u043D.',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SeychellesRupee: {\n    code: CurrencyCode.SeychellesRupee,\n    countries: [CountryCode.Seychelles],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Seychelles Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SingaporeDollar: {\n    code: CurrencyCode.SingaporeDollar,\n    countries: [CountryCode.Singapore],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Singapore Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SlovakiaKoruna: {\n    code: CurrencyCode.SlovakiaKoruna,\n    countries: [CountryCode.Slovakia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovakia Koruna',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Sk',\n    symbol_native: 'Sk',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SloveniaTolar: {\n    code: CurrencyCode.SloveniaTolar,\n    countries: [CountryCode.Slovenia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Slovenia Tolar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'SIT',\n    symbol_native: 'SIT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SolomonIslandsDollar: {\n    code: CurrencyCode.SolomonIslandsDollar,\n    countries: [CountryCode.SolomonIslands],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Solomon Islands Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SomaliaShilling: {\n    code: CurrencyCode.SomaliaShilling,\n    countries: [CountryCode.Somalia],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Somalia Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'S',\n    symbol_native: 'S',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthAfricaRand: {\n    code: CurrencyCode.SouthAfricaRand,\n    countries: [CountryCode.SouthAfrica],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'South Africa Rand',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'R',\n    symbol_native: 'R',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SouthKoreaWon: {\n    code: CurrencyCode.SouthKoreaWon,\n    countries: [CountryCode.SouthKorea],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'South Korea Won',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A9',\n    symbol_native: '\u20A9',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SriLankaRupee: {\n    code: CurrencyCode.SriLankaRupee,\n    countries: [CountryCode.SriLanka],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sri Lanka Rupee',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20A8',\n    symbol_native: '\u20A8',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SudanPound: {\n    code: CurrencyCode.SudanPound,\n    countries: [CountryCode.Sudan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sudan Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SurinameDollar: {\n    code: CurrencyCode.SurinameDollar,\n    countries: [CountryCode.Suriname],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Suriname Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwazilandLilangeni: {\n    code: CurrencyCode.SwazilandLilangeni,\n    countries: [CountryCode.Swaziland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Swaziland Lilangeni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'E',\n    symbol_native: 'E',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwedenKrona: {\n    code: CurrencyCode.SwedenKrona,\n    countries: [CountryCode.Sweden],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Sweden Krona',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'kr',\n    symbol_native: 'kr',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SwitzerlandFranc: {\n    code: CurrencyCode.SwitzerlandFranc,\n    countries: [CountryCode.Switzerland],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Switzerland Franc',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'CHF',\n    symbol_native: 'CHF',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  SyriaPound: {\n    code: CurrencyCode.SyriaPound,\n    countries: [CountryCode.Syria],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Syria Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TaiwanNewDollar: {\n    code: CurrencyCode.TaiwanNewDollar,\n    countries: [CountryCode.Taiwan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Taiwan New Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'NT$',\n    symbol_native: 'NT$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TajikistanSomoni: {\n    code: CurrencyCode.TajikistanSomoni,\n    countries: [CountryCode.Tajikistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tajikistan Somoni',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TJS',\n    symbol_native: 'TJS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TanzaniaShilling: {\n    code: CurrencyCode.TanzaniaShilling,\n    countries: [CountryCode.Tanzania],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Tanzania Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'TSh',\n    symbol_native: 'TSh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ThailandBaht: {\n    code: CurrencyCode.ThailandBaht,\n    countries: [CountryCode.Thailand],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Thailand Baht',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u0E3F',\n    symbol_native: '\u0E3F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TunisiaDinar: {\n    code: CurrencyCode.TunisiaDinar,\n    countries: [CountryCode.Tunisia],\n    decimal_digits: 3,\n    decimal_separator: ',',\n    name: 'Tunisia Dinar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u062A',\n    symbol_native: '\u062F.\u062A',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkeyLira: {\n    code: CurrencyCode.TurkeyLira,\n    countries: [CountryCode.Turkey],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkey Lira',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20BA',\n    symbol_native: '\u20BA',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  TurkmenistanManat: {\n    code: CurrencyCode.TurkmenistanManat,\n    countries: [CountryCode.Turkmenistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Turkmenistan Manat',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'm',\n    symbol_native: 'm',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UgandaShilling: {\n    code: CurrencyCode.UgandaShilling,\n    countries: [CountryCode.Uganda],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Uganda Shilling',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'USh',\n    symbol_native: 'USh',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UkraineHryvnia: {\n    code: CurrencyCode.UkraineHryvnia,\n    countries: [CountryCode.Ukraine],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Ukraine Hryvnia',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20B4',\n    symbol_native: '\u20B4',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedArabEmiratesDirham: {\n    code: CurrencyCode.UnitedArabEmiratesDirham,\n    countries: [CountryCode.UnitedArabEmirates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Arab Emirates Dirham',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u062F.\u0625',\n    symbol_native: '\u062F.\u0625',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedKingdomPound: {\n    code: CurrencyCode.UnitedKingdomPound,\n    countries: [CountryCode.UnitedKingdom],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United Kingdom Pound',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u00A3',\n    symbol_native: '\u00A3',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UnitedStatesDollar: {\n    code: CurrencyCode.UnitedStatesDollar,\n    countries: [CountryCode.UnitedStates],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'United States Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$',\n    symbol_native: '$',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UruguayPeso: {\n    code: CurrencyCode.UruguayPeso,\n    countries: [CountryCode.Uruguay],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uruguay Peso',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '$U',\n    symbol_native: '$U',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  UzbekistanSom: {\n    code: CurrencyCode.UzbekistanSom,\n    countries: [CountryCode.Uzbekistan],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Uzbekistan Som',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'UZS',\n    symbol_native: 'UZS',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VanuatuVatu: {\n    code: CurrencyCode.VanuatuVatu,\n    countries: [CountryCode.Vanuatu],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vanuatu Vatu',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'VT',\n    symbol_native: 'VT',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VenezuelaBolivar: {\n    code: CurrencyCode.VenezuelaBolivar,\n    countries: [CountryCode.Venezuela],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Venezuela Bolivar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'Bs. F',\n    symbol_native: 'Bs. F',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  VietnamDong: {\n    code: CurrencyCode.VietnamDong,\n    countries: [CountryCode.Vietnam],\n    decimal_digits: 0,\n    decimal_separator: ',',\n    name: 'Vietnam Dong',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  YemenRial: {\n    code: CurrencyCode.YemenRial,\n    countries: [CountryCode.Yemen],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Yemen Rial',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\uFDFC',\n    symbol_native: '\uFDFC',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZambiaKwacha: {\n    code: CurrencyCode.ZambiaKwacha,\n    countries: [CountryCode.Zambia],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zambia Kwacha',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: 'ZK',\n    symbol_native: 'ZK',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n  ZimbabweDollar: {\n    code: CurrencyCode.ZimbabweDollar,\n    countries: [CountryCode.Zimbabwe],\n    decimal_digits: 2,\n    decimal_separator: ',',\n    name: 'Zimbabwe Dollar',\n    negative_sign: '-',\n    positive_sign: '',\n    rounding: 0,\n    symbol: '\u20AB',\n    symbol_native: '\u20AB',\n    symbol_placement: 'before',\n    thousands_separator: '.',\n  },\n};\n\nexport enum CryptoCurrency {\n  Bitcoin = 'BTC',\n  Ethereum = 'ETH',\n  Litecoin = 'LTC',\n  Ripple = 'XRP',\n  Dash = 'DASH',\n  Zcash = 'ZEC',\n  Dogecoin = 'DOGE',\n  Monero = 'XMR',\n  BitcoinCash = 'BCH',\n  EOS = 'EOS',\n  Binance = 'BNB',\n  Stellar = 'XLM',\n  Cardano = 'ADA',\n  IOTA = 'IOTA',\n  Tezos = 'XTZ',\n  NEO = 'NEO',\n  TRON = 'TRX',\n  EOSClassic = 'EOSC',\n  Ontology = 'ONT',\n  VeChain = 'VEN',\n  QTUM = 'QTUM',\n  Lisk = 'LSK',\n  Waves = 'WAVES',\n  OmiseGO = 'OMG',\n  Zilliqa = 'ZIL',\n  BitcoinGold = 'BTG',\n  Decred = 'DCR',\n  Stratis = 'STRAT',\n  Populous = 'PPT',\n  Augur = 'REP',\n  Golem = 'GNT',\n  Siacoin = 'SC',\n  BasicAttentionToken = 'BAT',\n  ZCoin = 'XZC',\n  StratisHedged = 'SNT',\n  VeChainHedged = 'VEN',\n  PowerLedger = 'POWR',\n  WavesHedged = 'WAVE',\n  ZilliqaHedged = 'ZRX',\n  BitcoinDiamond = 'BCD',\n  DigiByte = 'DGB',\n  DigiByteHedged = 'DGB',\n  Bytecoin = 'BCN',\n  BytecoinHedged = 'BCN',\n}\n", "export enum LanguageCode {\n  Afrikaans = 'af',\n  Albanian = 'sq',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Armenian = 'hy',\n  Azerbaijani = 'az',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  Belarusian = 'be',\n  Bengali = 'bn',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  Bihari = 'bh',\n  Bislama = 'bi',\n  Bosnian = 'bs',\n  Breten = 'br',\n  Bulgarian = 'bg',\n  Burmese = 'my',\n  Cantonese = 'yue',\n  Catalan = 'ca',\n  Chinese = 'zh',\n  Chuvash = 'cv',\n  Corsican = 'co',\n  Croatian = 'hr',\n  Czech = 'cs',\n  Danish = 'da',\n  Dari = 'prs',\n  Divehi = 'dv',\n  Dutch = 'nl',\n  English = 'en',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  Faroese = 'fo',\n  Farsi = 'fa',\n  Filipino = 'fil',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Galician = 'gl',\n  Georgian = 'ka',\n  German = 'de',\n  Greek = 'el',\n  Greenlandic = 'kl',\n  Gujarati = 'gu',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  Hebrew = 'he',\n  Hindi = 'hi',\n  Hungarian = 'hu',\n  Icelandic = 'is',\n  Igbo = 'ig',\n  Indonesian = 'id',\n  Irish = 'ga',\n  Italian = 'it',\n  Japanese = 'ja',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Komi = 'kv',\n  Konkani = 'kok',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Lao = 'lo',\n  Latin = 'la',\n  Latvian = 'lv',\n  Lithuanian = 'lt',\n  Luxembourgish = 'lb',\n  Ossetian = 'os',\n  Macedonian = 'mk',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  Malayalam = 'ml',\n  Maltese = 'mt',\n  Maori = 'mi',\n  Marathi = 'mr',\n  Mari = 'mhr',\n  Mongolian = 'mn',\n  Montenegrin = 'me',\n  Nepali = 'ne',\n  NorthernSotho = 'nso',\n  Norwegian = 'no',\n  NorwegianBokmal = 'nb',\n  NorwegianNynorsk = 'nn',\n  Oriya = 'or',\n  Pashto = 'ps',\n  Persian = 'fa',\n  Polish = 'pl',\n  Portuguese = 'pt',\n  Punjabi = 'pa',\n  Quechua = 'qu',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Sakha = 'sah',\n  Sami = 'se',\n  Samoan = 'sm',\n  Sanskrit = 'sa',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianCyrillic = 'sr-Cyrl',\n  Sesotho = 'st',\n  Shona = 'sn',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Somali = 'so',\n  Spanish = 'es',\n  Sudanese = 'su',\n  Sutu = 'sx',\n  Swahili = 'sw',\n  Swedish = 'sv',\n  Syriac = 'syr',\n  Tagalog = 'tl',\n  Tajik = 'tg',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  Tatar = 'tt',\n  Telugu = 'te',\n  Thai = 'th',\n  Tibetan = 'bo',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  Turkish = 'tr',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Welsh = 'cy',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  Zulu = 'zu',\n}\n\nexport type Language = {\n  code: LanguageCode;\n  name: string;\n  native_name: string;\n};\n", "import { TimezoneOffset } from './timezone';\nimport { Timezones } from './timezones';\n\nexport enum TimezoneRegions {\n  AfricaAbidjan = 'Africa/Abidjan',\n  AfricaAccra = 'Africa/Accra',\n  AfricaAddisAbaba = 'Africa/Addis_Ababa',\n  AfricaAlgiers = 'Africa/Algiers',\n  AfricaAsmara = 'Africa/Asmara',\n  AfricaBamako = 'Africa/Bamako',\n  AfricaBangui = 'Africa/Bangui',\n  AfricaBanjul = 'Africa/Banjul',\n  AfricaBissau = 'Africa/Bissau',\n  AfricaBlantyre = 'Africa/Blantyre',\n  AfricaBrazzaville = 'Africa/Brazzaville',\n  AfricaBujumbura = 'Africa/Bujumbura',\n  AfricaCairo = 'Africa/Cairo',\n  AfricaCasablanca = 'Africa/Casablanca',\n  AfricaCeuta = 'Africa/Ceuta',\n  AfricaConakry = 'Africa/Conakry',\n  AfricaDakar = 'Africa/Dakar',\n  AfricaDarEsSalaam = 'Africa/Dar_es_Salaam',\n  AfricaDjibouti = 'Africa/Djibouti',\n  AfricaDouala = 'Africa/Douala',\n  AfricaElAaiun = 'Africa/El_Aaiun',\n  AfricaFreetown = 'Africa/Freetown',\n  AfricaGaborone = 'Africa/Gaborone',\n  AfricaHarare = 'Africa/Harare',\n  AfricaJohannesburg = 'Africa/Johannesburg',\n  AfricaJuba = 'Africa/Juba',\n  AfricaKampala = 'Africa/Kampala',\n  AfricaKhartoum = 'Africa/Khartoum',\n  AfricaKigali = 'Africa/Kigali',\n  AfricaKinshasa = 'Africa/Kinshasa',\n  AfricaLagos = 'Africa/Lagos',\n  AfricaLibreville = 'Africa/Libreville',\n  AfricaLome = 'Africa/Lome',\n  AfricaLuanda = 'Africa/Luanda',\n  AfricaLubumbashi = 'Africa/Lubumbashi',\n  AfricaLusaka = 'Africa/Lusaka',\n  AfricaMalabo = 'Africa/Malabo',\n  AfricaMaputo = 'Africa/Maputo',\n  AfricaMaseru = 'Africa/Maseru',\n  AfricaMbabane = 'Africa/Mbabane',\n  AfricaMogadishu = 'Africa/Mogadishu',\n  AfricaMonrovia = 'Africa/Monrovia',\n  AfricaNairobi = 'Africa/Nairobi',\n  AfricaNdjamena = 'Africa/Ndjamena',\n  AfricaNiamey = 'Africa/Niamey',\n  AfricaNouakchott = 'Africa/Nouakchott',\n  AfricaOuagadougou = 'Africa/Ouagadougou',\n  AfricaPortoNovo = 'Africa/Porto-Novo',\n  AfricaSaoTome = 'Africa/Sao_Tome',\n  AfricaTripoli = 'Africa/Tripoli',\n  AfricaTunis = 'Africa/Tunis',\n  AfricaWindhoek = 'Africa/Windhoek',\n  AmericaAdak = 'America/Adak',\n  AmericaAnchorage = 'America/Anchorage',\n  AmericaAnguilla = 'America/Anguilla',\n  AmericaAntigua = 'America/Antigua',\n  AmericaAraguaina = 'America/Araguaina',\n  AmericaArgentinaBuenosAires = 'America/Argentina/Buenos_Aires',\n  AmericaArgentinaCatamarca = 'America/Argentina/Catamarca',\n  AmericaArgentinaCordoba = 'America/Argentina/Cordoba',\n  AmericaArgentinaJujuy = 'America/Argentina/Jujuy',\n  AmericaArgentinaLaRioja = 'America/Argentina/La_Rioja',\n  AmericaArgentinaMendoza = 'America/Argentina/Mendoza',\n  AmericaArgentinaRioGallegos = 'America/Argentina/Rio_Gallegos',\n  AmericaArgentinaSalta = 'America/Argentina/Salta',\n  AmericaArgentinaSanJuan = 'America/Argentina/San_Juan',\n  AmericaArgentinaSanLuis = 'America/Argentina/San_Luis',\n  AmericaArgentinaTucuman = 'America/Argentina/Tucuman',\n  AmericaArgentinaUshuaia = 'America/Argentina/Ushuaia',\n  AmericaAruba = 'America/Aruba',\n  AmericaAsuncion = 'America/Asuncion',\n  AmericaAtikokan = 'America/Atikokan',\n  AmericaAtka = 'America/Atka',\n  AmericaBahia = 'America/Bahia',\n  AmericaBahiaBanderas = 'America/Bahia_Banderas',\n  AmericaBarbados = 'America/Barbados',\n  AmericaBelem = 'America/Belem',\n  AmericaBelize = 'America/Belize',\n  AmericaBlancSablon = 'America/Blanc-Sablon',\n  AmericaBoaVista = 'America/Boa_Vista',\n  AmericaBogota = 'America/Bogota',\n  AmericaBoise = 'America/Boise',\n  AmericaCambridgeBay = 'America/Cambridge_Bay',\n  AmericaCampoGrande = 'America/Campo_Grande',\n  AmericaCancun = 'America/Cancun',\n  AmericaCaracas = 'America/Caracas',\n  AmericaCayenne = 'America/Cayenne',\n  AmericaCayman = 'America/Cayman',\n  AmericaChicago = 'America/Chicago',\n  AmericaChihuahua = 'America/Chihuahua',\n  AmericaCoralHarbour = 'America/Coral_Harbour',\n  AmericaCordoba = 'America/Cordoba',\n  AmericaCostaRica = 'America/Costa_Rica',\n  AmericaCreston = 'America/Creston',\n  AmericaCuiaba = 'America/Cuiaba',\n  AmericaCuracao = 'America/Curacao',\n  AmericaDanmarkshavn = 'America/Danmarkshavn',\n  AmericaDawson = 'America/Dawson',\n  AmericaDawsonCreek = 'America/Dawson_Creek',\n  AmericaDenver = 'America/Denver',\n  AmericaDetroit = 'America/Detroit',\n  AmericaDominica = 'America/Dominica',\n  AmericaEdmonton = 'America/Edmonton',\n  AmericaEirunepe = 'America/Eirunepe',\n  AmericaElSalvador = 'America/El_Salvador',\n  AmericaFortaleza = 'America/Fortaleza',\n  AmericaGlaceBay = 'America/Glace_Bay',\n  AmericaGodthab = 'America/Godthab',\n  AmericaGooseBay = 'America/Goose_Bay',\n  AmericaGrandTurk = 'America/Grand_Turk',\n  AmericaGrenada = 'America/Grenada',\n  AmericaGuadeloupe = 'America/Guadeloupe',\n  AmericaGuatemala = 'America/Guatemala',\n  AmericaGuayaquil = 'America/Guayaquil',\n  AmericaGuyana = 'America/Guyana',\n  AmericaHalifax = 'America/Halifax',\n  AmericaHavana = 'America/Havana',\n  AmericaHermosillo = 'America/Hermosillo',\n  AmericaIndianaIndianapolis = 'America/Indiana/Indianapolis',\n  AmericaIndianaKnox = 'America/Indiana/Knox',\n  AmericaIndianaMarengo = 'America/Indiana/Marengo',\n  AmericaIndianaPetersburg = 'America/Indiana/Petersburg',\n  AmericaIndianaTellCity = 'America/Indiana/Tell_City',\n  AmericaIndianaVevay = 'America/Indiana/Vevay',\n  AmericaIndianaVincennes = 'America/Indiana/Vincennes',\n  AmericaIndianaWinamac = 'America/Indiana/Winamac',\n  AmericaInuvik = 'America/Inuvik',\n  AmericaIqaluit = 'America/Iqaluit',\n  AmericaJamaica = 'America/Jamaica',\n  AmericaJuneau = 'America/Juneau',\n  AmericaKentuckyLouisville = 'America/Kentucky/Louisville',\n  AmericaKentuckyMonticello = 'America/Kentucky/Monticello',\n  AmericaKralendijk = 'America/Kralendijk',\n  AmericaLaPaz = 'America/La_Paz',\n  AmericaLima = 'America/Lima',\n  AmericaLosAngeles = 'America/Los_Angeles',\n  AmericaLouisville = 'America/Louisville',\n  AmericaLowerPrinces = 'America/Lower_Princes',\n  AmericaMaceio = 'America/Maceio',\n  AmericaManagua = 'America/Managua',\n  AmericaManaus = 'America/Manaus',\n  AmericaMarigot = 'America/Marigot',\n  AmericaMartinique = 'America/Martinique',\n  AmericaMatamoros = 'America/Matamoros',\n  AmericaMazatlan = 'America/Mazatlan',\n  AmericaMenominee = 'America/Menominee',\n  AmericaMerida = 'America/Merida',\n  AmericaMetlakatla = 'America/Metlakatla',\n  AmericaMexicoCity = 'America/Mexico_City',\n  AmericaMiquelon = 'America/Miquelon',\n  AmericaMoncton = 'America/Moncton',\n  AmericaMonterrey = 'America/Monterrey',\n  AmericaMontevideo = 'America/Montevideo',\n  AmericaMontserrat = 'America/Montserrat',\n  AmericaMontreal = 'America/Montreal',\n  AmericaNassau = 'America/Nassau',\n  AmericaNewYork = 'America/New_York',\n  AmericaNipigon = 'America/Nipigon',\n  AmericaNome = 'America/Nome',\n  AmericaNoronha = 'America/Noronha',\n  AmericaNorthDakotaBeulah = 'America/North_Dakota/Beulah',\n  AmericaNorthDakotaCenter = 'America/North_Dakota/Center',\n  AmericaNorthDakotaNewSalem = 'America/North_Dakota/New_Salem',\n  AmericaOjinaga = 'America/Ojinaga',\n  AmericaPanama = 'America/Panama',\n  AmericaPangnirtung = 'America/Pangnirtung',\n  AmericaParamaribo = 'America/Paramaribo',\n  AmericaPhoenix = 'America/Phoenix',\n  AmericaPortAuPrince = 'America/Port-au-Prince',\n  AmericaPortOfSpain = 'America/Port_of_Spain',\n  AmericaPortoVelho = 'America/Porto_Velho',\n  AmericaPuertoRico = 'America/Puerto_Rico',\n  AmericaRainyRiver = 'America/Rainy_River',\n  AmericaRankinInlet = 'America/Rankin_Inlet',\n  AmericaRecife = 'America/Recife',\n  AmericaRegina = 'America/Regina',\n  AmericaResolute = 'America/Resolute',\n  AmericaRioBranco = 'America/Rio_Branco',\n  AmericaSantaIsabel = 'America/Santa_Isabel',\n  AmericaSantarem = 'America/Santarem',\n  AmericaSantiago = 'America/Santiago',\n  AmericaSantoDomingo = 'America/Santo_Domingo',\n  AmericaSaoPaulo = 'America/Sao_Paulo',\n  AmericaScoresbysund = 'America/Scoresbysund',\n  AmericaShiprock = 'America/Shiprock',\n  AmericaSitka = 'America/Sitka',\n  AmericaStBarthelemy = 'America/St_Barthelemy',\n  AmericaStJohns = 'America/St_Johns',\n  AmericaStKitts = 'America/St_Kitts',\n  AmericaStLucia = 'America/St_Lucia',\n  AmericaStThomas = 'America/St_Thomas',\n  AmericaStVincent = 'America/St_Vincent',\n  AmericaSwiftCurrent = 'America/Swift_Current',\n  AmericaTegucigalpa = 'America/Tegucigalpa',\n  AmericaThule = 'America/Thule',\n  AmericaThunderBay = 'America/Thunder_Bay',\n  AmericaTijuana = 'America/Tijuana',\n  AmericaToronto = 'America/Toronto',\n  AmericaTortola = 'America/Tortola',\n  AmericaVancouver = 'America/Vancouver',\n  AmericaWhitehorse = 'America/Whitehorse',\n  AmericaWinnipeg = 'America/Winnipeg',\n  AmericaYakutat = 'America/Yakutat',\n  AmericaYellowknife = 'America/Yellowknife',\n  AntarcticaCasey = 'Antarctica/Casey',\n  AntarcticaDavis = 'Antarctica/Davis',\n  AntarcticaDumontDUrville = 'Antarctica/DumontDUrville',\n  AntarcticaMacquarie = 'Antarctica/Macquarie',\n  AntarcticaMawson = 'Antarctica/Mawson',\n  AntarcticaMcMurdo = 'Antarctica/McMurdo',\n  AntarcticaPalmer = 'Antarctica/Palmer',\n  AntarcticaRothera = 'Antarctica/Rothera',\n  AntarcticaSyowa = 'Antarctica/Syowa',\n  AntarcticaTroll = 'Antarctica/Troll',\n  AntarcticaVostok = 'Antarctica/Vostok',\n  ArcticLongyearbyen = 'Arctic/Longyearbyen',\n  AsiaAden = 'Asia/Aden',\n  AsiaAlmaty = 'Asia/Almaty',\n  AsiaAmman = 'Asia/Amman',\n  AsiaAnadyr = 'Asia/Anadyr',\n  AsiaAqtau = 'Asia/Aqtau',\n  AsiaAqtobe = 'Asia/Aqtobe',\n  AsiaAshgabat = 'Asia/Ashgabat',\n  AsiaBaghdad = 'Asia/Baghdad',\n  AsiaBahrain = 'Asia/Bahrain',\n  AsiaBaku = 'Asia/Baku',\n  AsiaBangkok = 'Asia/Bangkok',\n  AsiaBarnaul = 'Asia/Barnaul',\n  AsiaBeirut = 'Asia/Beirut',\n  AsiaBishkek = 'Asia/Bishkek',\n  AsiaBrunei = 'Asia/Brunei',\n  AsiaChita = 'Asia/Chita',\n  AsiaChoibalsan = 'Asia/Choibalsan',\n  AsiaColombo = 'Asia/Colombo',\n  AsiaDamascus = 'Asia/Damascus',\n  AsiaDhaka = 'Asia/Dhaka',\n  AsiaDili = 'Asia/Dili',\n  AsiaDubai = 'Asia/Dubai',\n  AsiaDushanbe = 'Asia/Dushanbe',\n  AsiaFamagusta = 'Asia/Famagusta',\n  AsiaGaza = 'Asia/Gaza',\n  AsiaHebron = 'Asia/Hebron',\n  AsiaHoChiMinh = 'Asia/Ho_Chi_Minh',\n  AsiaHongKong = 'Asia/Hong_Kong',\n  AsiaHovd = 'Asia/Hovd',\n  AsiaIrkutsk = 'Asia/Irkutsk',\n  AsiaJakarta = 'Asia/Jakarta',\n  AsiaJayapura = 'Asia/Jayapura',\n  AsiaJerusalem = 'Asia/Jerusalem',\n  AsiaKabul = 'Asia/Kabul',\n  AsiaKamchatka = 'Asia/Kamchatka',\n  AsiaKarachi = 'Asia/Karachi',\n  AsiaKathmandu = 'Asia/Kathmandu',\n  AsiaKhandyga = 'Asia/Khandyga',\n  AsiaKolkata = 'Asia/Kolkata',\n  AsiaKrasnoyarsk = 'Asia/Krasnoyarsk',\n  AsiaKualaLumpur = 'Asia/Kuala_Lumpur',\n  AsiaKuching = 'Asia/Kuching',\n  AsiaKuwait = 'Asia/Kuwait',\n  AsiaMacau = 'Asia/Macau',\n  AsiaMagadan = 'Asia/Magadan',\n  AsiaMakassar = 'Asia/Makassar',\n  AsiaManila = 'Asia/Manila',\n  AsiaMuscat = 'Asia/Muscat',\n  AsiaNicosia = 'Asia/Nicosia',\n  AsiaNovokuznetsk = 'Asia/Novokuznetsk',\n  AsiaNovosibirsk = 'Asia/Novosibirsk',\n  AsiaOmsk = 'Asia/Omsk',\n  AsiaOral = 'Asia/Oral',\n  AsiaPhnomPenh = 'Asia/Phnom_Penh',\n  AsiaPontianak = 'Asia/Pontianak',\n  AsiaPyongyang = 'Asia/Pyongyang',\n  AsiaQatar = 'Asia/Qatar',\n  AsiaQyzylorda = 'Asia/Qyzylorda',\n  AsiaRangoon = 'Asia/Rangoon',\n  AsiaRiyadh = 'Asia/Riyadh',\n  AsiaSakhalin = 'Asia/Sakhalin',\n  AsiaSamarkand = 'Asia/Samarkand',\n  AsiaSeoul = 'Asia/Seoul',\n  AsiaShanghai = 'Asia/Shanghai',\n  AsiaSingapore = 'Asia/Singapore',\n  AsiaSrednekolymsk = 'Asia/Srednekolymsk',\n  AsiaTaipei = 'Asia/Taipei',\n  AsiaTashkent = 'Asia/Tashkent',\n  AsiaTbilisi = 'Asia/Tbilisi',\n  AsiaTehran = 'Asia/Tehran',\n  AsiaThimphu = 'Asia/Thimphu',\n  AsiaTokyo = 'Asia/Tokyo',\n  AsiaTomsk = 'Asia/Tomsk',\n  AsiaUlaanbaatar = 'Asia/Ulaanbaatar',\n  AsiaUrumqi = 'Asia/Urumqi',\n  AsiaUstNera = 'Asia/Ust-Nera',\n  AsiaVientiane = 'Asia/Vientiane',\n  AsiaVladivostok = 'Asia/Vladivostok',\n  AsiaYakutsk = 'Asia/Yakutsk',\n  AsiaYekaterinburg = 'Asia/Yekaterinburg',\n  AsiaYerevan = 'Asia/Yerevan',\n  AtlanticAzores = 'Atlantic/Azores',\n  AtlanticBermuda = 'Atlantic/Bermuda',\n  AtlanticCanary = 'Atlantic/Canary',\n  AtlanticCapeVerde = 'Atlantic/Cape_Verde',\n  AtlanticFaroe = 'Atlantic/Faroe',\n  AtlanticMadeira = 'Atlantic/Madeira',\n  AtlanticReykjavik = 'Atlantic/Reykjavik',\n  AtlanticSouthGeorgia = 'Atlantic/South_Georgia',\n  AtlanticStHelena = 'Atlantic/St_Helena',\n  AtlanticStanley = 'Atlantic/Stanley',\n  AustraliaAdelaide = 'Australia/Adelaide',\n  AustraliaBrisbane = 'Australia/Brisbane',\n  AustraliaBrokenHill = 'Australia/Broken_Hill',\n  AustraliaCanberra = 'Australia/Canberra',\n  AustraliaCurrie = 'Australia/Currie',\n  AustraliaDarwin = 'Australia/Darwin',\n  AustraliaEucla = 'Australia/Eucla',\n  AustraliaHobart = 'Australia/Hobart',\n  AustraliaLindeman = 'Australia/Lindeman',\n  AustraliaLordHowe = 'Australia/Lord_Howe',\n  AustraliaMelbourne = 'Australia/Melbourne',\n  AustraliaPerth = 'Australia/Perth',\n  AustraliaSydney = 'Australia/Sydney',\n  EuropeAmsterdam = 'Europe/Amsterdam',\n  EuropeAndorra = 'Europe/Andorra',\n  EuropeAthens = 'Europe/Athens',\n  EuropeBelgrade = 'Europe/Belgrade',\n  EuropeBerlin = 'Europe/Berlin',\n  EuropeBratislava = 'Europe/Bratislava',\n  EuropeBrussels = 'Europe/Brussels',\n  EuropeBucharest = 'Europe/Bucharest',\n  EuropeBudapest = 'Europe/Budapest',\n  EuropeBusingen = 'Europe/Busingen',\n  EuropeChisinau = 'Europe/Chisinau',\n  EuropeCopenhagen = 'Europe/Copenhagen',\n  EuropeDublin = 'Europe/Dublin',\n  EuropeGibraltar = 'Europe/Gibraltar',\n  EuropeGuernsey = 'Europe/Guernsey',\n  EuropeHelsinki = 'Europe/Helsinki',\n  EuropeIsleOfMan = 'Europe/Isle_of_Man',\n  EuropeIstanbul = 'Europe/Istanbul',\n  EuropeJersey = 'Europe/Jersey',\n  EuropeKaliningrad = 'Europe/Kaliningrad',\n  EuropeKiev = 'Europe/Kiev',\n  EuropeKirov = 'Europe/Kirov',\n  EuropeLisbon = 'Europe/Lisbon',\n  EuropeLjubljana = 'Europe/Ljubljana',\n  EuropeLondon = 'Europe/London',\n  EuropeLuxembourg = 'Europe/Luxembourg',\n  EuropeMadrid = 'Europe/Madrid',\n  EuropeMalta = 'Europe/Malta',\n  EuropeMariehamn = 'Europe/Mariehamn',\n  EuropeMinsk = 'Europe/Minsk',\n  EuropeMonaco = 'Europe/Monaco',\n  EuropeMoscow = 'Europe/Moscow',\n  EuropeOslo = 'Europe/Oslo',\n  EuropeParis = 'Europe/Paris',\n  EuropePodgorica = 'Europe/Podgorica',\n  EuropePrague = 'Europe/Prague',\n  EuropeRiga = 'Europe/Riga',\n  EuropeRome = 'Europe/Rome',\n  EuropeSamara = 'Europe/Samara',\n  EuropeSanMarino = 'Europe/San_Marino',\n  EuropeSarajevo = 'Europe/Sarajevo',\n  EuropeSimferopol = 'Europe/Simferopol',\n  EuropeSkopje = 'Europe/Skopje',\n  EuropeSofia = 'Europe/Sofia',\n  EuropeStockholm = 'Europe/Stockholm',\n  EuropeTallinn = 'Europe/Tallinn',\n  EuropeTirane = 'Europe/Tirane',\n  EuropeUzhgorod = 'Europe/Uzhgorod',\n  EuropeVaduz = 'Europe/Vaduz',\n  EuropeVatican = 'Europe/Vatican',\n  EuropeVienna = 'Europe/Vienna',\n  EuropeVilnius = 'Europe/Vilnius',\n  EuropeVolgograd = 'Europe/Volgograd',\n  EuropeWarsaw = 'Europe/Warsaw',\n  EuropeZagreb = 'Europe/Zagreb',\n  EuropeZaporozhye = 'Europe/Zaporozhye',\n  EuropeZurich = 'Europe/Zurich',\n  GMT = 'GMT',\n  IndianAntananarivo = 'Indian/Antananarivo',\n  IndianChagos = 'Indian/Chagos',\n  IndianChristmas = 'Indian/Christmas',\n  IndianCocos = 'Indian/Cocos',\n  IndianComoro = 'Indian/Comoro',\n  IndianKerguelen = 'Indian/Kerguelen',\n  IndianMahe = 'Indian/Mahe',\n  IndianMaldives = 'Indian/Maldives',\n  IndianMauritius = 'Indian/Mauritius',\n  IndianMayotte = 'Indian/Mayotte',\n  IndianReunion = 'Indian/Reunion',\n  PacificApia = 'Pacific/Apia',\n  PacificAuckland = 'Pacific/Auckland',\n  PacificBougainville = 'Pacific/Bougainville',\n  PacificChatham = 'Pacific/Chatham',\n  PacificChuuk = 'Pacific/Chuuk',\n  PacificEaster = 'Pacific/Easter',\n  PacificEfate = 'Pacific/Efate',\n  PacificEnderbury = 'Pacific/Enderbury',\n  PacificFakaofo = 'Pacific/Fakaofo',\n  PacificFiji = 'Pacific/Fiji',\n  PacificFunafuti = 'Pacific/Funafuti',\n  PacificGalapagos = 'Pacific/Galapagos',\n  PacificGambier = 'Pacific/Gambier',\n  PacificGuadalcanal = 'Pacific/Guadalcanal',\n  PacificGuam = 'Pacific/Guam',\n  PacificHonolulu = 'Pacific/Honolulu',\n  PacificJohnston = 'Pacific/Johnston',\n  PacificKiritimati = 'Pacific/Kiritimati',\n  PacificKosrae = 'Pacific/Kosrae',\n  PacificKwajalein = 'Pacific/Kwajalein',\n  PacificMajuro = 'Pacific/Majuro',\n  PacificMarquesas = 'Pacific/Marquesas',\n  PacificMidway = 'Pacific/Midway',\n  PacificNauru = 'Pacific/Nauru',\n  PacificNiue = 'Pacific/Niue',\n  PacificNorfolk = 'Pacific/Norfolk',\n  PacificNoumea = 'Pacific/Noumea',\n  PacificPagoPago = 'Pacific/Pago_Pago',\n  PacificPalau = 'Pacific/Palau',\n  PacificPitcairn = 'Pacific/Pitcairn',\n  PacificPohnpei = 'Pacific/Pohnpei',\n  PacificPonape = 'Pacific/Ponape',\n  PacificPortMoresby = 'Pacific/Port_Moresby',\n  PacificRarotonga = 'Pacific/Rarotonga',\n  PacificSaipan = 'Pacific/Saipan',\n  PacificSamoa = 'Pacific/Samoa',\n  PacificTahiti = 'Pacific/Tahiti',\n  PacificTarawa = 'Pacific/Tarawa',\n  PacificTongatapu = 'Pacific/Tongatapu',\n  PacificTruk = 'Pacific/Truk',\n  PacificWake = 'Pacific/Wake',\n  PacificWallis = 'Pacific/Wallis',\n  PacificYap = 'Pacific/Yap',\n  // USAlaska = 'US/Alaska',\n  // USAleutian = 'US/Aleutian',\n  // USArizona = 'US/Arizona',\n  // USCentral = 'US/Central',\n  // USCentralStandard = 'US/Central Standard',\n  // USCentralDaylight = 'US/Central Daylight',\n  // USEastern = 'US/Eastern',\n  // USEasternStandard = 'US/Eastern Standard',\n  // USEasternDaylight = 'US/Eastern Daylight',\n  // USHawaii = 'US/Hawaii',\n  // USMountain = 'US/Mountain',\n  // USMountainStandard = 'US/Mountain Standard',\n  // USMountainDaylight = 'US/Mountain Daylight',\n  // USPacific = 'US/Pacific',\n  // USPacificStandard = 'US/Pacific Standard',\n  // USPacificDaylight = 'US/Pacific Daylight',\n  // USPacificIsland = 'US/Pacific-Island',\n}\n\nexport type TimezoneRegion = {\n  id: TimezoneRegions;\n  name: string;\n  offset: TimezoneOffset;\n  timezone: Timezones;\n};\n", "import { Timezones } from './timezones';\n\nexport enum TimezoneOffset {\n  UTC_MINUS_12 = 'UTC-12',\n  UTC_MINUS_11_30 = 'UTC-11:30',\n  UTC_MINUS_11 = 'UTC-11',\n  UTC_MINUS_10_30 = 'UTC-10:30',\n  UTC_MINUS_10 = 'UTC-10',\n  UTC_MINUS_9_30 = 'UTC-9:30',\n  UTC_MINUS_9 = 'UTC-09',\n  UTC_MINUS_8_45 = 'UTC-8:45',\n  UTC_MINUS_8 = 'UTC-08',\n  UTC_MINUS_7 = 'UTC-07',\n  UTC_MINUS_6_30 = 'UTC-6:30',\n  UTC_MINUS_6 = 'UTC-06',\n  UTC_MINUS_5_45 = 'UTC-5:45',\n  UTC_MINUS_5_30 = 'UTC-5:30',\n  UTC_MINUS_5 = 'UTC-05',\n  UTC_MINUS_4_30 = 'UTC-4:30',\n  UTC_MINUS_4 = 'UTC-04',\n  UTC_MINUS_3_30 = 'UTC-3:30',\n  UTC_MINUS_3 = 'UTC-03',\n  UTC_MINUS_2_30 = 'UTC-2:30',\n  UTC_MINUS_2 = 'UTC-02',\n  UTC_MINUS_1 = 'UTC-01',\n  UTC_0 = 'UTC+00',\n  UTC_PLUS_1 = 'UTC+01',\n  UTC_PLUS_2 = 'UTC+02',\n  UTC_PLUS_3 = 'UTC+03',\n  UTC_PLUS_3_30 = 'UTC+3:30',\n  UTC_PLUS_4 = 'UTC+04',\n  UTC_PLUS_4_30 = 'UTC+4:30',\n  UTC_PLUS_5 = 'UTC+05',\n  UTC_PLUS_5_30 = 'UTC+5:30',\n  UTC_PLUS_5_45 = 'UTC+5:45',\n  UTC_PLUS_6 = 'UTC+06',\n  UTC_PLUS_6_30 = 'UTC+6:30',\n  UTC_PLUS_7 = 'UTC+07',\n  UTC_PLUS_8 = 'UTC+08',\n  UTC_PLUS_8_45 = 'UTC+8:45',\n  UTC_PLUS_9 = 'UTC+09',\n  UTC_PLUS_9_30 = 'UTC+9:30',\n  UTC_PLUS_10 = 'UTC+10',\n  UTC_PLUS_10_30 = 'UTC+10:30',\n  UTC_PLUS_11 = 'UTC+11',\n  UTC_PLUS_11_30 = 'UTC+11:30',\n  UTC_PLUS_12 = 'UTC+12',\n  UTC_PLUS_12_45 = 'UTC+12:45',\n  UTC_PLUS_13 = 'UTC+13',\n  UTC_PLUS_13_45 = 'UTC+13:45',\n  UTC_PLUS_14 = 'UTC+14',\n}\n\nexport type TimezoneDetails = {\n  dst: {\n    is: boolean;\n    uses: boolean;\n  };\n  id: Timezones;\n  name: string;\n  offset: TimezoneOffset;\n};\n", "import { TimezoneDetails, TimezoneOffset } from './timezone';\n\nexport enum Timezones {\n  AcreTime = 'ACT',\n  AfghanistanTime = 'AFT',\n  AIXCentralEuropeanTime = 'DFT',\n  AlaskaDaylightTime = 'AKDT',\n  AlaskaStandardTime = 'AKST',\n  AlmaAtaTime = 'ALMT',\n  AmazonSummerTime = 'AMST',\n  AmazonTime = 'AMT',\n  AnadyrTime = 'ANAT',\n  AqtobeTime = 'AQTT',\n  ArabiaStandardTime = 'AST',\n  ArgentinaTime = 'ART',\n  ArmeniaTime = 'AMT',\n  ASEANCommonTime = 'ASEAN',\n  AtlanticDaylightTime = 'ADT',\n  AtlanticStandardTime = 'AST',\n  AustralianCentralDaylightSavingTime = 'ACDT',\n  AustralianCentralStandardTime = 'ACST',\n  AustralianCentralWesternStandardTime = 'ACWST',\n  AustralianEasternDaylightSavingTime = 'AEDT',\n  AustralianEasternStandardTime = 'AEST',\n  AustralianEasternTime = 'AET',\n  AustralianWesternStandardTime = 'AWST',\n  AzerbaijanTime = 'AZT',\n  AzoresStandardTime = 'AZOT',\n  AzoresSummerTime = 'AZOST',\n  BakerIslandTime = 'BIT',\n  BangladeshStandardTime = 'BST',\n  BhutanTime = 'BTT',\n  BoliviaTime = 'BOT',\n  BougainvilleStandardTime = 'BST',\n  BrasiliaSummerTime = 'BRST',\n  BrasiliaTime = 'BRT',\n  BritishIndianOceanTime = 'BIOT',\n  BritishSummerTime = 'BST',\n  BruneiTime = 'BNT',\n  CapeVerdeTime = 'CVT',\n  CentralAfricaTime = 'CAT',\n  CentralDaylightTime = 'CDT',\n  CentralEuropeanSummerTime = 'CEST',\n  CentralEuropeanTime = 'CET',\n  CentralIndonesiaTime = 'WITA',\n  CentralStandardTime = 'CST',\n  CentralTime = 'CT',\n  CentralWesternStandardTime = 'CWST',\n  ChamorroStandardTime = 'CHST',\n  ChathamDaylightTime = 'CHADT',\n  ChathamStandardTime = 'CHAST',\n  ChileStandardTime = 'CLT',\n  ChileSummerTime = 'CLST',\n  ChinaStandardTime = 'CST',\n  ChoibalsanStandardTime = 'CHOT',\n  ChoibalsanSummerTime = 'CHOST',\n  ChristmasIslandTime = 'CXT',\n  ChuukTime = 'CHUT',\n  ClipptertonIslandStandardTime = 'CIST',\n  CocosIslandsTime = 'CCT',\n  ColombiaSummerTime = 'COST',\n  ColombiaTime = 'COT',\n  CookIslandTime = 'CKT',\n  CoordinatedUniversalTime = 'UTC',\n  CubaDaylightTime = 'CDT',\n  CubaStandardTime = 'CST',\n  DavisTime = 'DAVT',\n  DumontDUrvilleTime = 'DDUT',\n  EastAfricaTime = 'EAT',\n  EasterIslandStandardTime = 'EAST',\n  EasterIslandSummerTime = 'EASST',\n  EasternCaribbeanTime = 'ECT',\n  EasternDaylightTime = 'EDT',\n  EasternEuropeanSummerTime = 'EEST',\n  EasternEuropeanTime = 'EET',\n  EasternGreenlandSummerTime = 'EGST',\n  EasternGreenlandTime = 'EGT',\n  EasternIndonesianTime = 'WIT',\n  EasternStandardTime = 'EST',\n  EasternTime = 'ET',\n  EcuadorTime = 'ECT',\n  FalklandIslandsSummerTime = 'FKST',\n  FalklandIslandsTime = 'FKT',\n  FernandoDeNoronhaTime = 'FNT',\n  FijiTime = 'FJT',\n  FrenchGuianaTime = 'GFT',\n  FrenchSouthernAndAntarcticTime = 'TFT',\n  FurtherEasternEuropeanTime = 'FET',\n  GalapagosTime = 'GALT',\n  GambierIslandTime = 'GIT',\n  GambierIslandsTime = 'GAMT',\n  GeorgiaStandardTime = 'GET',\n  GilbertIslandTime = 'GILT',\n  GreenwichMeanTime = 'GMT',\n  GulfStandardTime = 'GST',\n  GuyanaTime = 'GYT',\n  HawaiiAleutianDaylightTime = 'HDT',\n  HawaiiAleutianStandardTime = 'HST',\n  HeardAndMcDonaldIslandsTime = 'HMT',\n  HeureAvanceeDEuropeCentraleTime = 'HAEC',\n  HongKongTime = 'HKT',\n  HovdSummerTime = 'HOVST',\n  HovdTime = 'HOVT',\n  IndianOceanTime = 'IOT',\n  IndianStandardTime = 'IST',\n  IndochinaTime = 'ICT',\n  InternationalDayLineWestTime = 'IDLW',\n  IranDaylightTime = 'IRDT',\n  IranStandardTime = 'IRST',\n  IrishStandardTime = 'IST',\n  IrkutskSummerTime = 'IRKST',\n  IrkutskTime = 'IRKT',\n  IsraelDaylightTime = 'IDT',\n  IsraelStandardTime = 'IST',\n  JapanStandardTime = 'JST',\n  KaliningradTime = 'KALT',\n  KamchatkaTime = 'KAMT',\n  KoreaStandardTime = 'KST',\n  KosraeTime = 'KOST',\n  KrasnoyarskSummerTime = 'KRAST',\n  KrasnoyarskTime = 'KRAT',\n  KyrgyzstanTime = 'KGT',\n  LineIslandsTime = 'LINT',\n  KazakhstanStandardTime = 'KAST',\n  LordHoweStandardTime = 'LHST',\n  LordHoweSummerTime = 'LHST',\n  MacquarieIslandStationTime = 'MIST',\n  MagadanTime = 'MAGT',\n  MalaysiaStandardTime = 'MST',\n  MalaysiaTime = 'MYT',\n  MaldivesTime = 'MVT',\n  MarquesasIslandsTime = 'MART',\n  MarshallIslandsTime = 'MHT',\n  MauritiusTime = 'MUT',\n  MawsonStationTime = 'MAWT',\n  MiddleEuropeanSummerTime = 'MEDT',\n  MiddleEuropeanTime = 'MET',\n  MoscowTime = 'MSK',\n  MountainDaylightTime = 'MDT',\n  MountainStandardTime = 'MST',\n  MyanmarStandardTime = 'MMT',\n  NepalTime = 'NCT',\n  NauruTime = 'NRT',\n  NewCaledoniaTime = 'NCT',\n  NewZealandDaylightTime = 'NZDT',\n  NewZealandStandardTime = 'NZST',\n  NewfoundlandDaylightTime = 'NDT',\n  NewfoundlandStandardTime = 'NST',\n  NewfoundlandTime = 'NT',\n  NiueTime = 'NUT',\n  NorfolkIslandTime = 'NFT',\n  NovosibirskTime = 'NOVT',\n  OmskTime = 'OMST',\n  OralTime = 'ORAT',\n  PacificDaylightTime = 'PDT',\n  PacificStandardTime = 'PST',\n  PakistanStandardTime = 'PKT',\n  PalauTime = 'PWT',\n  PapuaNewGuineaTime = 'PGT',\n  ParaguaySummerTime = 'PYST',\n  ParaguayTime = 'PYT',\n  PeruTime = 'PET',\n  PhilippineStandardTime = 'PHST',\n  PhilippineTime = 'PHT',\n  PhoenixIslandTime = 'PHOT',\n  PitcairnTime = 'PST',\n  PohnpeiStandardTime = 'PONT',\n  ReunionTime = 'RET',\n  RotheraResearchStationTime = 'ROTT',\n  SaintPierreAndMiquelonDaylightTime = 'PMDT',\n  SaintPierreAndMiquelonStandardTime = 'PMST',\n  SakhalinIslandTime = 'SAKT',\n  SamaraTime = 'SAMT',\n  SamoaDaylightTime = 'SDT',\n  SamoaStandardTime = 'SST',\n  SeychellesTime = 'SCT',\n  ShowaStationTime = 'SYOT',\n  SingaporeStandardTime = 'SST',\n  SingaporeTime = 'SGT',\n  SolomonIslandsTime = 'SBT',\n  SouthAfricanStandardTime = 'SAST',\n  SouthGeorgiaAndTheSouthSandwichIslandsTime = 'GST',\n  SrednekolymskTime = 'SRET',\n  SriLankaStandardTime = 'SLST',\n  SurinameTime = 'SRT',\n  TahitiTime = 'TAHT',\n  TajikistanTime = 'TJT',\n  ThailandStandardTime = 'THA',\n  TimorLesteTime = 'TLT',\n  TokelauTime = 'TKT',\n  TongaTime = 'TOT',\n  TurkeyTime = 'TRT',\n  TurkmenistanTime = 'TMT',\n  TuvaluTime = 'TVT',\n  UlaanbaatarStandardTime = 'ULAT',\n  UlaanbaatarSummerTime = 'ULAST',\n  UruguayStandardTime = 'UYT',\n  UruguaySummerTime = 'UYST',\n  UzbekistanTime = 'UZT',\n  VanuatuTime = 'VUT',\n  VenezuelaStandardTime = 'VET',\n  VladivostokTime = 'VLAT',\n  VolgogradTime = 'VOLT',\n  VostokStationTime = 'VOST',\n  WakeIslandTime = 'WAKT',\n  WestAfricaSummerTime = 'WAST',\n  WestAfricaTime = 'WAT',\n  WestGreenlandSummerTime = 'WGST',\n  WestGreenlandTime = 'WGT',\n  WestKazakhstanTime = 'WKT',\n  WesternEuropeanSummerTime = 'WEDT',\n  WesternEuropeanTime = 'WET',\n  WesternIndonesianTime = 'WIT',\n  WesternStandardTime = 'WST',\n  YakutskTime = 'YAKT',\n  YekaterinburgTime = 'YEKT',\n}\n\nexport const AcreTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AcreTime,\n  name: 'Acre Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const AfghanistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AfghanistanTime,\n  name: 'Afghanistan Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const AIXCentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AIXCentralEuropeanTime,\n  name: 'AIX Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const AlaskaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AlaskaDaylightTime,\n  name: 'Alaska Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const AlaskaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlaskaStandardTime,\n  name: 'Alaska Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const AlmaAtaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AlmaAtaTime,\n  name: 'Alma-Ata Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const AmazonSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonSummerTime,\n  name: 'Amazon Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AmazonTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AmazonTime,\n  name: 'Amazon Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AnadyrTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AnadyrTime,\n  name: 'Anadyr Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const AqtobeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AqtobeTime,\n  name: 'Aqtobe Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ArabiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArabiaStandardTime,\n  name: 'Arabia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const ArgentinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArgentinaTime,\n  name: 'Argentina Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ArmeniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ArmeniaTime,\n  name: 'Armenia Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AtlanticDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AtlanticDaylightTime,\n  name: 'Atlantic Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const AtlanticStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AtlanticStandardTime,\n  name: 'Atlantic Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const AustralianCentralDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralDaylightSavingTime,\n  name: 'Australian Central Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const AustralianCentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralStandardTime,\n  name: 'Australian Central Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const AustralianCentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianCentralWesternStandardTime,\n  name: 'Australian Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const AustralianEasternDaylightSavingTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternDaylightSavingTime,\n  name: 'Australian Eastern Daylight Saving Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const AustralianEasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternStandardTime,\n  name: 'Australian Eastern Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianEasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianEasternTime,\n  name: 'Australian Eastern Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const AustralianWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AustralianWesternStandardTime,\n  name: 'Australian Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const AzerbaijanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzerbaijanTime,\n  name: 'Azerbaijan Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const AzoresStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.AzoresStandardTime,\n  name: 'Azores Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const AzoresSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.AzoresSummerTime,\n  name: 'Azores Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const BakerIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BakerIslandTime,\n  name: 'Baker Island Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const BangladeshStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BangladeshStandardTime,\n  name: 'Bangladesh Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BhutanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BhutanTime,\n  name: 'Bhutan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BoliviaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BoliviaTime,\n  name: 'Bolivia Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const BougainvilleStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BougainvilleStandardTime,\n  name: 'Bougainville Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const BrasiliaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BrasiliaSummerTime,\n  name: 'Brasilia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const BrasiliaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BrasiliaTime,\n  name: 'Brasilia Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const BritishIndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BritishIndianOceanTime,\n  name: 'British Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const BritishSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.BritishSummerTime,\n  name: 'British Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const BruneiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.BruneiTime,\n  name: 'Brunei Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CapeVerdeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CapeVerdeTime,\n  name: 'Cape Verde Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const CentralAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralAfricaTime,\n  name: 'Central Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralDaylightTime,\n  name: 'Central Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanSummerTime,\n  name: 'Central European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const CentralEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralEuropeanTime,\n  name: 'Central European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const CentralIndonesiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralIndonesiaTime,\n  name: 'Central Indonesia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const CentralStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralStandardTime,\n  name: 'Central Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const CentralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralTime,\n  name: 'Central Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CentralWesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CentralWesternStandardTime,\n  name: 'Central Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n};\n\nexport const ChamorroStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChamorroStandardTime,\n  name: 'Chamorro Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ChathamDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChathamDaylightTime,\n  name: 'Chatham Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13_45,\n};\n\nexport const ChathamStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChathamStandardTime,\n  name: 'Chatham Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12_45,\n};\n\nexport const ChileStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChileStandardTime,\n  name: 'Chile Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ChileSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChileSummerTime,\n  name: 'Chile Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ChinaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChinaStandardTime,\n  name: 'China Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanStandardTime,\n  name: 'Choibalsan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const ChoibalsanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ChoibalsanSummerTime,\n  name: 'Choibalsan Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const ChristmasIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChristmasIslandTime,\n  name: 'Christmas Island Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const ChuukTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ChuukTime,\n  name: 'Chuuk Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ClipptertonIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ClipptertonIslandStandardTime,\n  name: 'Clippterton Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const CocosIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CocosIslandsTime,\n  name: 'Cocos Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const ColombiaSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.ColombiaSummerTime,\n  name: 'Colombia Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const ColombiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ColombiaTime,\n  name: 'Colombia Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const CookIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CookIslandTime,\n  name: 'Cook Island Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const CoordinatedUniversalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CoordinatedUniversalTime,\n  name: 'Coordinated Universal Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const CubaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.CubaDaylightTime,\n  name: 'Cuba Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const CubaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.CubaStandardTime,\n  name: 'Cuba Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const DavisTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DavisTime,\n  name: 'Davis Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const DumontDUrvilleTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.DumontDUrvilleTime,\n  name: \"Dumont D'Urville Time\",\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const EastAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EastAfricaTime,\n  name: 'East Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasterIslandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasterIslandStandardTime,\n  name: 'Easter Island Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const EasterIslandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasterIslandSummerTime,\n  name: 'Easter Island Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternCaribbeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternCaribbeanTime,\n  name: 'Eastern Caribbean Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternDaylightTime,\n  name: 'Eastern Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const EasternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanSummerTime,\n  name: 'Eastern European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const EasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternEuropeanTime,\n  name: 'Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const EasternGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandSummerTime,\n  name: 'Eastern Greenland Summer Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const EasternGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternGreenlandTime,\n  name: 'Eastern Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_1,\n};\n\nexport const EasternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternIndonesianTime,\n  name: 'Eastern Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const EasternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternStandardTime,\n  name: 'Eastern Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EasternTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EasternTime,\n  name: 'Eastern Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const EcuadorTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.EcuadorTime,\n  name: 'Ecuador Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const FalklandIslandsSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsSummerTime,\n  name: 'Falkland Islands Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FalklandIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FalklandIslandsTime,\n  name: 'Falkland Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const FernandoDeNoronhaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FernandoDeNoronhaTime,\n  name: 'Fernando de Noronha Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const FijiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FijiTime,\n  name: 'Fiji Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const FrenchGuianaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchGuianaTime,\n  name: 'French Guiana Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const FrenchSouthernAndAntarcticTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FrenchSouthernAndAntarcticTime,\n  name: 'French Southern and Antarctic Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const FurtherEasternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.FurtherEasternEuropeanTime,\n  name: 'Further Eastern European Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const GalapagosTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GalapagosTime,\n  name: 'Galapagos Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const GambierIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandTime,\n  name: 'Gambier Island Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GambierIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GambierIslandsTime,\n  name: 'Gambier Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const GeorgiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GeorgiaStandardTime,\n  name: 'Georgia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GilbertIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GilbertIslandTime,\n  name: 'Gilbert Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const GreenwichMeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GreenwichMeanTime,\n  name: 'Greenwich Mean Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const GulfStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GulfStandardTime,\n  name: 'Gulf Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const GuyanaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.GuyanaTime,\n  name: 'Guyana Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const HawaiiAleutianDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianDaylightTime,\n  name: 'Hawaii-Aleutian Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_9,\n};\n\nexport const HawaiiAleutianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HawaiiAleutianStandardTime,\n  name: 'Hawaii-Aleutian Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const HeardAndMcDonaldIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HeardAndMcDonaldIslandsTime,\n  name: 'Heard and McDonald Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const HongKongTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HongKongTime,\n  name: 'Hong Kong Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdSummerTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.HovdSummerTime,\n  name: 'Hovd Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const HovdTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.HovdTime,\n  name: 'Hovd Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const IndianOceanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianOceanTime,\n  name: 'Indian Ocean Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IndianStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndianStandardTime,\n  name: 'Indian Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const IndochinaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IndochinaTime,\n  name: 'Indochina Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const InternationalDayLineWestTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.InternationalDayLineWestTime,\n  name: 'International Day Line West Time',\n  offset: TimezoneOffset.UTC_MINUS_12,\n};\n\nexport const IranDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IranDaylightTime,\n  name: 'Iran Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_4_30,\n};\n\nexport const IranStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IranStandardTime,\n  name: 'Iran Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_3_30,\n};\n\nexport const IrishStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrishStandardTime,\n  name: 'Irish Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const IrkutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IrkutskTime,\n  name: 'Irkutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const IsraelDaylightTime: TimezoneDetails = {\n  dst: {\n    is: true,\n    uses: true,\n  },\n  id: Timezones.IsraelDaylightTime,\n  name: 'Israel Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const IsraelStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.IsraelStandardTime,\n  name: 'Israel Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const JapanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.JapanStandardTime,\n  name: 'Japan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KaliningradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KaliningradTime,\n  name: 'Kaliningrad Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const KamchatkaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KamchatkaTime,\n  name: 'Kamchatka Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const KoreaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KoreaStandardTime,\n  name: 'Korea Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const KosraeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KosraeTime,\n  name: 'Kosrae Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const KrasnoyarskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KrasnoyarskTime,\n  name: 'Krasnoyarsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const KyrgyzstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.KyrgyzstanTime,\n  name: 'Kyrgyzstan Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const LineIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LineIslandsTime,\n  name: 'Line Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_14,\n};\n\nexport const LordHoweStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweStandardTime,\n  name: 'Lord Howe Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n};\n\nexport const LordHoweSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.LordHoweSummerTime,\n  name: 'Lord Howe Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MacquarieIslandStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MacquarieIslandStationTime,\n  name: 'Macquarie Island Station Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const MagadanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MagadanTime,\n  name: 'Magadan Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MalaysiaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaStandardTime,\n  name: 'Malaysia Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MalaysiaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MalaysiaTime,\n  name: 'Malaysia Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const MaldivesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MaldivesTime,\n  name: 'Maldives Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MarquesasIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarquesasIslandsTime,\n  name: 'Marquesas Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n};\n\nexport const MarshallIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MarshallIslandsTime,\n  name: 'Marshall Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const MauritiusTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MauritiusTime,\n  name: 'Mauritius Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const MawsonStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MawsonStationTime,\n  name: 'Mawson Station Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const MiddleEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanSummerTime,\n  name: 'Middle European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const MiddleEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MiddleEuropeanTime,\n  name: 'Middle European Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const MoscowTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MoscowTime,\n  name: 'Moscow Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const MountainDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainDaylightTime,\n  name: 'Mountain Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_6,\n};\n\nexport const MountainStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MountainStandardTime,\n  name: 'Mountain Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const MyanmarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.MyanmarStandardTime,\n  name: 'Myanmar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_6_30,\n};\n\nexport const NepalTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NepalTime,\n  name: 'Nepal Time',\n  offset: TimezoneOffset.UTC_PLUS_5_45,\n};\n\nexport const NauruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NauruTime,\n  name: 'Nauru Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewCaledoniaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewCaledoniaTime,\n  name: 'New Caledonia Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NewZealandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandDaylightTime,\n  name: 'New Zealand Daylight Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const NewZealandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewZealandStandardTime,\n  name: 'New Zealand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const NewfoundlandDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NewfoundlandDaylightTime,\n  name: 'Newfoundland Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2_30,\n};\n\nexport const NewfoundlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NewfoundlandTime,\n  name: 'Newfoundland Time',\n  offset: TimezoneOffset.UTC_MINUS_3_30,\n};\n\nexport const NiueTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NiueTime,\n  name: 'Niue Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const NorfolkIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n\n  id: Timezones.NorfolkIslandTime,\n  name: 'Norfolk Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const NovosibirskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.NovosibirskTime,\n  name: 'Novosibirsk Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const OmskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OmskTime,\n  name: 'Omsk Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const OralTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.OralTime,\n  name: 'Oral Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PacificDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificDaylightTime,\n  name: 'Pacific Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_7,\n};\n\nexport const PacificStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PacificStandardTime,\n  name: 'Pacific Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PakistanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PakistanStandardTime,\n  name: 'Pakistan Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const PalauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PalauTime,\n  name: 'Palau Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const PapuaNewGuineaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PapuaNewGuineaTime,\n  name: 'Papua New Guinea Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const ParaguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguaySummerTime,\n  name: 'Paraguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const ParaguayTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ParaguayTime,\n  name: 'Paraguay Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const PeruTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PeruTime,\n  name: 'Peru Time',\n  offset: TimezoneOffset.UTC_MINUS_5,\n};\n\nexport const PhilippineStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineStandardTime,\n  name: 'Philippine Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhillipineTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhilippineTime,\n  name: 'Philippine Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const PhoenixIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PhoenixIslandTime,\n  name: 'Phoenix Island Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const PitcairnTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PitcairnTime,\n  name: 'Pitcairn Time',\n  offset: TimezoneOffset.UTC_MINUS_8,\n};\n\nexport const PohnpeiStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.PohnpeiStandardTime,\n  name: 'Pohnpei Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const ReunionTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ReunionTime,\n  name: 'Reunion Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const RotheraResearchStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.RotheraResearchStationTime,\n  name: 'Rothera Research Station Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SaintPierreAndMiquelonDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonDaylightTime,\n  name: 'Saint Pierre and Miquelon Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SaintPierreAndMiquelonStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SaintPierreAndMiquelonStandardTime,\n  name: 'Saint Pierre and Miquelon Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const SakhalinIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SakhalinIslandTime,\n  name: 'Sakhalin Island Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SamaraTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamaraTime,\n  name: 'Samara Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const SamoaDaylightTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaDaylightTime,\n  name: 'Samoa Daylight Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const SamoaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SamoaStandardTime,\n  name: 'Samoa Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_11,\n};\n\nexport const SeychellesTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SeychellesTime,\n  name: 'Seychelles Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const ShowaStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ShowaStationTime,\n  name: 'Showa Station Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const SingaporeStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeStandardTime,\n  name: 'Singapore Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SingaporeTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SingaporeTime,\n  name: 'Singapore Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const SolomonIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SolomonIslandsTime,\n  name: 'Solomon Islands Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SouthAfricanStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthAfricanStandardTime,\n  name: 'South African Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const SouthGeorgiaAndTheSouthSandwichIslandsTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SouthGeorgiaAndTheSouthSandwichIslandsTime,\n  name: 'South Georgia and the South Sandwich Islands Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const SrednekolymskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SrednekolymskTime,\n  name: 'Srednekolymsk Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const SriLankaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SriLankaStandardTime,\n  name: 'Sri Lanka Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_5_30,\n};\n\nexport const SurinameTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.SurinameTime,\n  name: 'Suriname Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const TahitiTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TahitiTime,\n  name: 'Tahiti Time',\n  offset: TimezoneOffset.UTC_MINUS_10,\n};\n\nexport const TajikistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TajikistanTime,\n  name: 'Tajikistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const ThailandStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.ThailandStandardTime,\n  name: 'Thailand Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const TimorLesteTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TimorLesteTime,\n  name: 'Timor-Leste Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const TokelauTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TokelauTime,\n  name: 'Tokelau Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TongaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TongaTime,\n  name: 'Tonga Time',\n  offset: TimezoneOffset.UTC_PLUS_13,\n};\n\nexport const TurkeyTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkeyTime,\n  name: 'Turkey Time',\n  offset: TimezoneOffset.UTC_PLUS_3,\n};\n\nexport const TurkmenistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TurkmenistanTime,\n  name: 'Turkmenistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const TuvaluTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.TuvaluTime,\n  name: 'Tuvalu Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const UlaanbaatarStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarStandardTime,\n  name: 'Ulaanbaatar Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const UlaanbaatarSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UlaanbaatarSummerTime,\n  name: 'Ulaanbaatar Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const UruguayStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguayStandardTime,\n  name: 'Uruguay Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const UruguaySummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UruguaySummerTime,\n  name: 'Uruguay Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const UzbekistanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.UzbekistanTime,\n  name: 'Uzbekistan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const VanuatuTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VanuatuTime,\n  name: 'Vanuatu Time',\n  offset: TimezoneOffset.UTC_PLUS_11,\n};\n\nexport const VenezuelaStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VenezuelaStandardTime,\n  name: 'Venezuela Standard Time',\n  offset: TimezoneOffset.UTC_MINUS_4,\n};\n\nexport const VladivostokTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VladivostokTime,\n  name: 'Vladivostok Time',\n  offset: TimezoneOffset.UTC_PLUS_10,\n};\n\nexport const VolgogradTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VolgogradTime,\n  name: 'Volgograd Time',\n  offset: TimezoneOffset.UTC_PLUS_4,\n};\n\nexport const VostokStationTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.VostokStationTime,\n  name: 'Vostok Station Time',\n  offset: TimezoneOffset.UTC_PLUS_6,\n};\n\nexport const WakeIslandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WakeIslandTime,\n  name: 'Wake Island Time',\n  offset: TimezoneOffset.UTC_PLUS_12,\n};\n\nexport const WestAfricaSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaSummerTime,\n  name: 'West Africa Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_2,\n};\n\nexport const WestAfricaTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestAfricaTime,\n  name: 'West Africa Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WestGreenlandSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandSummerTime,\n  name: 'West Greenland Summer Time',\n  offset: TimezoneOffset.UTC_MINUS_2,\n};\n\nexport const WestGreenlandTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestGreenlandTime,\n  name: 'West Greenland Time',\n  offset: TimezoneOffset.UTC_MINUS_3,\n};\n\nexport const WestKazakhstanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WestKazakhstanTime,\n  name: 'West Kazakhstan Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n\nexport const WesternEuropeanSummerTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanSummerTime,\n  name: 'Western European Summer Time',\n  offset: TimezoneOffset.UTC_PLUS_1,\n};\n\nexport const WesternEuropeanTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternEuropeanTime,\n  name: 'Western European Time',\n  offset: TimezoneOffset.UTC_0,\n};\n\nexport const WesternIndonesianTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternIndonesianTime,\n  name: 'Western Indonesian Time',\n  offset: TimezoneOffset.UTC_PLUS_7,\n};\n\nexport const WesternStandardTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.WesternStandardTime,\n  name: 'Western Standard Time',\n  offset: TimezoneOffset.UTC_PLUS_8,\n};\n\nexport const YakutskTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YakutskTime,\n  name: 'Yakutsk Time',\n  offset: TimezoneOffset.UTC_PLUS_9,\n};\n\nexport const YekaterinburgTime: TimezoneDetails = {\n  dst: {\n    is: false,\n    uses: true,\n  },\n  id: Timezones.YekaterinburgTime,\n  name: 'Yekaterinburg Time',\n  offset: TimezoneOffset.UTC_PLUS_5,\n};\n", "export enum Region {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n  Polar = 'Polar',\n}\n\nexport enum SubRegion {\n  CentralAmerica = 'Central America',\n  EasternAsia = 'Eastern Asia',\n  EasternEurope = 'Eastern Europe',\n  EasternAfrica = 'Eastern Africa',\n  MiddleAfrica = 'Middle Africa',\n  MiddleEast = 'Middle East',\n  NorthernAfrica = 'Northern Africa',\n  NorthernAmerica = 'Northern America',\n  NorthernEurope = 'Northern Europe',\n  Polynesia = 'Polynesia',\n  SouthAmerica = 'South America',\n  SouthernAfrica = 'Southern Africa',\n  SouthernAsia = 'Southern Asia',\n  SouthernEurope = 'Southern Europe',\n  WesternAfrica = 'Western Africa',\n  WesternAsia = 'Western Asia',\n  WesternEurope = 'Western Europe',\n  WesternAustralia = 'Western Australia',\n}\n", "import { CurrencyCode } from '../currency/index';\nimport { LocaleCode } from '../locale/index';\nimport { TimezoneRegions } from '../time/region';\nimport { TimezoneOffset } from '../time/timezone';\nimport { Timezones } from '../time/timezones';\nimport { Country, CountryCode } from './country';\nimport { Region, SubRegion } from './region';\n\nexport const Countries: Record<Country['name']['short'], Country> = {\n  Afghanistan: {\n    i18n: {\n      calling_codes: [93],\n      currencies: [CurrencyCode.AfghanistanAfghani],\n      languages: [\n        LocaleCode.Pashto,\n        LocaleCode.Dari,\n        LocaleCode.Turkmen,\n        LocaleCode.Uzbek,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4_30],\n        regions: [TimezoneRegions.AsiaKabul],\n        timezones: [Timezones.AfghanistanTime],\n      },\n    },\n    id: CountryCode.Afghanistan,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEB',\n        emoji_unicode: 'U+1F1E6 U+1F1EB',\n        svg: 'https://www.countryflags.io/af/flat/64.svg',\n      },\n      tld: ['.af'],\n    },\n    iso: {\n      alpha2: CountryCode.Afghanistan,\n      alpha3: 'AFG',\n      numeric: '004',\n    },\n    name: {\n      alt_spellings: ['AF', 'Af\u0121\u0101nist\u0101n'],\n      demonym: 'Afghan',\n      native: {\n        endonym: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n      },\n      official: 'Islamic Republic of Afghanistan',\n      short: 'Afghanistan',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Afghanistan',\n        [LocaleCode.Albanian]: 'Shqip\u00EBri',\n        [LocaleCode.Amharic]: '\u12A0\u134D\u130B\u1295',\n        [LocaleCode.Arabic]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Basque]: 'Afganist\u00E1n',\n        [LocaleCode.Belarusian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Bengali]: '\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8',\n        [LocaleCode.Berber]: '\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D',\n        [LocaleCode.Bosnian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Breton]: 'Afganistan',\n        [LocaleCode.Bulgarian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Afganistan',\n        [LocaleCode.Chinese]: '\u963F\u5BCC\u6C57',\n        [LocaleCode.Croatian]: 'Afganistan',\n        [LocaleCode.Czech]: 'Afganistan',\n        [LocaleCode.Danish]: 'Afghanistan',\n        [LocaleCode.Dutch]: 'Afghanistan',\n        [LocaleCode.English]: 'Afghanistan',\n        [LocaleCode.Esperanto]: 'Afganistan',\n        [LocaleCode.Estonian]: 'Afganistan',\n        [LocaleCode.Finnish]: 'Afghanistan',\n        [LocaleCode.French]: 'Afghanistan',\n        [LocaleCode.Frisian]: 'Afghanistan',\n        [LocaleCode.Galician]: 'Afganist\u00E1n',\n        [LocaleCode.Georgian]: '\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8',\n        [LocaleCode.German]: 'Afghanistan',\n        [LocaleCode.Greenlandic]: 'Afghanistan',\n        [LocaleCode.Greek]: '\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD',\n        [LocaleCode.Gujarati]: '\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8',\n        [LocaleCode.Haitian]: 'Afghanistan',\n        [LocaleCode.Hausa]: 'Afghanistan',\n        [LocaleCode.Hebrew]: '\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF',\n        [LocaleCode.Hindi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Hungarian]: 'Afganistan',\n        [LocaleCode.Icelandic]: 'Afghanistan',\n        [LocaleCode.Igbo]: 'Afghanistan',\n        [LocaleCode.Indonesian]: 'Afghanistan',\n        [LocaleCode.Irish]: 'Afghanistan',\n        [LocaleCode.Italian]: 'Afghanistan',\n        [LocaleCode.Japanese]: '\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3',\n        [LocaleCode.Javanese]: 'Afghanistan',\n        [LocaleCode.Kannada]: '\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8',\n        [LocaleCode.Kazakh]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780',\n        [LocaleCode.Korean]: '\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4',\n        [LocaleCode.Kurdish]: 'Afghanistan',\n        [LocaleCode.Kyrgyz]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99',\n        [LocaleCode.Latin]: 'Afghanistan',\n        [LocaleCode.Latvian]: 'Afghanistan',\n        [LocaleCode.Lithuanian]: 'Afganistanas',\n        [LocaleCode.Luxembourgish]: 'Afghanistan',\n        [LocaleCode.Macedonian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Malagasy]: 'Afghanistan',\n        [LocaleCode.Malay]: 'Afghanistan',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28',\n        [LocaleCode.Maltese]: 'Afghanistan',\n        [LocaleCode.Maori]: 'Afghanistan',\n        [LocaleCode.Marathi]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Mongolian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Nepali]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Norwegian]: 'Afghanistan',\n        [LocaleCode.Pashto]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Persian]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Afganistan',\n        [LocaleCode.Portuguese]: 'Afghanistan',\n        [LocaleCode.Punjabi]: 'Afghanistan',\n        [LocaleCode.Romanian]: 'Afghanistan',\n        [LocaleCode.Russian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Samoan]: 'Afghanistan',\n        [LocaleCode.Sanskrit]: '\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928',\n        [LocaleCode.Scots]: 'Afghanistan',\n        [LocaleCode.Serbian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Sesotho]: 'Afghanistan',\n        [LocaleCode.Shona]: 'Afghanistan',\n        [LocaleCode.Sindhi]: 'Afghanistan',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Afganistan',\n        [LocaleCode.Slovenian]: 'Afganistan',\n        [LocaleCode.Somali]: 'Afghanistan',\n        [LocaleCode.Spanish]: 'Afganist\u00E1n',\n        [LocaleCode.Sudanese]: 'Afghanistan',\n        [LocaleCode.Swahili]: 'Afghanistan',\n        [LocaleCode.Swedish]: 'Afghanistan',\n        [LocaleCode.Tagalog]: 'Afghanistan',\n        [LocaleCode.Tajik]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tatar]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Tamil]: '\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD',\n        [LocaleCode.Telugu]: '\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D',\n        [LocaleCode.Turkish]: 'Afganistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Urdu]: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D',\n        [LocaleCode.Vietnamese]: 'Afghanistan',\n        [LocaleCode.Welsh]: 'Afghanistan',\n        [LocaleCode.Xhosa]: 'Afghanistan',\n        [LocaleCode.Yiddish]: 'Afghanistan',\n        [LocaleCode.Yoruba]: 'Afghanistan',\n        [LocaleCode.Zulu]: 'Afghanistan',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Kabul',\n          total: 34_100_000,\n        },\n      },\n      geography: {\n        area: 652_230,\n        region: Region.Asia,\n        sub_region: SubRegion.SouthernAsia,\n      },\n      government: {\n        capital: 'Kabul',\n        type: 'Islamic Emirate',\n      },\n    },\n  },\n  Albania: {\n    i18n: {\n      calling_codes: [355],\n      currencies: [CurrencyCode.AlbaniaLek],\n      languages: [LocaleCode.Albanian, LocaleCode.Greek, LocaleCode.Turkish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1],\n        regions: [TimezoneRegions.EuropeBrussels],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Albania,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF1',\n        emoji_unicode: 'U+1F1E6 U+1F1F1',\n        svg: 'https://www.countryflags.io/al/flat/64.svg',\n      },\n      tld: ['.al'],\n    },\n    iso: {\n      alpha2: CountryCode.Albania,\n      alpha3: 'ALB',\n      numeric: '008',\n    },\n    name: {\n      alt_spellings: ['AL', 'Shqip\u00EBri', 'Shqip\u00EBria', 'Shqipnia'],\n      demonym: 'Albanian',\n      native: {\n        endonym: 'Shqip\u00EBri',\n      },\n      official: 'Republic of Albania',\n      short: 'Albania',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Albania',\n        [LocaleCode.Albanian]: 'Albania',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1263\u1295\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Albania',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0644\u0628\u0627\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B',\n        [LocaleCode.Bosnian]: 'Albanija',\n        [LocaleCode.Breton]: 'Albania',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A',\n        [LocaleCode.Catalan]: 'Alb\u00E0nia',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u5DF4\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Albanija',\n        [LocaleCode.Czech]: 'Alb\u00E1nie',\n        [LocaleCode.Danish]: 'Albanien',\n        [LocaleCode.Dutch]: 'Albani\u00EB',\n        [LocaleCode.English]: 'Albania',\n        [LocaleCode.Esperanto]: 'Albanio',\n        [LocaleCode.Estonian]: 'Albaania',\n        [LocaleCode.Finnish]: 'Albania',\n        [LocaleCode.French]: 'Albanie',\n        [LocaleCode.Frisian]: 'Albani\u00EB',\n        [LocaleCode.Galician]: 'Alb\u00E2nia',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0',\n        [LocaleCode.German]: 'Albanien',\n        [LocaleCode.Greenlandic]: 'Albania',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Albanais',\n        [LocaleCode.Hausa]: 'Albania',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alb\u00E1nia',\n        [LocaleCode.Icelandic]: 'Alb\u00FAnir',\n        [LocaleCode.Igbo]: 'Albania',\n        [LocaleCode.Indonesian]: 'Albania',\n        [LocaleCode.Irish]: 'Alb\u00E1in',\n        [LocaleCode.Italian]: 'Albania',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30D0\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Albania',\n        [LocaleCode.Kannada]: '\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uBC14\uB2C8\uC544',\n        [LocaleCode.Kurdish]: '\u0622\u0644\u0628\u0627\u0646\u06CC\u0627',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5',\n        [LocaleCode.Latin]: 'Albania',\n        [LocaleCode.Latvian]: 'Alb\u0101nija',\n        [LocaleCode.Lithuanian]: 'Albanija',\n        [LocaleCode.Luxembourgish]: 'Albani\u00EB',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Albania',\n        [LocaleCode.Malay]: 'Albania',\n        [LocaleCode.Malayalam]: '\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E',\n        [LocaleCode.Maltese]: 'Albania',\n        [LocaleCode.Maori]: 'Albania',\n        [LocaleCode.Marathi]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Albania',\n        [LocaleCode.Pashto]: '\u0627\u0627\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Persian]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Polish]: 'Albania',\n        [LocaleCode.Portuguese]: 'Alb\u00E2nia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Alb\u0103n',\n        [LocaleCode.Russian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Albania',\n        [LocaleCode.Sanskrit]: 'Albani',\n        [LocaleCode.Scots]: 'Alb\u00E0inia',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Albania',\n        [LocaleCode.Shona]: 'Albania',\n        [LocaleCode.Sindhi]: 'Albania',\n        [LocaleCode.Sinhala]: '\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Alb\u00E1nsko',\n        [LocaleCode.Slovenian]: 'Albanija',\n        [LocaleCode.Somali]: 'Albania',\n        [LocaleCode.Spanish]: 'Albania',\n        [LocaleCode.Sudanese]: 'Albania',\n        [LocaleCode.Swahili]: 'Albania',\n        [LocaleCode.Swedish]: 'Albanien',\n        [LocaleCode.Tagalog]: 'Albania',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Albaniye',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0431\u0430\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0622\u0644\u0628\u0627\u0646\u06CC',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0431\u0430\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Albanie',\n        [LocaleCode.Welsh]: 'Albania',\n        [LocaleCode.Xhosa]: 'Albania',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9',\n        [LocaleCode.Yoruba]: 'Albania',\n        [LocaleCode.Zulu]: 'Albania',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Tirana',\n          total: 2_853_000,\n        },\n      },\n      geography: {\n        area: 28_748,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Tirana',\n        type: 'Republic',\n      },\n    },\n  },\n  Algeria: {\n    i18n: {\n      calling_codes: [213],\n      currencies: [CurrencyCode.AlgeriaDinar],\n      languages: [\n        LocaleCode.Arabic,\n        LocaleCode.French,\n        LocaleCode.Berber,\n        LocaleCode.Tamazight,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.AfricaAlgiers],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n\n    id: CountryCode.Algeria,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE9\uD83C\uDDFF',\n        emoji_unicode: 'U+1F1E9 U+1F1FF',\n        svg: 'https://www.countryflags.io/dz/flat/64.svg',\n      },\n      tld: ['.dz', '.\u062C\u0632\u0627\u0626\u0631'],\n    },\n    iso: {\n      alpha2: CountryCode.Algeria,\n      alpha3: 'DZA',\n      numeric: '012',\n    },\n    name: {\n      alt_spellings: ['DZ', 'Dzayer', 'Alg\u00E9rie'],\n      demonym: 'Algerian',\n      native: {\n        endonym: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n      },\n      official: \"People's Democratic Republic of Algeria\",\n      short: 'Algeria',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Algerije',\n        [LocaleCode.Albanian]: 'Algeria',\n        [LocaleCode.Amharic]: '\u12A0\u120D\u1300\u122D\u1235',\n        [LocaleCode.Arabic]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Armenian]: '\u0531\u056C\u0563\u0578\u0580\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Basque]: 'Algeria',\n        [LocaleCode.Belarusian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Bengali]: '\u0986\u09B2\u099C\u09C7\u09B0',\n        [LocaleCode.Berber]: '\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Bhutani]: '\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41',\n        [LocaleCode.Bosnian]: 'Al\u017Eir',\n        [LocaleCode.Breton]: 'Algeria',\n        [LocaleCode.Bulgarian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Burmese]: '\u1021\u102C\u101B\u1015\u103A',\n        [LocaleCode.Catalan]: 'Alg\u00E8ria',\n        [LocaleCode.Chinese]: '\u963F\u5C14\u53CA\u5229\u4E9A',\n        [LocaleCode.Croatian]: 'Al\u017Eir',\n        [LocaleCode.Czech]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Danish]: 'Algeriet',\n        [LocaleCode.Dutch]: 'Algerije',\n        [LocaleCode.English]: 'Algeria',\n        [LocaleCode.Esperanto]: 'Al\u011Derio',\n        [LocaleCode.Estonian]: 'Al\u017Eira',\n        [LocaleCode.Finnish]: 'Algeria',\n        [LocaleCode.French]: 'Alg\u00E9rie',\n        [LocaleCode.Frisian]: 'Algeri\u00EB',\n        [LocaleCode.Galician]: 'Alxeria',\n        [LocaleCode.Georgian]: '\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8',\n        [LocaleCode.German]: 'Algerien',\n        [LocaleCode.Greenlandic]: 'Algeria',\n        [LocaleCode.Greek]: '\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Alg\u00E9rie',\n        [LocaleCode.Hausa]: 'Algeria',\n        [LocaleCode.Hebrew]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: 'Alg\u00E1r',\n        [LocaleCode.Icelandic]: 'Alg\u00FAra',\n        [LocaleCode.Igbo]: 'Algeria',\n        [LocaleCode.Indonesian]: 'Aljir',\n        [LocaleCode.Irish]: 'Alg\u00E9rie',\n        [LocaleCode.Italian]: 'Algeria',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2',\n        [LocaleCode.Javanese]: 'Aljir',\n        [LocaleCode.Kannada]: '\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8',\n        [LocaleCode.Korean]: '\uC54C\uC81C\uB9AC',\n        [LocaleCode.Kurdish]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631',\n        [LocaleCode.Kyrgyz]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99',\n        [LocaleCode.Latin]: 'Algeria',\n        [LocaleCode.Latvian]: 'Al\u017E\u012Brija',\n        [LocaleCode.Lithuanian]: 'Al\u017Eyras',\n        [LocaleCode.Luxembourgish]: 'Algeria',\n        [LocaleCode.Macedonian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Malagasy]: 'Alg\u00E9rie',\n        [LocaleCode.Malay]: 'Aljir',\n        [LocaleCode.Malayalam]: '\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B',\n        [LocaleCode.Maltese]: 'Alg\u00E9rie',\n        [LocaleCode.Maori]: 'Algeria',\n        [LocaleCode.Marathi]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Nepali]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Norwegian]: 'Algeria',\n        [LocaleCode.Pashto]: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n        [LocaleCode.Persian]: '\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628',\n        [LocaleCode.Polish]: 'Algieria',\n        [LocaleCode.Portuguese]: 'Alg\u00E9ria',\n        [LocaleCode.Punjabi]: '\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06',\n        [LocaleCode.Romanian]: 'Algeria',\n        [LocaleCode.Russian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Samoan]: 'Algeria',\n        [LocaleCode.Sanskrit]: '\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E',\n        [LocaleCode.Scots]: 'Algeria',\n        [LocaleCode.Serbian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Sesotho]: 'Algeria',\n        [LocaleCode.Shona]: 'Algeria',\n        [LocaleCode.Sindhi]: 'Algeria',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA',\n        [LocaleCode.Slovak]: 'Al\u017E\u00EDrsko',\n        [LocaleCode.Slovenian]: 'Al\u017Eir',\n        [LocaleCode.Somali]: 'Algeria',\n        [LocaleCode.Spanish]: 'Algeria',\n        [LocaleCode.Sudanese]: 'Aljir',\n        [LocaleCode.Swahili]: 'Aljir',\n        [LocaleCode.Swedish]: 'Algeriet',\n        [LocaleCode.Tagalog]: 'Algeria',\n        [LocaleCode.Tajik]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Tamil]: '\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Telugu]: '\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72',\n        [LocaleCode.Turkish]: 'Cezayir',\n        [LocaleCode.Ukrainian]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Urdu]: '\u0622\u0644\u062C\u06CC\u0631',\n        [LocaleCode.Uzbek]: '\u0410\u043B\u0436\u0438\u0440',\n        [LocaleCode.Vietnamese]: '\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5',\n        [LocaleCode.Welsh]: 'Algeria',\n        [LocaleCode.Xhosa]: 'Algeria',\n        [LocaleCode.Yiddish]: '\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Algeria',\n        [LocaleCode.Zulu]: 'Algeria',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Oran',\n          total: 37_100_000,\n        },\n      },\n      geography: {\n        area: 2_381_740,\n        region: Region.Africa,\n        sub_region: SubRegion.NorthernAfrica,\n      },\n      government: {\n        capital: 'Algiers',\n        type: 'Republic',\n      },\n    },\n  },\n  AmericanSamoa: {\n    i18n: {\n      calling_codes: [1684],\n      currencies: [CurrencyCode.AmericanSamoaTala],\n\n      languages: [LocaleCode.English, LocaleCode.Samoan],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_11],\n        regions: [TimezoneRegions.PacificSamoa],\n        timezones: [Timezones.SamoaStandardTime],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF8',\n        emoji_unicode: 'U+1F1E6 U+1F1F8',\n        svg: 'https://www.countryflags.io/as/flat/64.svg',\n      },\n      tld: ['.as'],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: 'ASM',\n      numeric: '016',\n    },\n    name: {\n      alt_spellings: ['AS', 'Amerika S\u0101moa', 'Amelika S\u0101moa', 'S\u0101moa Amelika'],\n      demonym: 'American Samoan',\n      native: {\n        endonym: 'American Samoa',\n      },\n      official: 'American Samoa',\n      short: 'American Samoa',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Amerikaans Samoa',\n        [LocaleCode.Albanian]: 'Samoa Amerikane',\n        [LocaleCode.Amharic]: '\u1233\u121E\u12A0\u122D',\n        [LocaleCode.Arabic]: '\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Armenian]: '\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561',\n        [LocaleCode.Azerbaijani]: 'Samoa Amerikana',\n        [LocaleCode.Bashkir]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Basque]: 'Samoa Amerikana',\n        [LocaleCode.Belarusian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Bengali]: '\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE',\n        [LocaleCode.Berber]: '\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629',\n        [LocaleCode.Bhutani]: '\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D',\n        [LocaleCode.Bosnian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Breton]: 'Samoa Amerikan',\n        [LocaleCode.Bulgarian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C',\n        [LocaleCode.Catalan]: 'Samoa Americana',\n        [LocaleCode.Chinese]: '\u7F8E\u5C5E\u8428\u6469\u4E9A',\n        [LocaleCode.Croatian]: 'Ameri\u010Dka Samoa',\n        [LocaleCode.Czech]: 'Americk\u00E1 Samoa',\n        [LocaleCode.Danish]: 'Amerikansk Samoa',\n        [LocaleCode.Dutch]: 'Amerikaans Samoa',\n        [LocaleCode.English]: 'American Samoa',\n        [LocaleCode.Esperanto]: 'Samoa Amerika',\n        [LocaleCode.Estonian]: 'Ameerika Samoa',\n        [LocaleCode.Finnish]: 'Amerikka Samoa',\n        [LocaleCode.French]: 'American Samoa',\n        [LocaleCode.Frisian]: 'Amerikaans Samoa',\n        [LocaleCode.Galician]: 'Samoa Americana',\n        [LocaleCode.Georgian]: '\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0',\n        [LocaleCode.German]: 'Amerikanisch-Samoa',\n        [LocaleCode.Greenlandic]: 'Amerikaans Samoa',\n        [LocaleCode.Greek]: '\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1',\n        [LocaleCode.Gujarati]: '\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE',\n        [LocaleCode.Haitian]: 'Amerikaans Samoa',\n        [LocaleCode.Hausa]: 'Amerikaans Samoa',\n        [LocaleCode.Hebrew]: '\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Hungarian]: 'Amerikai Szamoa',\n        [LocaleCode.Icelandic]: 'Amerikai Szamoa',\n        [LocaleCode.Igbo]: 'Ikina Amerika',\n        [LocaleCode.Indonesian]: 'Samoa Amerika',\n        [LocaleCode.Irish]: 'Samoa Amerikana',\n        [LocaleCode.Italian]: 'Samoa Americane',\n        [LocaleCode.Japanese]: '\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2',\n        [LocaleCode.Javanese]: 'Samoa Amerika',\n        [LocaleCode.Kannada]: '\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86',\n        [LocaleCode.Kazakh]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB',\n        [LocaleCode.Korean]: '\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544',\n        [LocaleCode.Kurdish]: 'Amerikaans Samoa',\n        [LocaleCode.Kyrgyz]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94',\n        [LocaleCode.Latin]: 'Samoa Amerikana',\n        [LocaleCode.Latvian]: 'Amerikas Samoa',\n        [LocaleCode.Lithuanian]: 'Amerikos Samoa',\n        [LocaleCode.Luxembourgish]: 'Amerikaans Samoa',\n        [LocaleCode.Macedonian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Malagasy]: 'Samoa Amerika',\n        [LocaleCode.Malay]: 'Amerika Samo',\n        [LocaleCode.Malayalam]: '\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06',\n        [LocaleCode.Maltese]: 'Samoa Amerika',\n        [LocaleCode.Maori]: 'Samoa Amerika',\n        [LocaleCode.Marathi]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Mongolian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Nepali]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Norwegian]: 'Amerikansk Samoa',\n        [LocaleCode.Pashto]: '\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Persian]: '\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Polish]: 'Samoa Ameryka\u0144skie',\n        [LocaleCode.Portuguese]: 'Samoa Americana',\n        [LocaleCode.Punjabi]: '\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06',\n        [LocaleCode.Romanian]: 'Samoa americane',\n        [LocaleCode.Russian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Samoan]: 'Samoa Amerika',\n        [LocaleCode.Sanskrit]: '\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906',\n        [LocaleCode.Scots]: 'Amerikaans Samoa',\n        [LocaleCode.Serbian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Sesotho]: 'Amerikaans Samoa',\n        [LocaleCode.Shona]: 'Amerikaans Samoa',\n        [LocaleCode.Sindhi]: 'Amerikaans Samoa',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0',\n        [LocaleCode.Slovak]: 'Amerikaans Samoa',\n        [LocaleCode.Slovenian]: 'Amerikaans Samoa',\n        [LocaleCode.Somali]: 'Amerikaans Samoa',\n        [LocaleCode.Spanish]: 'Samoa Americana',\n        [LocaleCode.Sudanese]: 'Amerikaans Samoa',\n        [LocaleCode.Swahili]: 'Amerikaans Samoa',\n        [LocaleCode.Swedish]: 'Amerikansk Samoa',\n        [LocaleCode.Tagalog]: 'Amerikaans Samoa',\n        [LocaleCode.Tajik]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E',\n        [LocaleCode.Thai]: '\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40',\n        [LocaleCode.Turkish]: 'Amerikan Samoas\u0131',\n        [LocaleCode.Ukrainian]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430',\n        [LocaleCode.Vietnamese]: 'Amerikaans Samoa',\n        [LocaleCode.Welsh]: 'Amerikaans Samoa',\n        [LocaleCode.Xhosa]: 'Amerikaans Samoa',\n        [LocaleCode.Yiddish]: 'Amerikaans Samoa',\n        [LocaleCode.Yoruba]: 'Amerikaans Samoa',\n        [LocaleCode.Zulu]: 'Amerikaans Samoa',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Pago Pago',\n          total: 558_000,\n        },\n      },\n      geography: {\n        area: 199,\n        region: Region.Oceania,\n        sub_region: SubRegion.Polynesia,\n      },\n      government: {\n        capital: 'Pago Pago',\n        type: 'Nonmetropolitan Territory of the US',\n      },\n    },\n  },\n  Andorra: {\n    i18n: {\n      calling_codes: [376],\n      currencies: [CurrencyCode.Euro],\n      languages: [LocaleCode.Catalan, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [TimezoneRegions.EuropeAndorra],\n        timezones: [Timezones.CentralEuropeanTime],\n      },\n    },\n    id: CountryCode.Andorra,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF4',\n        emoji_unicode: 'U+1F1E6 U+1F1F4',\n        svg: 'https://www.countryflags.io/ad/flat/64.svg',\n      },\n      tld: ['.ad'],\n    },\n    iso: {\n      alpha2: CountryCode.Andorra,\n      alpha3: 'AND',\n      numeric: '020',\n    },\n    name: {\n      alt_spellings: ['AD', 'Principality of Andorra', \"Principat d'Andorra\"],\n      demonym: 'Andorran',\n      native: {\n        endonym: 'Andorra',\n      },\n      official: 'Principality of Andorra',\n      short: 'Andorra',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Andorra',\n        [LocaleCode.Albanian]: 'Andorra',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584',\n        [LocaleCode.Azerbaijani]: 'Andorra',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Basque]: 'Andorra',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Andora',\n        [LocaleCode.Breton]: 'Andorra',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0434\u043E\u0440\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038',\n        [LocaleCode.Catalan]: 'Andorra',\n        [LocaleCode.Chinese]: '\u5B89\u9053\u5C14',\n        [LocaleCode.Croatian]: 'Andora',\n        [LocaleCode.Czech]: 'Andorra',\n        [LocaleCode.Danish]: 'Andorra',\n        [LocaleCode.Dutch]: 'Andorra',\n        [LocaleCode.English]: 'Andorra',\n        [LocaleCode.Esperanto]: 'Andora',\n        [LocaleCode.Estonian]: 'Andorra',\n        [LocaleCode.Finnish]: 'Andorra',\n        [LocaleCode.French]: 'Andorra',\n        [LocaleCode.Frisian]: 'Andorra',\n        [LocaleCode.Galician]: 'Andorra',\n        [LocaleCode.Georgian]: '\u12A0\u1295\u12F6\u122B',\n        [LocaleCode.German]: 'Andorra',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B4\u03CC\u03C1\u03B1',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Hungarian]: 'Andorra',\n        [LocaleCode.Icelandic]: 'Andorra',\n        [LocaleCode.Igbo]: 'Andorra',\n        [LocaleCode.Indonesian]: 'Andorra',\n        [LocaleCode.Irish]: 'Andorra',\n        [LocaleCode.Italian]: 'Andorra',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30C9\u30E9',\n        [LocaleCode.Javanese]: 'Andorra',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6',\n        [LocaleCode.Korean]: '\uC548\uB3C4\uB77C',\n        [LocaleCode.Kurdish]: 'Andorra',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2',\n        [LocaleCode.Latin]: 'Andorra',\n        [LocaleCode.Latvian]: 'Andora',\n        [LocaleCode.Lithuanian]: 'Andora',\n        [LocaleCode.Luxembourgish]: 'Andorra',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Malagasy]: 'Andorra',\n        [LocaleCode.Malay]: 'Andorra',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D',\n        [LocaleCode.Maltese]: 'Andorra',\n        [LocaleCode.Maori]: 'Andorra',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Norwegian]: 'Andorra',\n        [LocaleCode.Pashto]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Polish]: 'Andora',\n        [LocaleCode.Portuguese]: 'Andorra',\n        [LocaleCode.Punjabi]: '\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E',\n        [LocaleCode.Romanian]: 'Andorra',\n        [LocaleCode.Russian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Samoan]: 'Andorra',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Scots]: 'Andorra',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Sesotho]: 'Andorra',\n        [LocaleCode.Shona]: 'Andorra',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0921\u094B\u0930\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DAF\u0DDA',\n        [LocaleCode.Slovak]: 'Andorra',\n        [LocaleCode.Slovenian]: 'Andora',\n        [LocaleCode.Somali]: 'Andorra',\n        [LocaleCode.Spanish]: 'Andorra',\n        [LocaleCode.Sudanese]: 'Andorra',\n        [LocaleCode.Swahili]: 'Andorra',\n        [LocaleCode.Swedish]: 'Andorra',\n        [LocaleCode.Tagalog]: 'Andorra',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Andora',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Urdu]: '\u0622\u0646\u062F\u0648\u0631\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0434\u043E\u0440\u0440\u0430',\n        [LocaleCode.Vietnamese]: 'Andorra',\n        [LocaleCode.Welsh]: 'Andorra',\n        [LocaleCode.Xhosa]: 'Andorra',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4',\n        [LocaleCode.Yoruba]: 'Andorra',\n        [LocaleCode.Zulu]: 'Andorra',\n      },\n    },\n    statistics: {\n      demographics: {\n        age: {\n          distribution: [\n            { age: '0 to 14 years', percentage: 15.3 },\n            { age: '15 to 64 years', percentage: 66.7 },\n            { age: '65 years and over', percentage: 14.6 },\n          ],\n          median_age: 35.5,\n        },\n        population: {\n          largest_city: 'Andorra la Vella',\n          total: 78_000,\n        },\n      },\n      geography: {\n        area: 468,\n        region: Region.Europe,\n        sub_region: SubRegion.SouthernEurope,\n      },\n      government: {\n        capital: 'Andorra la Vella',\n        type: 'Constitutional Monarchy',\n      },\n    },\n  },\n  Angola: {\n    i18n: {\n      calling_codes: [244],\n      currencies: [CurrencyCode.AngolaKwanza],\n      languages: [\n        LocaleCode.Portuguese,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Italian,\n        LocaleCode.German,\n        LocaleCode.English,\n      ],\n      tz: {\n        offsets: [\n          TimezoneOffset.UTC_0,\n          TimezoneOffset.UTC_PLUS_1,\n          TimezoneOffset.UTC_PLUS_2,\n        ],\n        regions: [TimezoneRegions.AfricaLuanda],\n        timezones: [Timezones.WestAfricaTime],\n      },\n    },\n    id: CountryCode.Angola,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ao/flat/64.svg',\n      },\n      tld: ['.ao'],\n    },\n    iso: {\n      alpha2: CountryCode.Angola,\n      alpha3: 'AGO',\n      numeric: '024',\n    },\n    name: {\n      alt_spellings: ['AO', 'Rep\u00FAblica de Angola', '\u0281\u025Bpublika de an'],\n      demonym: 'Angolan',\n      native: {\n        endonym: 'Angola',\n      },\n      official: 'Republic of Angola',\n      short: 'Angola',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Angola',\n        [LocaleCode.Albanian]: 'Ang\u00F2la',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u130E\u120A\u12EB',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561',\n        [LocaleCode.Azerbaijani]: 'Ang\u0259l',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Basque]: 'Angola',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09B2\u09BE',\n        [LocaleCode.Berber]: 'Angola',\n        [LocaleCode.Bhutani]: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n        [LocaleCode.Bosnian]: 'Angola',\n        [LocaleCode.Breton]: 'Angola',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angola',\n        [LocaleCode.Chinese]: '\u5B89\u54E5\u62C9',\n        [LocaleCode.Croatian]: 'Angola',\n        [LocaleCode.Czech]: 'Angola',\n        [LocaleCode.Danish]: 'Angola',\n        [LocaleCode.Dutch]: 'Angola',\n        [LocaleCode.English]: 'Angola',\n        [LocaleCode.Esperanto]: 'Angolo',\n        [LocaleCode.Estonian]: 'Angola',\n        [LocaleCode.Finnish]: 'Angola',\n        [LocaleCode.French]: 'Angola',\n        [LocaleCode.Frisian]: 'Angola',\n        [LocaleCode.Galician]: 'Angola',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0',\n        [LocaleCode.German]: 'Angola',\n        [LocaleCode.Greenlandic]: 'Angola',\n        [LocaleCode.Greek]: '\u0391\u03B3\u03BA\u03CC\u03BB\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Angola',\n        [LocaleCode.Hausa]: 'Angola',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Angola',\n        [LocaleCode.Icelandic]: 'Angola',\n        [LocaleCode.Igbo]: 'Angola',\n        [LocaleCode.Indonesian]: 'Angola',\n        [LocaleCode.Irish]: 'Angola',\n        [LocaleCode.Italian]: 'Angola',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30B4\u30E9',\n        [LocaleCode.Javanese]: 'Anggol',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F',\n        [LocaleCode.Korean]: '\uC559\uACE8\uB77C',\n        [LocaleCode.Kurdish]: 'Angola',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2',\n        [LocaleCode.Latin]: 'Angola',\n        [LocaleCode.Latvian]: 'Angola',\n        [LocaleCode.Lithuanian]: 'Angola',\n        [LocaleCode.Luxembourgish]: 'Angola',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Malagasy]: 'Angola',\n        [LocaleCode.Malay]: 'Angola',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E',\n        [LocaleCode.Maltese]: 'Angola',\n        [LocaleCode.Maori]: 'Angola',\n        [LocaleCode.Marathi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Angola',\n        [LocaleCode.Pashto]: '\u0627\u0646\u06AB\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Angola',\n        [LocaleCode.Portuguese]: 'Angola',\n        [LocaleCode.Punjabi]: '\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Angole',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Samoan]: 'Angola',\n        [LocaleCode.Sanskrit]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Scots]: 'Angola',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Sesotho]: 'Angola',\n        [LocaleCode.Shona]: 'Angola',\n        [LocaleCode.Sindhi]: '\u0905\u0919\u094D\u0917\u094B\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Angola',\n        [LocaleCode.Slovenian]: 'Angola',\n        [LocaleCode.Somali]: 'Angola',\n        [LocaleCode.Spanish]: 'Angola',\n        [LocaleCode.Sudanese]: 'Angola',\n        [LocaleCode.Swahili]: 'Angola',\n        [LocaleCode.Swedish]: 'Angola',\n        [LocaleCode.Tagalog]: 'Angola',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Turkish]: 'Angola',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u043E\u043B\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: 'Angola',\n        [LocaleCode.Vietnamese]: 'Angola',\n        [LocaleCode.Xhosa]: 'Angola',\n        [LocaleCode.Welsh]: 'Angola',\n        [LocaleCode.Yiddish]: '\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4',\n        [LocaleCode.Yoruba]: 'Angola',\n        [LocaleCode.Zulu]: 'Angola',\n      },\n    },\n  },\n  Anguilla: {\n    i18n: {\n      calling_codes: [1264],\n      currencies: [\n        CurrencyCode.DominicaDollar,\n        CurrencyCode.EastCaribbeanDollar,\n        CurrencyCode.Euro,\n        CurrencyCode.UnitedStatesDollar,\n        CurrencyCode.BritishPound,\n      ],\n      languages: [LocaleCode.English, LocaleCode.Spanish],\n      tz: {\n        offsets: [TimezoneOffset.UTC_MINUS_4],\n        regions: [TimezoneRegions.AmericaAnguilla],\n        timezones: [Timezones.AtlanticStandardTime],\n      },\n    },\n    id: CountryCode.Anguilla,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDEC',\n        emoji_unicode: 'U+1F1E6 U+1F1EC',\n        svg: 'https://www.countryflags.io/ai/flat/64.svg',\n      },\n      tld: ['.ai'],\n    },\n    iso: {\n      alpha2: CountryCode.Anguilla,\n      alpha3: 'AIA',\n      numeric: '660',\n    },\n    name: {\n      alt_spellings: ['AI'],\n      demonym: 'Anguillian',\n      native: {\n        endonym: 'Anguilla',\n      },\n      official: 'Anguilla',\n      short: 'Anguilla',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Anguilla',\n        [LocaleCode.Albanian]: 'Anguilla',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1309\u120B',\n        [LocaleCode.Arabic]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Armenian]: '\u0531\u0576\u0563\u056B\u056C\u0561',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Basque]: 'Angila',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Bengali]: '\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE',\n        [LocaleCode.Berber]: '\u0623\u0646\u063A\u0648\u064A\u0644\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B',\n        [LocaleCode.Bosnian]: 'Angila',\n        [LocaleCode.Breton]: 'Angila',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Burmese]: '\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A',\n        [LocaleCode.Catalan]: 'Angilla',\n        [LocaleCode.Chinese]: '\u5B89\u572D\u62C9',\n        [LocaleCode.Croatian]: 'Angila',\n        [LocaleCode.Czech]: 'Anguilla',\n        [LocaleCode.Danish]: 'Anguilla',\n        [LocaleCode.Dutch]: 'Anguilla',\n        [LocaleCode.English]: 'Anguilla',\n        [LocaleCode.Esperanto]: 'Angila',\n        [LocaleCode.Estonian]: 'Anguilla',\n        [LocaleCode.Finnish]: 'Anguilla',\n        [LocaleCode.French]: 'Anguilla',\n        [LocaleCode.Frisian]: 'Angila',\n        [LocaleCode.Galician]: 'Anguilla',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0',\n        [LocaleCode.German]: 'Anguilla',\n        [LocaleCode.Greenlandic]: 'Anguilla',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC',\n        [LocaleCode.Gujarati]: '\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE',\n        [LocaleCode.Haitian]: 'Anguilla',\n        [LocaleCode.Hausa]: 'Anguilla',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Hungarian]: 'Anguilla',\n        [LocaleCode.Icelandic]: 'Anguilla',\n        [LocaleCode.Igbo]: 'Anguilla',\n        [LocaleCode.Indonesian]: 'Anguilla',\n        [LocaleCode.Irish]: 'Anguilla',\n        [LocaleCode.Italian]: 'Anguilla',\n        [LocaleCode.Japanese]: '\u30A2\u30F3\u30AE\u30E9',\n        [LocaleCode.Javanese]: 'Anguilla',\n        [LocaleCode.Kannada]: '\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798',\n        [LocaleCode.Korean]: '\uC575\uADC8\uB77C',\n        [LocaleCode.Kurdish]: 'Anguilla',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3',\n        [LocaleCode.Latin]: 'Anguilla',\n        [LocaleCode.Latvian]: 'Anguilla',\n        [LocaleCode.Lithuanian]: 'Anguilla',\n        [LocaleCode.Luxembourgish]: 'Angilla',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Malagasy]: 'Angila',\n        [LocaleCode.Malay]: 'Anguilla',\n        [LocaleCode.Malayalam]: '\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E',\n        [LocaleCode.Maltese]: 'Anguilla',\n        [LocaleCode.Maori]: 'Anguilla',\n        [LocaleCode.Marathi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Nepali]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Norwegian]: 'Anguilla',\n        [LocaleCode.Pashto]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Polish]: 'Anguilla',\n        [LocaleCode.Portuguese]: 'Anguilla',\n        [LocaleCode.Punjabi]: '\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E',\n        [LocaleCode.Romanian]: 'Anguilla',\n        [LocaleCode.Russian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Samoan]: 'Anguilla',\n        [LocaleCode.Sanskrit]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Scots]: 'Anguilla',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Sesotho]: 'Anguilla',\n        [LocaleCode.Shona]: 'Anguilla',\n        [LocaleCode.Sindhi]: '\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E',\n        [LocaleCode.Sinhala]: '\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Anguilla',\n        [LocaleCode.Slovenian]: 'Anguilla',\n        [LocaleCode.Somali]: 'Anguilla',\n        [LocaleCode.Spanish]: 'Anguilla',\n        [LocaleCode.Sudanese]: 'Anguilla',\n        [LocaleCode.Swahili]: 'Anguilla',\n        [LocaleCode.Swedish]: 'Anguilla',\n        [LocaleCode.Tagalog]: 'Anguilla',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Tamil]: '\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Telugu]: '\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E',\n        [LocaleCode.Thai]: '\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Turkish]: 'Anguilla',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Urdu]: '\u0622\u0646\u06AF\u0648\u0644\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0433\u0438\u043B\u0438',\n        [LocaleCode.Vietnamese]: 'Anguilla',\n        [LocaleCode.Welsh]: 'Anguilla',\n        [LocaleCode.Xhosa]: 'Anguilla',\n        [LocaleCode.Yiddish]: 'Anguilla',\n        [LocaleCode.Yoruba]: 'Anguilla',\n        [LocaleCode.Zulu]: 'Anguilla',\n      },\n    },\n  },\n  Antarctica: {\n    i18n: {\n      calling_codes: [672],\n      currencies: [CurrencyCode.UnitedStatesDollar, CurrencyCode.Euro],\n      languages: [\n        LocaleCode.English,\n        LocaleCode.Spanish,\n        LocaleCode.French,\n        LocaleCode.Portuguese,\n        LocaleCode.Italian,\n        LocaleCode.Dutch,\n        LocaleCode.German,\n        LocaleCode.Swedish,\n        LocaleCode.Norwegian,\n        LocaleCode.Danish,\n        LocaleCode.Finnish,\n      ],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_1, TimezoneOffset.UTC_PLUS_2],\n        regions: [\n          TimezoneRegions.AntarcticaCasey,\n          TimezoneRegions.AntarcticaDavis,\n          TimezoneRegions.AntarcticaMcMurdo,\n          TimezoneRegions.AntarcticaPalmer,\n          TimezoneRegions.AntarcticaRothera,\n        ],\n        timezones: [\n          Timezones.AtlanticStandardTime,\n          Timezones.CentralTime,\n          Timezones.EasternTime,\n          Timezones.AtlanticStandardTime,\n          Timezones.AzoresStandardTime,\n          Timezones.NewfoundlandStandardTime,\n        ],\n      },\n    },\n    id: CountryCode.Antarctica,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF6',\n        emoji_unicode: 'U+1F1E6 U+1F1F6',\n        svg: 'https://www.countryflags.io/aq/flat/64.svg',\n      },\n      tld: ['.aq'],\n    },\n    iso: {\n      alpha2: CountryCode.Antarctica,\n      alpha3: 'ATA',\n      numeric: '010',\n    },\n    name: {\n      alt_spellings: ['AQ'],\n      demonym: 'Antarctican',\n      native: {\n        endonym: 'Antarctica',\n      },\n      official: 'Antarctica',\n      short: 'Antarctica',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Antarctica',\n        [LocaleCode.Albanian]: 'Antarktika',\n        [LocaleCode.Amharic]: '\u12A0\u1295\u1272\u120D\u12AB\u1293',\n        [LocaleCode.Arabic]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Basque]: 'Antarktika',\n        [LocaleCode.Belarusian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Bengali]: '\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0',\n        [LocaleCode.Berber]: '\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Bhutani]: '\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B',\n        [LocaleCode.Bosnian]: 'Antarktika',\n        [LocaleCode.Breton]: 'Antarktika',\n        [LocaleCode.Bulgarian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Burmese]: '\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038',\n        [LocaleCode.Catalan]: 'Ant\u00E0rtida',\n        [LocaleCode.Chinese]: '\u5357\u6781\u6D32',\n        [LocaleCode.Croatian]: 'Antarktika',\n        [LocaleCode.Czech]: 'Antarktida',\n        [LocaleCode.Danish]: 'Antarktis',\n        [LocaleCode.Dutch]: 'Antarctica',\n        [LocaleCode.English]: 'Antarctica',\n        [LocaleCode.Esperanto]: 'Antarktika',\n        [LocaleCode.Estonian]: 'Antarktika',\n        [LocaleCode.Finnish]: 'Antarktis',\n        [LocaleCode.French]: 'Antarctica',\n        [LocaleCode.Frisian]: 'Antarktis',\n        [LocaleCode.Galician]: 'Ant\u00E1rtida',\n        [LocaleCode.Georgian]: '\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0',\n        [LocaleCode.German]: 'Antarktis',\n        [LocaleCode.Greenlandic]: 'Antarktis',\n        [LocaleCode.Greek]: '\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE',\n        [LocaleCode.Gujarati]: '\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0',\n        [LocaleCode.Haitian]: 'Antarctica',\n        [LocaleCode.Hausa]: 'Antarktika',\n        [LocaleCode.Hebrew]: '\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930',\n        [LocaleCode.Hungarian]: 'Antarktika',\n        [LocaleCode.Icelandic]: 'Antarktis',\n        [LocaleCode.Igbo]: 'Antarktika',\n        [LocaleCode.Indonesian]: 'Antarktika',\n        [LocaleCode.Irish]: 'Antarktika',\n        [LocaleCode.Italian]: 'Antartide',\n        [LocaleCode.Japanese]: '\u5357\u6975',\n        [LocaleCode.Javanese]: 'Antarktika',\n        [LocaleCode.Kannada]: '\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Khmer]: '\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799',\n        [LocaleCode.Korean]: '\uC564\uD2F0\uCE74\uD1A0\uB2C9',\n        [LocaleCode.Kurdish]: 'Antarktika',\n        [LocaleCode.Kyrgyz]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Lao]: '\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0',\n        [LocaleCode.Latin]: 'Antarctica',\n        [LocaleCode.Latvian]: 'Antarktika',\n        [LocaleCode.Lithuanian]: 'Antarktis',\n        [LocaleCode.Luxembourgish]: 'Antarktis',\n        [LocaleCode.Macedonian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Malagasy]: 'Antarctica',\n        [LocaleCode.Malay]: 'Antarktika',\n        [LocaleCode.Malayalam]: '\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F',\n        [LocaleCode.Maltese]: 'Antarktika',\n        [LocaleCode.Maori]: 'Antarktika',\n        [LocaleCode.Marathi]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Mongolian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Nepali]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Norwegian]: 'Antarktis',\n        [LocaleCode.Pashto]: '\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627',\n        [LocaleCode.Persian]: '\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Polish]: 'Antarktyka',\n        [LocaleCode.Portuguese]: 'Ant\u00E1rtida',\n        [LocaleCode.Punjabi]: '\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E',\n        [LocaleCode.Romanian]: 'Antarctica',\n        [LocaleCode.Russian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Samoan]: 'Antarktika',\n        [LocaleCode.Sanskrit]: '\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E',\n        [LocaleCode.Scots]: 'Antarktika',\n        [LocaleCode.Serbian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Sesotho]: 'Antarktika',\n        [LocaleCode.Shona]: 'Antarktika',\n        [LocaleCode.Sindhi]: 'Antarktika',\n        [LocaleCode.Sinhala]: '\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0',\n        [LocaleCode.Slovak]: 'Antarktika',\n        [LocaleCode.Slovenian]: 'Antarktika',\n        [LocaleCode.Somali]: 'Antarktika',\n        [LocaleCode.Spanish]: 'Ant\u00E1rtida',\n        [LocaleCode.Sudanese]: 'Antarktika',\n        [LocaleCode.Swahili]: 'Antarktika',\n        [LocaleCode.Swedish]: 'Antarktis',\n        [LocaleCode.Tagalog]: 'Antarktika',\n        [LocaleCode.Tajik]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Tamil]: '\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Telugu]: '\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E',\n        [LocaleCode.Thai]: '\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32',\n        [LocaleCode.Tibetan]: '\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72',\n        [LocaleCode.Turkish]: 'Antarktika',\n        [LocaleCode.Ukrainian]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Urdu]: '\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627',\n        [LocaleCode.Uzbek]: '\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430',\n        [LocaleCode.Vietnamese]: '\u0110\u1EA5t Antarktik',\n        [LocaleCode.Welsh]: 'Antarktika',\n        [LocaleCode.Xhosa]: 'Antarktika',\n        [LocaleCode.Yiddish]: 'Antarktika',\n        [LocaleCode.Yoruba]: 'Antarktika',\n        [LocaleCode.Zulu]: 'Antarktika',\n      },\n    },\n  },\n  Armenia: {\n    i18n: {\n      calling_codes: [374],\n      currencies: [CurrencyCode.ArmeniaDram],\n      languages: [LocaleCode.Armenian],\n      tz: {\n        offsets: [TimezoneOffset.UTC_PLUS_4],\n        regions: [TimezoneRegions.AsiaJakarta],\n        timezones: [Timezones.ArmeniaTime],\n      },\n    },\n    id: CountryCode.Armenia,\n    info: {\n      flag: {\n        emoji: '\uD83C\uDDE6\uD83C\uDDF2',\n        emoji_unicode: 'U+1F1E6 U+1F1F2',\n        svg: 'https://www.countryflags.io/am/flat/64.svg',\n      },\n      tld: ['.am'],\n    },\n    iso: {\n      alpha2: CountryCode.Armenia,\n      alpha3: 'ARM',\n      numeric: '051',\n    },\n    name: {\n      alt_spellings: ['AM', 'Hayastan', 'Republic of Armenia', '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576'],\n      demonym: 'Armenian',\n      native: {\n        endonym: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n      },\n      official: 'Republic of Armenia',\n      short: 'Armenia',\n      translations: {\n        [LocaleCode.Afrikaans]: 'Armeni\u00EB',\n        [LocaleCode.Albanian]: 'Armenia',\n        [LocaleCode.Amharic]: '\u12A0\u121B\u122D\u129B',\n        [LocaleCode.Arabic]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Armenian]: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576',\n        [LocaleCode.Azerbaijani]: 'Az\u0259rbaycan',\n        [LocaleCode.Bashkir]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Basque]: 'Arm\u00E9nia',\n        [LocaleCode.Belarusian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Bengali]: '\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF',\n        [LocaleCode.Berber]: '\u0623\u0631\u0645\u064A\u0646\u064A\u0627',\n        [LocaleCode.Bhutani]: '\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42',\n        [LocaleCode.Bosnian]: 'Armenija',\n        [LocaleCode.Breton]: 'Armeni\u00EB',\n        [LocaleCode.Bulgarian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Burmese]: '\u1021\u102C\u1019\u1010\u102D\u1010\u1039',\n        [LocaleCode.Catalan]: 'Arm\u00E8nia',\n        [LocaleCode.Chinese]: '\u4E9A\u7F8E\u5C3C\u4E9A',\n        [LocaleCode.Croatian]: 'Armenija',\n        [LocaleCode.Czech]: 'Arm\u00E9nie',\n        [LocaleCode.Danish]: 'Armenien',\n        [LocaleCode.Dutch]: 'Armeni\u00EB',\n        [LocaleCode.English]: 'Armenia',\n        [LocaleCode.Esperanto]: 'Armenia',\n        [LocaleCode.Estonian]: 'Armeenia',\n        [LocaleCode.Finnish]: 'Armenia',\n        [LocaleCode.French]: 'Armenia',\n        [LocaleCode.Frisian]: 'Armeenia',\n        [LocaleCode.Galician]: 'Arm\u00E9nia',\n        [LocaleCode.Georgian]: '\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8',\n        [LocaleCode.German]: 'Armenien',\n        [LocaleCode.Greenlandic]: 'Armenia',\n        [LocaleCode.Greek]: '\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1',\n        [LocaleCode.Gujarati]: '\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF',\n        [LocaleCode.Haitian]: 'Armenia',\n        [LocaleCode.Hausa]: 'Armenia',\n        [LocaleCode.Hebrew]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Hindi]: '\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E',\n        [LocaleCode.Hungarian]: '\u00D6rm\u00E9nyorsz\u00E1g',\n        [LocaleCode.Icelandic]: 'Armenia',\n        [LocaleCode.Igbo]: 'Armenia',\n        [LocaleCode.Indonesian]: 'Armenia',\n        [LocaleCode.Irish]: 'Armenia',\n        [LocaleCode.Italian]: 'Armenia',\n        [LocaleCode.Japanese]: '\u30A2\u30EB\u30E1\u30CB\u30A2',\n        [LocaleCode.Javanese]: 'Armenia',\n        [LocaleCode.Kannada]: '\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF',\n        [LocaleCode.Kazakh]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Khmer]: '\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8',\n        [LocaleCode.Korean]: '\uC544\uB974\uBA54\uB2C8\uC544',\n        [LocaleCode.Kurdish]: 'Armenia',\n        [LocaleCode.Kyrgyz]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Lao]: '\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2',\n        [LocaleCode.Latin]: 'Armenia',\n        [LocaleCode.Latvian]: 'Armeenia',\n        [LocaleCode.Lithuanian]: 'Arm\u0117nija',\n        [LocaleCode.Luxembourgish]: 'Armenien',\n        [LocaleCode.Macedonian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Malagasy]: 'Armenia',\n        [LocaleCode.Malay]: 'Armenia',\n        [LocaleCode.Malayalam]: '\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F',\n        [LocaleCode.Maltese]: 'Armenia',\n        [LocaleCode.Maori]: 'Armenia',\n        [LocaleCode.Marathi]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Mongolian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Nepali]: '\u0905\u0930\u094D\u092E\u0947\u0928\u093F',\n        [LocaleCode.Norwegian]: 'Armenia',\n        [LocaleCode.Pashto]: '\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627',\n        [LocaleCode.Persian]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Polish]: 'Armenia',\n        [LocaleCode.Portuguese]: 'Armenia',\n        [LocaleCode.Punjabi]: '\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40',\n        [LocaleCode.Romanian]: 'Armenia',\n        [LocaleCode.Russian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Samoan]: 'Armenia',\n        [LocaleCode.Sanskrit]: 'Armenia',\n        [LocaleCode.Scots]: 'Armenia',\n        [LocaleCode.Serbian]: '\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430',\n        [LocaleCode.Sesotho]: 'Armenia',\n        [LocaleCode.Shona]: 'Armenia',\n        [LocaleCode.Sindhi]: 'Armenia',\n        [LocaleCode.Sinhala]: '\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2',\n        [LocaleCode.Slovak]: 'Armenia',\n        [LocaleCode.Slovenian]: 'Armenija',\n        [LocaleCode.Somali]: 'Armenia',\n        [LocaleCode.Spanish]: 'Armenia',\n        [LocaleCode.Sudanese]: 'Armenia',\n        [LocaleCode.Swahili]: 'Armenia',\n        [LocaleCode.Swedish]: 'Armenien',\n        [LocaleCode.Tagalog]: 'Armenia',\n        [LocaleCode.Tajik]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Tamil]: '\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD',\n        [LocaleCode.Tatar]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Telugu]: '\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F',\n        [LocaleCode.Thai]: '\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19',\n        [LocaleCode.Tibetan]: '\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D',\n        [LocaleCode.Turkish]: 'Ermenistan',\n        [LocaleCode.Ukrainian]: '\u0410\u0440\u043C\u0435\u043D\u0456\u044F',\n        [LocaleCode.Urdu]: '\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646',\n        [LocaleCode.Uzbek]: '\u0410\u0440\u043C\u0435\u043D\u0438\u044F',\n        [LocaleCode.Vietnamese]: 'Armenia',\n        [LocaleCode.Welsh]: 'Armenia',\n        [LocaleCode.Xhosa]: 'Armenia',\n        [LocaleCode.Yiddish]: '\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4',\n        [LocaleCode.Yoruba]: 'Armenia',\n        [LocaleCode.Zulu]: 'Armenia',\n      },\n    },\n  },\n\n  SomeCountry: {\n    i18n: {\n      calling_codes: [],\n      currencies: [],\n      languages: [],\n      tz: {\n        offsets: [],\n        regions: [],\n        timezones: [],\n      },\n    },\n    id: CountryCode.AmericanSamoa,\n    info: {\n      flag: {\n        emoji: '',\n        emoji_unicode: '',\n        svg: '',\n      },\n      tld: [],\n    },\n    iso: {\n      alpha2: CountryCode.AmericanSamoa,\n      alpha3: '',\n      numeric: '',\n    },\n    name: {\n      alt_spellings: [],\n      demonym: '',\n      native: {\n        endonym: '',\n      },\n      official: '',\n      short: '',\n      translations: {\n        [LocaleCode.Afrikaans]: '',\n        [LocaleCode.Albanian]: '',\n        [LocaleCode.Amharic]: '',\n        [LocaleCode.Arabic]: '',\n        [LocaleCode.Armenian]: '',\n        [LocaleCode.Azerbaijani]: '',\n        [LocaleCode.Bashkir]: '',\n        [LocaleCode.Basque]: '',\n        [LocaleCode.Belarusian]: '',\n        [LocaleCode.Bengali]: '',\n        [LocaleCode.Berber]: '',\n        [LocaleCode.Bhutani]: '',\n        [LocaleCode.Bosnian]: '',\n        [LocaleCode.Breton]: '',\n        [LocaleCode.Bulgarian]: '',\n        [LocaleCode.Burmese]: '',\n        [LocaleCode.Catalan]: '',\n        [LocaleCode.Chinese]: '',\n        [LocaleCode.Croatian]: '',\n        [LocaleCode.Czech]: '',\n        [LocaleCode.Danish]: '',\n        [LocaleCode.Dutch]: '',\n        [LocaleCode.English]: '',\n        [LocaleCode.Esperanto]: '',\n        [LocaleCode.Estonian]: '',\n        [LocaleCode.Finnish]: '',\n        [LocaleCode.French]: '',\n        [LocaleCode.Frisian]: '',\n        [LocaleCode.Galician]: '',\n        [LocaleCode.Georgian]: '',\n        [LocaleCode.German]: '',\n        [LocaleCode.Greenlandic]: '',\n        [LocaleCode.Greek]: '',\n        [LocaleCode.Gujarati]: '',\n        [LocaleCode.Haitian]: '',\n        [LocaleCode.Hausa]: '',\n        [LocaleCode.Hebrew]: '',\n        [LocaleCode.Hindi]: '',\n        [LocaleCode.Hungarian]: '',\n        [LocaleCode.Icelandic]: '',\n        [LocaleCode.Igbo]: '',\n        [LocaleCode.Indonesian]: '',\n        [LocaleCode.Irish]: '',\n        [LocaleCode.Italian]: '',\n        [LocaleCode.Japanese]: '',\n        [LocaleCode.Javanese]: '',\n        [LocaleCode.Kannada]: '',\n        [LocaleCode.Kazakh]: '',\n        [LocaleCode.Khmer]: '',\n        [LocaleCode.Korean]: '',\n        [LocaleCode.Kurdish]: '',\n        [LocaleCode.Kyrgyz]: '',\n        [LocaleCode.Lao]: '',\n        [LocaleCode.Latin]: '',\n        [LocaleCode.Latvian]: '',\n        [LocaleCode.Lithuanian]: '',\n        [LocaleCode.Luxembourgish]: '',\n        [LocaleCode.Macedonian]: '',\n        [LocaleCode.Malagasy]: '',\n        [LocaleCode.Malay]: '',\n        [LocaleCode.Malayalam]: '',\n        [LocaleCode.Maltese]: '',\n        [LocaleCode.Maori]: '',\n        [LocaleCode.Marathi]: '',\n        [LocaleCode.Mongolian]: '',\n        [LocaleCode.Nepali]: '',\n        [LocaleCode.Norwegian]: '',\n        [LocaleCode.Pashto]: '',\n        [LocaleCode.Persian]: '',\n        [LocaleCode.Polish]: '',\n        [LocaleCode.Portuguese]: '',\n        [LocaleCode.Punjabi]: '',\n        [LocaleCode.Romanian]: '',\n        [LocaleCode.Russian]: '',\n        [LocaleCode.Samoan]: '',\n        [LocaleCode.Sanskrit]: '',\n        [LocaleCode.Scots]: '',\n        [LocaleCode.Serbian]: '',\n        [LocaleCode.Sesotho]: '',\n        [LocaleCode.Shona]: '',\n        [LocaleCode.Sindhi]: '',\n        [LocaleCode.Sinhala]: '',\n        [LocaleCode.Slovak]: '',\n        [LocaleCode.Slovenian]: '',\n        [LocaleCode.Somali]: '',\n        [LocaleCode.Spanish]: '',\n        [LocaleCode.Sudanese]: '',\n        [LocaleCode.Swahili]: '',\n        [LocaleCode.Swedish]: '',\n        [LocaleCode.Tagalog]: '',\n        [LocaleCode.Tajik]: '',\n        [LocaleCode.Tamil]: '',\n        [LocaleCode.Tatar]: '',\n        [LocaleCode.Telugu]: '',\n        [LocaleCode.Thai]: '',\n        [LocaleCode.Tibetan]: '',\n        [LocaleCode.Turkish]: '',\n        [LocaleCode.Ukrainian]: '',\n        [LocaleCode.Urdu]: '',\n        [LocaleCode.Uzbek]: '',\n        [LocaleCode.Vietnamese]: '',\n        [LocaleCode.Welsh]: '',\n        [LocaleCode.Xhosa]: '',\n        [LocaleCode.Yiddish]: '',\n        [LocaleCode.Yoruba]: '',\n        [LocaleCode.Zulu]: '',\n      },\n    },\n  },\n};\n", "import { LanguageCode } from '../language/index';\nimport { CountryCode } from './country';\n\n/**\n * Locale code in form of `[language]-[region]-[variant]`\n *\n * @example\n * ```\n * const localeCode: Locale.EnglishUnitedStates = 'en-US'\n * ```\n *\n */\nexport enum LocaleCode {\n  Afrikaans = 'af',\n  AfrikaansSouthAfrica = 'af-ZA',\n  Albanian = 'sq',\n  AlbanianAlbania = 'sq-AL',\n  Amharic = 'am',\n  AmharicEthiopia = 'am-ET',\n  Arabic = 'ar',\n  ArabicAlgeria = 'ar-DZ',\n  ArabicBahrain = 'ar-BH',\n  ArabicEgypt = 'ar-EG',\n  ArabicIraq = 'ar-IQ',\n  ArabicJordan = 'ar-JO',\n  ArabicKuwait = 'ar-KW',\n  ArabicLebanon = 'ar-LB',\n  ArabicLibya = 'ar-LY',\n  ArabicMorocco = 'ar-MA',\n  ArabicOman = 'ar-OM',\n  ArabicQatar = 'ar-QA',\n  ArabicSaudiArabia = 'ar-SA',\n  ArabicSyria = 'ar-SY',\n  ArabicTunisia = 'ar-TN',\n  ArabicUnitedArabEmirates = 'ar-AE',\n  ArabicYemen = 'ar-YE',\n  Armenian = 'hy',\n  ArmenianArmenia = 'hy-AM',\n  Azerbaijani = 'az',\n  AzerbaijaniAzerbaijan = 'az-AZ',\n  AzerbaijaniCyrillicAzerbaijan = 'az-Cyrl-AZ',\n  Bashkir = 'ba',\n  Basque = 'eu',\n  BasqueSpain = 'eu-ES',\n  Belarusian = 'be',\n  BelarusianBelarus = 'be-BY',\n  Bengali = 'bn',\n  BengaliBangladesh = 'bn-BD',\n  BengaliIndia = 'bn-IN',\n  Berber = 'ber',\n  Bhutani = 'dz',\n  BhutaniBhutan = 'dz-BT',\n  Bosnian = 'bs',\n  BosnianBosniaAndHerzegovina = 'bs-BA',\n  Breton = 'br',\n  Bulgarian = 'bg',\n  BulgarianBosniaAndHerzegovina = 'bg-BG',\n  BulgarianBulgaria = 'bg-BG',\n  Burmese = 'my',\n  BurmeseMyanmar = 'my-MM',\n  Cantonese = 'yue',\n  CantoneseHongKong = 'yue-HK',\n  Catalan = 'ca',\n  CatalanSpain = 'ca-ES',\n  Chechen = 'ce',\n  Cherokee = 'chr',\n  Chinese = 'zh',\n  ChineseSimplified = 'zh-Hans',\n  ChineseSimplifiedChina = 'zh-Hans-CN',\n  ChineseSimplifiedHongKong = 'zh-Hans-HK',\n  ChineseSimplifiedMacau = 'zh-Hans-MO',\n  ChineseSimplifiedSingapore = 'zh-Hans-SG',\n  ChineseTraditional = 'zh-Hant',\n  ChineseTraditionalHongKong = 'zh-Hant-HK',\n  ChineseTraditionalMacau = 'zh-Hant-MO',\n  ChineseTraditionalSingapore = 'zh-Hant-SG',\n  ChineseTraditionalTaiwan = 'zh-Hant-TW',\n  Chuvash = 'cv',\n  CorsicanFrance = 'co-FR',\n  Croatian = 'hr',\n  CroatianBosniaAndHerzegovina = 'hr-BA',\n  CroatianCroatia = 'hr-HR',\n  Czech = 'cs',\n  CzechCzechRepublic = 'cs-CZ',\n  Danish = 'da',\n  DanishDenmark = 'da-DK',\n  Dari = 'prs',\n  DariAfghanistan = 'prs-AF',\n  Divehi = 'dv',\n  DivehiMaldives = 'dv-MV',\n  Dutch = 'nl',\n  DutchBelgium = 'nl-BE',\n  DutchNetherlands = 'nl-NL',\n  English = 'en',\n  EnglishAustralia = 'en-AU',\n  EnglishBelgium = 'en-BE',\n  EnglishBelize = 'en-BZ',\n  EnglishCanada = 'en-CA',\n  EnglishCaribbean = 'en-029',\n  EnglishIreland = 'en-IE',\n  EnglishJamaica = 'en-JM',\n  EnglishNewZealand = 'en-NZ',\n  EnglishPhilippines = 'en-PH',\n  EnglishSingapore = 'en-SG',\n  EnglishSouthAfrica = 'en-ZA',\n  EnglishTrinidadAndTobago = 'en-TT',\n  EnglishUnitedKingdom = 'en-GB',\n  EnglishUnitedStates = 'en-US',\n  EnglishZimbabwe = 'en-ZW',\n  Esperanto = 'eo',\n  Estonian = 'et',\n  EstonianEstonia = 'et-EE',\n  Faroese = 'fo',\n  FaroeseFaroeIslands = 'fo-FO',\n  Farsi = 'fa',\n  FarsiIran = 'fa-IR',\n  Filipino = 'fil',\n  FilipinoPhilippines = 'fil-PH',\n  Finnish = 'fi',\n  FinnishFinland = 'fi-FI',\n  SpanishElementSalvador_ = 'es-SV',\n  French = 'fr',\n  FrenchBelgium = 'fr-BE',\n  FrenchCanada = 'fr-CA',\n  FrenchFrance = 'fr-FR',\n  FrenchLuxembourg = 'fr-LU',\n  FrenchMonaco = 'fr-MC',\n  FrenchReunion = 'fr-RE',\n  FrenchSwitzerland = 'fr-CH',\n  Frisian = 'fy',\n  FrisianNetherlands = 'fy-NL',\n  Galician = 'gl',\n  GalicianSpain = 'gl-ES',\n  Georgian = 'ka',\n  GeorgianGeorgia = 'ka-GE',\n  German = 'de',\n  GermanAustria = 'de-AT',\n  GermanBelgium = 'de-BE',\n  GermanGermany = 'de-DE',\n  GermanLiechtenstein = 'de-LI',\n  GermanLuxembourg = 'de-LU',\n  GermanSwitzerland = 'de-CH',\n  Greek = 'el',\n  GreekGreece = 'el-GR',\n  Greenlandic = 'kl',\n  GreenlandicGreenland = 'kl-GL',\n  Gujarati = 'gu',\n  GujaratiIndia = 'gu-IN',\n  Haitian = 'ht',\n  Hausa = 'ha',\n  HausaGhana = 'ha-GH',\n  HausaNiger = 'ha-NE',\n  HausaNigeria = 'ha-NG',\n  Hebrew = 'he',\n  HebrewIsrael = 'he-IL',\n  Hindi = 'hi',\n  HindiIndia = 'hi-IN',\n  Hungarian = 'hu',\n  HungarianHungary = 'hu-HU',\n  Icelandic = 'is',\n  IcelandicIceland = 'is-IS',\n  Igbo = 'ig',\n  IgboNigeria = 'ig-NG',\n  Indonesian = 'id',\n  IndonesianIndonesia = 'id-ID',\n  Irish = 'ga',\n  IrishIreland = 'ga-IE',\n  Italian = 'it',\n  ItalianItaly = 'it-IT',\n  ItalianSwitzerland = 'it-CH',\n  Japanese = 'ja',\n  JapaneseJapan = 'ja-JP',\n  Javanese = 'jv',\n  Kannada = 'kn',\n  KannadaIndia = 'kn-IN',\n  Karelian = 'krl',\n  Kazakh = 'kk',\n  KazakhKazakhstan = 'kk-KZ',\n  Khmer = 'km',\n  KhmerCambodia = 'km-KH',\n  KinyarwandaRwanda = 'rw-RW',\n  Komi = 'kv',\n  Konkani = 'kok',\n  KonkaniIndia = 'kok-IN',\n  Korean = 'ko',\n  KoreanSouthKorea = 'ko-KR',\n  Kurdish = 'ku',\n  KurdishIraq = 'ku-IQ',\n  KurdishTurkey = 'ku-TR',\n  Kyrgyz = 'ky',\n  KyrgyzKyrgyzstan = 'ky-KG',\n  Lao = 'lo',\n  LaoLaos = 'lo-LA',\n  Latin = 'la',\n  Latvian = 'lv',\n  LatvianLatvia = 'lv-LV',\n  Lithuanian = 'lt',\n  LithuanianLithuania = 'lt-LT',\n  Luxembourgish = 'lb',\n  LuxembourgishBelgium = 'lb-LU',\n  LuxembourgishLuxembourg = 'lb-LU',\n  Macedonian = 'mk',\n  MacedonianNorthMacedonia = 'mk-MK',\n  Malagasy = 'mg',\n  Malay = 'ms',\n  MalayBrunei = 'ms-BN',\n  MalayIndia = 'ms-IN',\n  MalayMalaysia = 'ms-MY',\n  MalaySingapore = 'ms-SG',\n  Malayalam = 'ml',\n  MalayalamIndia = 'ml-IN',\n  Maltese = 'mt',\n  MalteseMalta = 'mt-MT',\n  Maori = 'mi',\n  MaoriNewZealand = 'mi-NZ',\n  Marathi = 'mr',\n  MarathiIndia = 'mr-IN',\n  Mari = 'chm',\n  Mongolian = 'mn',\n  MongolianMongolia = 'mn-MN',\n  Montenegrin = 'me',\n  MontenegrinMontenegro = 'me-ME',\n  Nepali = 'ne',\n  NepaliNepal = 'ne-NP',\n  NorthernSotho = 'ns',\n  NorthernSothoSouthAfrica = 'ns-ZA',\n  Norwegian = 'nb',\n  NorwegianBokmalNorway = 'nb-NO',\n  NorwegianNynorskNorway = 'nn-NO',\n  Oriya = 'or',\n  OriyaIndia = 'or-IN',\n  Ossetian = 'os',\n  Pashto = 'ps',\n  PashtoAfghanistan = 'ps-AF',\n  Persian = 'fa',\n  PersianIran = 'fa-IR',\n  Polish = 'pl',\n  PolishPoland = 'pl-PL',\n  Portuguese = 'pt',\n  PortugueseBrazil = 'pt-BR',\n  PortuguesePortugal = 'pt-PT',\n  Punjabi = 'pa',\n  PunjabiIndia = 'pa-IN',\n  PunjabiPakistan = 'pa-PK',\n  Quechua = 'qu',\n  QuechuaBolivia = 'qu-BO',\n  QuechuaEcuador = 'qu-EC',\n  QuechuaPeru = 'qu-PE',\n  Romanian = 'ro',\n  RomanianRomania = 'ro-RO',\n  Russian = 'ru',\n  RussianKazakhstan = 'ru-KZ',\n  RussianKyrgyzstan = 'ru-KG',\n  RussianRussia = 'ru-RU',\n  RussianUkraine = 'ru-UA',\n  Sakha = 'sah',\n  Sami = 'se',\n  SamiFinland = 'se-FI',\n  SamiNorway = 'se-NO',\n  SamiSweden = 'se-SE',\n  Samoan = 'sm',\n  SamoanSamoa = 'sm-WS',\n  Sanskrit = 'sa',\n  SanskritIndia = 'sa-IN',\n  Scots = 'gd',\n  Serbian = 'sr',\n  SerbianBosniaAndHerzegovina = 'sr-BA',\n  SerbianCyrillic = 'sr-SP-Cyrl',\n  SerbianCyrillicBosniaAndHerzegovina = 'sr-Cyrl-BA',\n  SerbianCyrillicSerbiaAndMontenegro = 'sr-Cyrl-SP',\n  SerbianSerbiaAndMontenegro = 'sr-SP',\n  Sesotho = 'st',\n  SesothoSouthAfrica = 'st-ZA',\n  Shona = 'sn',\n  ShonaZimbabwe = 'sn-ZW',\n  Sindhi = 'sd',\n  SindhiPakistan = 'sd-PK',\n  Sinhala = 'si',\n  SinhalaSriLanka = 'si-LK',\n  Slovak = 'sk',\n  SlovakSlovakia = 'sk-SK',\n  Slovenian = 'sl',\n  SlovenianSlovenia = 'sl-SI',\n  Somali = 'so',\n  SomaliSomalia = 'so-SO',\n  Spanish = 'es',\n  SpanishArgentina = 'es-AR',\n  SpanishBolivia = 'es-BO',\n  SpanishChile = 'es-CL',\n  SpanishColombia = 'es-CO',\n  SpanishCostaRica = 'es-CR',\n  SpanishCuba = 'es-CU',\n  SpanishDominicanRepublic = 'es-DO',\n  SpanishEcuador = 'es-EC',\n  SpanishElSalvador = 'es-SV',\n  SpanishEquatorialGuinea = 'es-GQ',\n  SpanishGuatemala = 'es-GT',\n  SpanishHonduras = 'es-HN',\n  SpanishMexico = 'es-MX',\n  SpanishNicaragua = 'es-NI',\n  SpanishPanama = 'es-PA',\n  SpanishParaguay = 'es-PY',\n  SpanishPeru = 'es-PE',\n  SpanishPuertoRico = 'es-PR',\n  SpanishSpain = 'es-ES',\n  SpanishUnitedStates = 'es-US',\n  SpanishUruguay = 'es-UY',\n  SpanishVenezuela = 'es-VE',\n  Sudanese = 'su',\n  Sutu = 'st',\n  SutuSouthAfrica = 'st-ZA',\n  Swahili = 'sw',\n  SwahiliKenya = 'sw-KE',\n  Swedish = 'sv',\n  SwedishFinland = 'sv-FI',\n  SwedishSweden = 'sv-SE',\n  Syriac = 'syr',\n  SyriacSyria = 'syr-SY',\n  Tagalog = 'tl',\n  TagalogPhilippines = 'tl-PH',\n  Tajik = 'tg',\n  TajikTajikistan = 'tg-TJ',\n  Tamazight = 'tmh',\n  Tamil = 'ta',\n  TamilIndia = 'ta-IN',\n  Tatar = 'tt',\n  Telugu = 'te',\n  TeluguIndia = 'te-IN',\n  Thai = 'th',\n  ThaiThailand = 'th-TH',\n  Tibetan = 'bo',\n  TibetanBhutan = 'bo-BT',\n  TibetanChina = 'bo-CN',\n  TibetanIndia = 'bo-IN',\n  Tsonga = 'ts',\n  Tswana = 'tn',\n  TswanaSouthAfrica = 'tn-ZA',\n  Turkish = 'tr',\n  TurkishTurkey = 'tr-TR',\n  Turkmen = 'tk',\n  Ukrainian = 'uk',\n  UkrainianUkraine = 'uk-UA',\n  Urdu = 'ur',\n  UrduAfghanistan = 'ur-AF',\n  UrduIndia = 'ur-IN',\n  UrduPakistan = 'ur-PK',\n  Uzbek = 'uz',\n  UzbekCyrillic = 'uz-Cyrl-UZ',\n  UzbekLatin = 'uz-Latn-UZ',\n  UzbekUzbekistan = 'uz-UZ',\n  Vietnamese = 'vi',\n  VietnameseVietnam = 'vi-VN',\n  Welsh = 'cy',\n  WelshUnitedKingdom = 'cy-GB',\n  Xhosa = 'xh',\n  XhosaSouthAfrica = 'xh-ZA',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  YorubaNigeria = 'yo-NG',\n  ZhuyinMandarinChina = 'yue-Hant-CN',\n  Zulu = 'zu',\n  ZuluSouthAfrica = 'zu-ZA',\n}\n\nexport type Locale = {\n  readonly country?: {\n    readonly code: CountryCode;\n    readonly name: string;\n    readonly native: string;\n  };\n  readonly id: LocaleCode;\n  readonly language: {\n    readonly code: LanguageCode;\n    readonly name: string;\n    readonly native: string;\n  };\n  readonly name: string;\n  readonly native_name: string;\n  readonly rtl: boolean;\n};\n\nexport const Afrikaans: Locale = {\n  id: LocaleCode.Afrikaans,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans',\n  native_name: 'Afrikaans',\n  rtl: false,\n};\n\nexport const AfrikaansSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.AfrikaansSouthAfrica,\n  language: {\n    code: LanguageCode.Afrikaans,\n    name: 'Afrikaans',\n    native: 'Afrikaans',\n  },\n  name: 'Afrikaans (South Africa)',\n  native_name: 'Afrikaans (Suid-Afrika)',\n  rtl: false,\n};\n\nexport const Albanian: Locale = {\n  id: LocaleCode.Albanian,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian',\n  native_name: 'Shqip',\n  rtl: false,\n};\n\nexport const AlbanianAlbania: Locale = {\n  country: {\n    code: CountryCode.Albania,\n    name: 'Albania',\n    native: 'Shqip\u00EBria',\n  },\n  id: LocaleCode.AlbanianAlbania,\n  language: {\n    code: LanguageCode.Albanian,\n    name: 'Albanian',\n    native: 'Shqip',\n  },\n  name: 'Albanian (Albania)',\n  native_name: 'Shqip (Shqip\u00EBria)',\n  rtl: false,\n};\n\nexport const Amharic: Locale = {\n  id: LocaleCode.Amharic,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic',\n  native_name: '\u12A0\u121B\u122D\u129B',\n  rtl: false,\n};\n\nexport const AmharicEthiopia: Locale = {\n  country: {\n    code: CountryCode.Ethiopia,\n    name: 'Ethiopia',\n    native: '\u12A2\u1275\u12EE\u1335\u12EB',\n  },\n  id: LocaleCode.AmharicEthiopia,\n  language: {\n    code: LanguageCode.Amharic,\n    name: 'Amharic',\n    native: '\u12A0\u121B\u122D\u129B',\n  },\n  name: 'Amharic (Ethiopia)',\n  native_name: '\u12A0\u121B\u122D\u129B (\u12A2\u1275\u12EE\u1335\u12EB)',\n  rtl: false,\n};\n\nexport const Arabic: Locale = {\n  id: LocaleCode.Arabic,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  rtl: true,\n};\n\nexport const ArabicAlgeria: Locale = {\n  country: {\n    code: CountryCode.Algeria,\n    name: 'Algeria',\n    native: '\u0627\u0644\u062C\u0632\u0627\u0626\u0631',\n  },\n  id: LocaleCode.ArabicAlgeria,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Algeria)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u062C\u0632\u0627\u0626\u0631)',\n  rtl: true,\n};\n\nexport const ArabicBahrain: Locale = {\n  country: {\n    code: CountryCode.Bahrain,\n    name: 'Bahrain',\n    native: '\u0627\u0644\u0628\u062D\u0631\u064A\u0646',\n  },\n  id: LocaleCode.ArabicBahrain,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Bahrain)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0628\u062D\u0631\u064A\u0646)',\n  rtl: true,\n};\n\nexport const ArabicEgypt: Locale = {\n  country: {\n    code: CountryCode.Egypt,\n    name: 'Egypt',\n    native: '\u0645\u0635\u0631',\n  },\n  id: LocaleCode.ArabicEgypt,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Egypt)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0645\u0635\u0631)',\n  rtl: true,\n};\n\nexport const ArabicIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.ArabicIraq,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Iraq)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: true,\n};\n\nexport const ArabicJordan: Locale = {\n  country: {\n    code: CountryCode.Jordan,\n    name: 'Jordan',\n    native: '\u0627\u0644\u0623\u0631\u062F\u0646',\n  },\n  id: LocaleCode.ArabicJordan,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Jordan)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0623\u0631\u062F\u0646)',\n  rtl: true,\n};\n\nexport const ArabicKuwait: Locale = {\n  country: {\n    code: CountryCode.Kuwait,\n    name: 'Kuwait',\n    native: '\u0627\u0644\u0643\u0648\u064A\u062A',\n  },\n\n  id: LocaleCode.ArabicKuwait,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Kuwait)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0643\u0648\u064A\u062A)',\n  rtl: true,\n};\n\nexport const ArabicLebanon: Locale = {\n  country: {\n    code: CountryCode.Lebanon,\n    name: 'Lebanon',\n    native: '\u0644\u0628\u0646\u0627\u0646',\n  },\n  id: LocaleCode.ArabicLebanon,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Lebanon)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u0628\u0646\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicLibya: Locale = {\n  country: {\n    code: CountryCode.Libya,\n    name: 'Libya',\n    native: '\u0644\u064A\u0628\u064A\u0627',\n  },\n  id: LocaleCode.ArabicLibya,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Libya)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0644\u064A\u0628\u064A\u0627)',\n  rtl: true,\n};\n\nexport const ArabicMorocco: Locale = {\n  country: {\n    code: CountryCode.Morocco,\n    name: 'Morocco',\n    native: '\u0627\u0644\u0645\u063A\u0631\u0628',\n  },\n  id: LocaleCode.ArabicMorocco,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Morocco)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u063A\u0631\u0628)',\n  rtl: true,\n};\n\nexport const ArabicOman: Locale = {\n  country: {\n    code: CountryCode.Oman,\n    name: 'Oman',\n    native: '\u0639\u0645\u0627\u0646',\n  },\n  id: LocaleCode.ArabicOman,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Oman)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0639\u0645\u0627\u0646)',\n  rtl: true,\n};\n\nexport const ArabicQatar: Locale = {\n  country: {\n    code: CountryCode.Qatar,\n    name: 'Qatar',\n    native: '\u0642\u0637\u0631',\n  },\n  id: LocaleCode.ArabicQatar,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Qatar)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0642\u0637\u0631)',\n  rtl: true,\n};\n\nexport const ArabicSaudiArabia: Locale = {\n  country: {\n    code: CountryCode.SaudiArabia,\n    name: 'Saudi Arabia',\n    native: '\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629',\n  },\n  id: LocaleCode.ArabicSaudiArabia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Saudi Arabia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629)',\n  rtl: true,\n};\n\nexport const ArabicTunisia: Locale = {\n  country: {\n    code: CountryCode.Tunisia,\n    name: 'Tunisia',\n    native: '\u062A\u0648\u0646\u0633',\n  },\n  id: LocaleCode.ArabicTunisia,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Tunisia)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u062A\u0648\u0646\u0633)',\n  rtl: true,\n};\n\nexport const ArabicUnitedArabEmirates: Locale = {\n  country: {\n    code: CountryCode.UnitedArabEmirates,\n    name: 'United Arab Emirates',\n    native: '\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629',\n  },\n  id: LocaleCode.ArabicUnitedArabEmirates,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (United Arab Emirates)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629)',\n  rtl: true,\n};\n\nexport const ArabicYemen: Locale = {\n  country: {\n    code: CountryCode.Yemen,\n    name: 'Yemen',\n    native: '\u0627\u0644\u064A\u0645\u0646',\n  },\n  id: LocaleCode.ArabicYemen,\n  language: {\n    code: LanguageCode.Arabic,\n    name: 'Arabic',\n    native: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629',\n  },\n  name: 'Arabic (Yemen)',\n  native_name: '\u0627\u0644\u0639\u0631\u0628\u064A\u0629 (\u0627\u0644\u064A\u0645\u0646)',\n  rtl: true,\n};\n\nexport const Armenian: Locale = {\n  id: LocaleCode.Armenian,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian',\n  native_name: '\u0540\u0561\u0575\u0565\u0580\u0565\u0576',\n  rtl: false,\n};\n\nexport const ArmenianArmenia: Locale = {\n  country: { code: CountryCode.Armenia, name: 'Armenia', native: '\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576' },\n  id: LocaleCode.ArmenianArmenia,\n  language: {\n    code: LanguageCode.Armenian,\n    name: 'Armenian',\n    native: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576',\n  },\n  name: 'Armenian (Armenia)',\n  native_name: '\u0570\u0561\u0575\u0565\u0580\u0565\u0576 (\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576)',\n  rtl: false,\n};\n\nexport const Azerbaijani = {\n  id: LocaleCode.Azerbaijani,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azeribaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri',\n  native_name: 'Az\u0259rbaycan',\n  rtl: false,\n};\n\nexport const AzerbaijaniAzerbaijan: Locale = {\n  country: {\n    code: CountryCode.Azerbaijan,\n    name: 'Azerbaijan',\n    native: 'Az\u0259rbaycan',\n  },\n  id: LocaleCode.AzerbaijaniAzerbaijan,\n  language: {\n    code: LanguageCode.Azerbaijani,\n    name: 'Azerbaijani',\n    native: 'Az\u0259rbaycan',\n  },\n  name: 'Azeri (Azerbaijan)',\n  native_name: 'Az\u0259rbaycan (Az\u0259rbaycan)',\n  rtl: false,\n};\n\nexport const Basque: Locale = {\n  id: LocaleCode.Basque,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque',\n  native_name: 'Euskara',\n  rtl: false,\n};\n\nexport const BasqueSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.BasqueSpain,\n  language: {\n    code: LanguageCode.Basque,\n    name: 'Basque',\n    native: 'Euskara',\n  },\n  name: 'Basque (Spain)',\n  native_name: 'Euskara (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Belarusian: Locale = {\n  id: LocaleCode.Belarusian,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian',\n  native_name: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  rtl: false,\n};\n\nexport const BelarusianBelarus: Locale = {\n  country: {\n    code: CountryCode.Belarus,\n    name: 'Belarus',\n    native: '\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C',\n  },\n  id: LocaleCode.BelarusianBelarus,\n  language: {\n    code: LanguageCode.Belarusian,\n    name: 'Belarusian',\n    native: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F',\n  },\n  name: 'Belarusian (Belarus)',\n  native_name: '\u0431\u0435\u043B\u0430\u0440\u0443\u0441\u043A\u0430\u044F (\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C)',\n  rtl: false,\n};\n\nexport const Bengali: Locale = {\n  id: LocaleCode.Bengali,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  rtl: false,\n};\n\nexport const BengaliBangladesh: Locale = {\n  country: {\n    code: CountryCode.Bangladesh,\n    name: 'Bangladesh',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6',\n  },\n  id: LocaleCode.BengaliBangladesh,\n  language: {\n    code: LanguageCode.Bengali,\n    name: 'Bengali',\n    native: '\u09AC\u09BE\u0982\u09B2\u09BE',\n  },\n  name: 'Bengali (Bangladesh)',\n  native_name: '\u09AC\u09BE\u0982\u09B2\u09BE (\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6)',\n  rtl: false,\n};\n\nexport const Bhutani: Locale = {\n  id: LocaleCode.Bhutani,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const BhutaniBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42',\n  },\n  id: LocaleCode.BhutaniBhutan,\n  language: {\n    code: LanguageCode.Bhutani,\n    name: 'Bhutani',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Bhutani (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42)',\n  rtl: false,\n};\n\nexport const Bulgarian: Locale = {\n  id: LocaleCode.Bulgarian,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian',\n  native_name: '\u0411\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const BulgarianBulgaria: Locale = {\n  country: {\n    code: CountryCode.Bulgaria,\n    name: 'Bulgaria',\n    native: '\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F',\n  },\n  id: LocaleCode.BulgarianBulgaria,\n  language: {\n    code: LanguageCode.Bulgarian,\n    name: 'Bulgarian',\n    native: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438',\n  },\n  name: 'Bulgarian (Bulgaria)',\n  native_name: '\u0431\u044A\u043B\u0433\u0430\u0440\u0441\u043A\u0438 (\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F)',\n  rtl: false,\n};\n\nexport const Burmese: Locale = {\n  id: LocaleCode.Burmese,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese',\n  native_name: '\u1017\u1019\u102C\u1005\u102C',\n  rtl: false,\n};\n\nexport const BurmeseMyanmar: Locale = {\n  country: {\n    code: CountryCode.Myanmar,\n    name: 'Myanmar',\n    native: '\u1019\u103C\u1014\u103A\u1019\u102C',\n  },\n  id: LocaleCode.BurmeseMyanmar,\n  language: {\n    code: LanguageCode.Burmese,\n    name: 'Burmese',\n    native: '\u1017\u1019\u102C\u1005\u102C',\n  },\n  name: 'Burmese (Myanmar)',\n  native_name: '\u1017\u1019\u102C\u1005\u102C (\u1019\u103C\u1014\u103A\u1019\u102C)',\n  rtl: false,\n};\n\nexport const Cantonese: Locale = {\n  id: LocaleCode.Cantonese,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese',\n  native_name: '\u5EE3\u6771\u8A71',\n  rtl: false,\n};\n\nexport const CantoneseHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.CantoneseHongKong,\n  language: {\n    code: LanguageCode.Cantonese,\n    name: 'Cantonese',\n    native: '\u5EE3\u6771\u8A71',\n  },\n  name: 'Cantonese (Hong Kong)',\n  native_name: '\u5EE3\u6771\u8A71 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const Catalan: Locale = {\n  id: LocaleCode.Catalan,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan',\n  native_name: 'Catal\u00E0',\n  rtl: false,\n};\n\nexport const CatalanSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.CatalanSpain,\n  language: {\n    code: LanguageCode.Catalan,\n    name: 'Catalan',\n    native: 'Catal\u00E0',\n  },\n  name: 'Catalan (Spain)',\n  native_name: 'Catal\u00E0 (Espanya)',\n  rtl: false,\n};\n\nexport const ChineseSimplified: Locale = {\n  id: LocaleCode.ChineseSimplified,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.ChineseSimplifiedChina,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/China)',\n  native_name: '\u4E2D\u6587 (\u4E2D\u56FD)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseSimplifiedHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseSimplifiedMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseSimplifiedSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseSimplifiedSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Simplified/Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const ChineseTraditional: Locale = {\n  id: LocaleCode.ChineseTraditional,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Traditional)',\n  native_name: '\u4E2D\u6587',\n  rtl: false,\n};\n\nexport const ChineseTraditionalHongKong: Locale = {\n  country: {\n    code: CountryCode.HongKong,\n    name: 'Hong Kong',\n    native: '\u9999\u6E2F',\n  },\n  id: LocaleCode.ChineseTraditionalHongKong,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Hong Kong)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Hong Kong)',\n  native_name: '\u4E2D\u6587 (\u9999\u6E2F)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalMacau: Locale = {\n  country: {\n    code: CountryCode.Macau,\n    name: 'Macau',\n    native: '\u6FB3\u9580',\n  },\n  id: LocaleCode.ChineseTraditionalMacau,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Macau)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Macau)',\n  native_name: '\u4E2D\u6587 (\u6FB3\u9580)',\n  rtl: false,\n};\n\nexport const ChineseTraditionalSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: '\u65B0\u52A0\u5761',\n  },\n  id: LocaleCode.ChineseTraditionalSingapore,\n  language: {\n    code: LanguageCode.Chinese,\n    name: 'Chinese (Traditional/Singapore)',\n    native: '\u4E2D\u6587',\n  },\n  name: 'Chinese (Singapore)',\n  native_name: '\u4E2D\u6587 (\u65B0\u52A0\u5761)',\n  rtl: false,\n};\n\nexport const Croatian: Locale = {\n  id: LocaleCode.Croatian,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian',\n  native_name: 'Hrvatski',\n  rtl: false,\n};\n\nexport const CroatianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.CroatianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Bosnia and Herzegovina)',\n  native_name: 'Hrvatski (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const CroatianCroatia: Locale = {\n  country: {\n    code: CountryCode.Croatia,\n    name: 'Croatia',\n    native: 'Hrvatska',\n  },\n  id: LocaleCode.CroatianCroatia,\n  language: {\n    code: LanguageCode.Croatian,\n    name: 'Croatian',\n    native: 'Hrvatski',\n  },\n  name: 'Croatian (Croatia)',\n  native_name: 'Hrvatski (Hrvatska)',\n  rtl: false,\n};\n\nexport const Czech: Locale = {\n  id: LocaleCode.Czech,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech',\n  native_name: '\u010Ce\u0161tina',\n  rtl: false,\n};\n\nexport const CzechCzechRepublic: Locale = {\n  country: {\n    code: CountryCode.CzechRepublic,\n    name: 'Czech Republic',\n    native: '\u010Cesk\u00E1 republika',\n  },\n  id: LocaleCode.CzechCzechRepublic,\n  language: {\n    code: LanguageCode.Czech,\n    name: 'Czech',\n    native: '\u010Ce\u0161tina',\n  },\n  name: 'Czech (Czech Republic)',\n  native_name: '\u010Ce\u0161tina (\u010Cesk\u00E1 republika)',\n  rtl: false,\n};\n\nexport const Danish: Locale = {\n  id: LocaleCode.Danish,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish',\n  native_name: 'Dansk',\n  rtl: false,\n};\n\nexport const DanishDenmark: Locale = {\n  country: {\n    code: CountryCode.Denmark,\n    name: 'Denmark',\n    native: 'Danmark',\n  },\n  id: LocaleCode.DanishDenmark,\n  language: {\n    code: LanguageCode.Danish,\n    name: 'Danish',\n    native: 'Dansk',\n  },\n  name: 'Danish (Denmark)',\n  native_name: 'Dansk (Danmark)',\n  rtl: false,\n};\n\nexport const Divehi: Locale = {\n  id: LocaleCode.Divehi,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  rtl: true,\n};\n\nexport const DivehiMaldives: Locale = {\n  country: {\n    code: CountryCode.Maldives,\n    name: 'Maldives',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC',\n  },\n  id: LocaleCode.DivehiMaldives,\n  language: {\n    code: LanguageCode.Divehi,\n    name: 'Divehi',\n    native: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0',\n  },\n  name: 'Divehi (Maldives)',\n  native_name: '\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0784\u07A6\u0790\u07B0 (\u078B\u07A8\u0788\u07AC\u0780\u07A8 \u0783\u07A7\u0787\u07B0\u0796\u07AC)',\n  rtl: true,\n};\n\nexport const Dutch: Locale = {\n  id: LocaleCode.Dutch,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch',\n  native_name: 'Nederlands',\n  rtl: false,\n};\n\nexport const DutchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.DutchBelgium,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Belgium)',\n  native_name: 'Nederlands (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const DutchNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.DutchNetherlands,\n  language: {\n    code: LanguageCode.Dutch,\n    name: 'Dutch',\n    native: 'Nederlands',\n  },\n  name: 'Dutch (Netherlands)',\n  native_name: 'Nederlands (Nederland)',\n  rtl: false,\n};\n\nexport const English: Locale = {\n  id: LocaleCode.English,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English',\n  native_name: 'English',\n  rtl: false,\n};\n\nexport const EnglishAustralia: Locale = {\n  country: {\n    code: CountryCode.Australia,\n    name: 'Australia',\n    native: 'Australia',\n  },\n  id: LocaleCode.EnglishAustralia,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Australia)',\n  native_name: 'English (Australia)',\n  rtl: false,\n};\n\nexport const EnglishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.EnglishBelgium,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Belgium)',\n  native_name: 'English (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const EnglishCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.EnglishCanada,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Canada)',\n  native_name: 'English (Canada)',\n  rtl: false,\n};\n\nexport const EnglishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.EnglishIreland,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Ireland)',\n  native_name: 'English (\u00C9ire)',\n  rtl: false,\n};\n\nexport const EnglishJamaica: Locale = {\n  country: {\n    code: CountryCode.Jamaica,\n    name: 'Jamaica',\n    native: 'Jamaica',\n  },\n  id: LocaleCode.EnglishJamaica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Jamaica)',\n  native_name: 'English (Jamaica)',\n  rtl: false,\n};\n\nexport const EnglishNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.EnglishNewZealand,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (New Zealand)',\n  native_name: 'English (New Zealand)',\n  rtl: false,\n};\n\nexport const EnglishPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Philippines',\n  },\n  id: LocaleCode.EnglishPhilippines,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Philippines)',\n  native_name: 'English (Philippines)',\n  rtl: false,\n};\n\nexport const EnglishSingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.EnglishSingapore,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Singapore)',\n  native_name: 'English (Singapore)',\n  rtl: false,\n};\n\nexport const EnglishSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.EnglishSouthAfrica,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (South Africa)',\n  native_name: 'English (South Africa)',\n  rtl: false,\n};\n\nexport const EnglishTrinidadAndTobago: Locale = {\n  country: {\n    code: CountryCode.TrinidadAndTobago,\n    name: 'Trinidad and Tobago',\n    native: 'Trinidad and Tobago',\n  },\n  id: LocaleCode.EnglishTrinidadAndTobago,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Trinidad and Tobago)',\n  native_name: 'English (Trinidad and Tobago)',\n  rtl: false,\n};\n\nexport const EnglishUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.EnglishUnitedKingdom,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United Kingdom)',\n  native_name: 'English (United Kingdom)',\n  rtl: false,\n};\n\nexport const EnglishUnitedStates: Locale = {\n  country: {\n    code: CountryCode.UnitedStates,\n    name: 'United States',\n    native: 'United States',\n  },\n  id: LocaleCode.EnglishUnitedStates,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (United States)',\n  native_name: 'English (United States)',\n  rtl: false,\n};\n\nexport const EnglishZimbabwe: Locale = {\n  country: {\n    code: CountryCode.Zimbabwe,\n    name: 'Zimbabwe',\n    native: 'Zimbabwe',\n  },\n  id: LocaleCode.EnglishZimbabwe,\n  language: {\n    code: LanguageCode.English,\n    name: 'English',\n    native: 'English',\n  },\n  name: 'English (Zimbabwe)',\n  native_name: 'English (Zimbabwe)',\n  rtl: false,\n};\n\nexport const Esperanto: Locale = {\n  id: LocaleCode.Esperanto,\n  language: {\n    code: LanguageCode.Esperanto,\n    name: 'Esperanto',\n    native: 'Esperanto',\n  },\n  name: 'Esperanto',\n  native_name: 'Esperanto',\n  rtl: false,\n};\n\nexport const Estonian: Locale = {\n  id: LocaleCode.Estonian,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian',\n  native_name: 'Eesti',\n  rtl: false,\n};\n\nexport const EstonianEstonia: Locale = {\n  country: {\n    code: CountryCode.Estonia,\n    name: 'Estonia',\n    native: 'Eesti',\n  },\n  id: LocaleCode.EstonianEstonia,\n  language: {\n    code: LanguageCode.Estonian,\n    name: 'Estonian',\n    native: 'Eesti',\n  },\n  name: 'Estonian (Estonia)',\n  native_name: 'Eesti (Eesti)',\n  rtl: false,\n};\n\nexport const Faroese: Locale = {\n  id: LocaleCode.Faroese,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese',\n  native_name: 'F\u00F8royskt',\n  rtl: false,\n};\n\nexport const FaroeseFaroeIslands: Locale = {\n  country: {\n    code: CountryCode.FaroeIslands,\n    name: 'Faroe Islands',\n    native: 'F\u00F8royar',\n  },\n  id: LocaleCode.FaroeseFaroeIslands,\n  language: {\n    code: LanguageCode.Faroese,\n    name: 'Faroese',\n    native: 'F\u00F8royskt',\n  },\n  name: 'Faroese (Faroe Islands)',\n  native_name: 'F\u00F8royskt (F\u00F8royar)',\n  rtl: false,\n};\n\nexport const Farsi: Locale = {\n  id: LocaleCode.Farsi,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const FarsiIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.FarsiIran,\n  language: {\n    code: LanguageCode.Farsi,\n    name: 'Farsi',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Farsi (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Filipino: Locale = {\n  id: LocaleCode.Filipino,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino',\n  native_name: 'Filipino',\n  rtl: false,\n};\n\nexport const FilipinoPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.FilipinoPhilippines,\n  language: {\n    code: LanguageCode.Filipino,\n    name: 'Filipino',\n    native: 'Filipino',\n  },\n  name: 'Filipino (Philippines)',\n  native_name: 'Filipino (Pilipinas)',\n  rtl: false,\n};\n\nexport const Finnish: Locale = {\n  id: LocaleCode.Finnish,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish',\n  native_name: 'Suomi',\n  rtl: false,\n};\n\nexport const FinnishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.FinnishFinland,\n  language: {\n    code: LanguageCode.Finnish,\n    name: 'Finnish',\n    native: 'Suomi',\n  },\n  name: 'Finnish (Finland)',\n  native_name: 'Suomi (Suomi)',\n  rtl: false,\n};\n\nexport const French: Locale = {\n  id: LocaleCode.French,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French',\n  native_name: 'Fran\u00E7ais',\n  rtl: false,\n};\n\nexport const FrenchBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgique',\n  },\n  id: LocaleCode.FrenchBelgium,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Belgium)',\n  native_name: 'Fran\u00E7ais (Belgique)',\n  rtl: false,\n};\n\nexport const FrenchCanada: Locale = {\n  country: {\n    code: CountryCode.Canada,\n    name: 'Canada',\n    native: 'Canada',\n  },\n  id: LocaleCode.FrenchCanada,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Canada)',\n  native_name: 'Fran\u00E7ais (Canada)',\n  rtl: false,\n};\n\nexport const FrenchFrance: Locale = {\n  country: {\n    code: CountryCode.France,\n    name: 'France',\n    native: 'France',\n  },\n  id: LocaleCode.FrenchFrance,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (France)',\n  native_name: 'Fran\u00E7ais (France)',\n  rtl: false,\n};\n\nexport const FrenchLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.FrenchLuxembourg,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Luxembourg)',\n  native_name: 'Fran\u00E7ais (Luxembourg)',\n  rtl: false,\n};\n\nexport const FrenchMonaco: Locale = {\n  country: {\n    code: CountryCode.Monaco,\n    name: 'Monaco',\n    native: 'Monaco',\n  },\n  id: LocaleCode.FrenchMonaco,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Monaco)',\n  native_name: 'Fran\u00E7ais (Monaco)',\n  rtl: false,\n};\n\nexport const FrenchReunion: Locale = {\n  country: {\n    code: CountryCode.Reunion,\n    name: 'Reunion',\n    native: 'La R\u00E9union',\n  },\n  id: LocaleCode.FrenchReunion,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Reunion)',\n  native_name: 'Fran\u00E7ais (La R\u00E9union)',\n  rtl: false,\n};\n\nexport const FrenchSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.FrenchSwitzerland,\n  language: {\n    code: LanguageCode.French,\n    name: 'French',\n    native: 'Fran\u00E7ais',\n  },\n  name: 'French (Switzerland)',\n  native_name: 'Fran\u00E7ais (Suisse)',\n  rtl: false,\n};\n\nexport const Frisian: Locale = {\n  id: LocaleCode.Frisian,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian',\n  native_name: 'Frysk',\n  rtl: false,\n};\n\nexport const FrisianNetherlands: Locale = {\n  country: {\n    code: CountryCode.Netherlands,\n    name: 'Netherlands',\n    native: 'Nederland',\n  },\n  id: LocaleCode.FrisianNetherlands,\n  language: {\n    code: LanguageCode.Frisian,\n    name: 'Frisian',\n    native: 'Frysk',\n  },\n  name: 'Frisian (Netherlands)',\n  native_name: 'Frysk (Nederland)',\n  rtl: false,\n};\n\nexport const Galician: Locale = {\n  id: LocaleCode.Galician,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician',\n  native_name: 'Galego',\n  rtl: false,\n};\n\nexport const GalicianSpain: Locale = {\n  country: {\n    code: CountryCode.Spain,\n    name: 'Spain',\n    native: 'Espa\u00F1a',\n  },\n  id: LocaleCode.GalicianSpain,\n  language: {\n    code: LanguageCode.Galician,\n    name: 'Galician',\n    native: 'Galego',\n  },\n  name: 'Galician (Spain)',\n  native_name: 'Galego (Espa\u00F1a)',\n  rtl: false,\n};\n\nexport const Georgian: Locale = {\n  id: LocaleCode.Georgian,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  rtl: false,\n};\n\nexport const GeorgianGeorgia: Locale = {\n  country: {\n    code: CountryCode.Georgia,\n    name: 'Georgia',\n    native: '\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD',\n  },\n  id: LocaleCode.GeorgianGeorgia,\n  language: {\n    code: LanguageCode.Georgian,\n    name: 'Georgian',\n    native: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8',\n  },\n  name: 'Georgian (Georgia)',\n  native_name: '\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D8 (\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD)',\n  rtl: false,\n};\n\nexport const German: Locale = {\n  id: LocaleCode.German,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German',\n  native_name: 'Deutsch',\n  rtl: false,\n};\n\nexport const GermanAustria: Locale = {\n  country: {\n    code: CountryCode.Austria,\n    name: 'Austria',\n    native: '\u00D6sterreich',\n  },\n  id: LocaleCode.GermanAustria,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Austria)',\n  native_name: 'Deutsch (\u00D6sterreich)',\n  rtl: false,\n};\n\nexport const GermanBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.GermanBelgium,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Belgium)',\n  native_name: 'Deutsch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const GermanSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Suisse',\n  },\n  id: LocaleCode.GermanSwitzerland,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Switzerland)',\n  native_name: 'Deutsch (Suisse)',\n  rtl: false,\n};\n\nexport const GermanLiechtenstein: Locale = {\n  country: {\n    code: CountryCode.Liechtenstein,\n    name: 'Liechtenstein',\n    native: 'Liechtenstein',\n  },\n  id: LocaleCode.GermanLiechtenstein,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Liechtenstein)',\n  native_name: 'Deutsch (Liechtenstein)',\n  rtl: false,\n};\n\nexport const GermanLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.GermanLuxembourg,\n  language: {\n    code: LanguageCode.German,\n    name: 'German',\n    native: 'Deutsch',\n  },\n  name: 'German (Luxembourg)',\n  native_name: 'Deutsch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Greek: Locale = {\n  id: LocaleCode.Greek,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  rtl: false,\n};\n\nexport const GreekGreece: Locale = {\n  country: {\n    code: CountryCode.Greece,\n    name: 'Greece',\n    native: '\u0395\u03BB\u03BB\u03AC\u03B4\u03B1',\n  },\n  id: LocaleCode.GreekGreece,\n  language: {\n    code: LanguageCode.Greek,\n    name: 'Greek',\n    native: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC',\n  },\n  name: 'Greek (Greece)',\n  native_name: '\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AC (\u0395\u03BB\u03BB\u03AC\u03B4\u03B1)',\n  rtl: false,\n};\n\nexport const Greenlandic: Locale = {\n  id: LocaleCode.Greenlandic,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic',\n  native_name: 'Kalaallisut',\n  rtl: false,\n};\n\nexport const GreenlandicGreenland: Locale = {\n  country: {\n    code: CountryCode.Greenland,\n    name: 'Greenland',\n    native: 'Kalaallit Nunaat',\n  },\n  id: LocaleCode.GreenlandicGreenland,\n  language: {\n    code: LanguageCode.Greenlandic,\n    name: 'Greenlandic',\n    native: 'Kalaallisut',\n  },\n  name: 'Greenlandic (Greenland)',\n  native_name: 'Kalaallisut (Kalaallit Nunaat)',\n  rtl: false,\n};\n\nexport const Gujarati: Locale = {\n  id: LocaleCode.Gujarati,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  rtl: false,\n};\n\nexport const GujaratiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.GujaratiIndia,\n  language: {\n    code: LanguageCode.Gujarati,\n    name: 'Gujarati',\n    native: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0',\n  },\n  name: 'Gujarati (India)',\n  native_name: '\u0A97\u0AC1\u0A9C\u0AB0\u0ABE\u0AA4\u0AC0 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Hausa: Locale = {\n  id: LocaleCode.Hausa,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  rtl: false,\n};\n\nexport const HausaGhana: Locale = {\n  country: {\n    code: CountryCode.Ghana,\n    name: 'Ghana',\n    native: 'Ghana',\n  },\n  id: LocaleCode.HausaGhana,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Ghana)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Ghana)',\n  rtl: false,\n};\n\nexport const HausaNiger: Locale = {\n  country: {\n    code: CountryCode.Niger,\n    name: 'Niger',\n    native: 'Niger',\n  },\n  id: LocaleCode.HausaNiger,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Niger)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Niger)',\n  rtl: false,\n};\n\nexport const HausaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.HausaNigeria,\n  language: {\n    code: LanguageCode.Hausa,\n    name: 'Hausa',\n    native: '\u0647\u064E\u0648\u064F\u0633\u064E',\n  },\n  name: 'Hausa (Nigeria)',\n  native_name: '\u0647\u064E\u0648\u064F\u0633\u064E (Nigeria)',\n  rtl: false,\n};\n\nexport const Hebrew: Locale = {\n  id: LocaleCode.Hebrew,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  },\n  name: 'Hebrew',\n  native_name: '\u05E2\u05D1\u05E8\u05D9\u05EA',\n  rtl: true,\n};\n\n// TODO: Figure this out since Github is censoring it\nexport const HebrewIsrael: Locale = {\n  country: {\n    code: CountryCode.Israel,\n    name: 'Hebrew',\n    native: '',\n  },\n  id: LocaleCode.HebrewIsrael,\n  language: {\n    code: LanguageCode.Hebrew,\n    name: 'Hebrew',\n    native: '',\n  },\n  name: 'Hebrew (Israel)',\n  native_name: '',\n  rtl: true,\n};\n\nexport const Hindi: Locale = {\n  id: LocaleCode.Hindi,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  },\n  name: 'Hindi',\n  native_name: '\u0939\u093F\u0928\u094D\u0926\u0940',\n  rtl: false,\n};\n\nexport const HindiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.HindiIndia,\n  language: {\n    code: LanguageCode.Hindi,\n    name: 'Hindi',\n    native: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  },\n  name: 'Hindi (India)',\n  native_name: '\u092D\u093E\u0930\u0924\u0940\u092F',\n  rtl: false,\n};\n\nexport const Hungarian: Locale = {\n  id: LocaleCode.Hungarian,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian',\n  native_name: 'Magyar',\n  rtl: false,\n};\n\nexport const HungarianHungary: Locale = {\n  country: {\n    code: CountryCode.Hungary,\n    name: 'Hungary',\n    native: 'Magyarorsz\u00E1g',\n  },\n  id: LocaleCode.HungarianHungary,\n  language: {\n    code: LanguageCode.Hungarian,\n    name: 'Hungarian',\n    native: 'Magyar',\n  },\n  name: 'Hungarian (Hungary)',\n  native_name: 'Magyar (Magyarorsz\u00E1g)',\n  rtl: false,\n};\n\nexport const Icelandic: Locale = {\n  id: LocaleCode.Icelandic,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic',\n  native_name: '\u00CDslenska',\n  rtl: false,\n};\n\nexport const IcelandicIceland: Locale = {\n  country: {\n    code: CountryCode.Iceland,\n    name: 'Iceland',\n    native: '\u00CDsland',\n  },\n  id: LocaleCode.IcelandicIceland,\n  language: {\n    code: LanguageCode.Icelandic,\n    name: 'Icelandic',\n    native: '\u00CDslenska',\n  },\n  name: 'Icelandic (Iceland)',\n  native_name: '\u00CDslenska (\u00CDsland)',\n  rtl: false,\n};\n\nexport const Igbo: Locale = {\n  id: LocaleCode.Igbo,\n  language: {\n    code: LanguageCode.Igbo,\n    name: 'Igbo',\n    native: 'Igbo',\n  },\n  name: 'Igbo',\n  native_name: 'Igbo',\n  rtl: false,\n};\n\nexport const Indonesian: Locale = {\n  id: LocaleCode.Indonesian,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian',\n  native_name: 'Bahasa Indonesia',\n  rtl: false,\n};\n\nexport const IndonesianIndonesia: Locale = {\n  country: {\n    code: CountryCode.Indonesia,\n    name: 'Indonesia',\n    native: 'Indonesia',\n  },\n  id: LocaleCode.IndonesianIndonesia,\n  language: {\n    code: LanguageCode.Indonesian,\n    name: 'Indonesian',\n    native: 'Bahasa Indonesia',\n  },\n  name: 'Indonesian (Indonesia)',\n  native_name: 'Bahasa Indonesia (Indonesia)',\n  rtl: false,\n};\n\nexport const Irish: Locale = {\n  id: LocaleCode.Irish,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish',\n  native_name: 'Gaeilge',\n  rtl: false,\n};\n\nexport const IrishIreland: Locale = {\n  country: {\n    code: CountryCode.Ireland,\n    name: 'Ireland',\n    native: '\u00C9ire',\n  },\n  id: LocaleCode.IrishIreland,\n  language: {\n    code: LanguageCode.Irish,\n    name: 'Irish',\n    native: 'Gaeilge',\n  },\n  name: 'Irish (Ireland)',\n  native_name: 'Gaeilge (\u00C9ire)',\n  rtl: false,\n};\n\nexport const Italian: Locale = {\n  id: LocaleCode.Italian,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian',\n  native_name: 'Italiano',\n  rtl: false,\n};\n\nexport const ItalianItaly: Locale = {\n  country: {\n    code: CountryCode.Italy,\n    name: 'Italy',\n    native: 'Italia',\n  },\n  id: LocaleCode.ItalianItaly,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Italy)',\n  native_name: 'Italiano (Italia)',\n  rtl: false,\n};\n\nexport const ItalianSwitzerland: Locale = {\n  country: {\n    code: CountryCode.Switzerland,\n    name: 'Switzerland',\n    native: 'Schweiz',\n  },\n  id: LocaleCode.ItalianSwitzerland,\n  language: {\n    code: LanguageCode.Italian,\n    name: 'Italian',\n    native: 'Italiano',\n  },\n  name: 'Italian (Switzerland)',\n  native_name: 'Italiano (Svizzera)',\n  rtl: false,\n};\n\nexport const Japanese: Locale = {\n  id: LocaleCode.Japanese,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese',\n  native_name: '\u65E5\u672C\u8A9E',\n  rtl: false,\n};\n\nexport const JapaneseJapan: Locale = {\n  country: {\n    code: CountryCode.Japan,\n    name: 'Japan',\n    native: '\u65E5\u672C',\n  },\n  id: LocaleCode.JapaneseJapan,\n  language: {\n    code: LanguageCode.Japanese,\n    name: 'Japanese',\n    native: '\u65E5\u672C\u8A9E',\n  },\n  name: 'Japanese (Japan)',\n  native_name: '\u65E5\u672C\u8A9E (\u65E5\u672C)',\n  rtl: false,\n};\n\nexport const Kannada: Locale = {\n  id: LocaleCode.Kannada,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  rtl: false,\n};\n\nexport const KannadaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0CAD\u0CBE\u0CB0\u0CA4',\n  },\n  id: LocaleCode.KannadaIndia,\n  language: {\n    code: LanguageCode.Kannada,\n    name: 'Kannada',\n    native: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1',\n  },\n  name: 'Kannada (India)',\n  native_name: '\u0C95\u0CA8\u0CCD\u0CA8\u0CA1 (\u0CAD\u0CBE\u0CB0\u0CA4)',\n  rtl: false,\n};\n\nexport const Kazakh: Locale = {\n  id: LocaleCode.Kazakh,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  rtl: false,\n};\n\nexport const KazakhKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KazakhKazakhstan,\n  language: {\n    code: LanguageCode.Kazakh,\n    name: 'Kazakh',\n    native: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456',\n  },\n  name: 'Kazakh (Kazakhstan)',\n  native_name: '\u049A\u0430\u0437\u0430\u049B \u0442\u0456\u043B\u0456 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Khmer: Locale = {\n  id: LocaleCode.Khmer,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  rtl: false,\n};\n\nexport const KhmerCambodia: Locale = {\n  country: {\n    code: CountryCode.Cambodia,\n    name: 'Cambodia',\n    native: '\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6',\n  },\n  id: LocaleCode.KhmerCambodia,\n  language: {\n    code: LanguageCode.Khmer,\n    name: 'Khmer',\n    native: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A',\n  },\n  name: 'Khmer (Cambodia)',\n  native_name: '\u1797\u17B6\u179F\u17B6\u1781\u17D2\u1798\u17C2\u179A (\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6)',\n  rtl: false,\n};\n\nexport const Konkani: Locale = {\n  id: LocaleCode.Konkani,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  rtl: false,\n};\n\nexport const KonkaniIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.KonkaniIndia,\n  language: {\n    code: LanguageCode.Konkani,\n    name: 'Konkani',\n    native: '\u0915\u094B\u0902\u0915\u0923\u0940',\n  },\n  name: 'Konkani (India)',\n  native_name: '\u0915\u094B\u0902\u0915\u0923\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Korean: Locale = {\n  id: LocaleCode.Korean,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean',\n  native_name: '\uD55C\uAD6D\uC5B4',\n  rtl: false,\n};\n\nexport const KoreanSouthKorea: Locale = {\n  country: {\n    code: CountryCode.SouthKorea,\n    name: 'South Korea',\n    native: '\uB300\uD55C\uBBFC\uAD6D',\n  },\n  id: LocaleCode.KoreanSouthKorea,\n  language: {\n    code: LanguageCode.Korean,\n    name: 'Korean',\n    native: '\uD55C\uAD6D\uC5B4',\n  },\n  name: 'Korean (South Korea)',\n  native_name: '\uD55C\uAD6D\uC5B4 (\uB300\uD55C\uBBFC\uAD6D)',\n  rtl: false,\n};\n\nexport const Kurdish: Locale = {\n  id: LocaleCode.Kurdish,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish',\n  native_name: 'Kurd\u00EE',\n  rtl: false,\n};\n\nexport const KurdishIraq: Locale = {\n  country: {\n    code: CountryCode.Iraq,\n    name: 'Iraq',\n    native: '\u0627\u0644\u0639\u0631\u0627\u0642',\n  },\n  id: LocaleCode.KurdishIraq,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Iraq)',\n  native_name: 'Kurd\u00EE (\u0627\u0644\u0639\u0631\u0627\u0642)',\n  rtl: false,\n};\n\nexport const KurdishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.KurdishTurkey,\n  language: {\n    code: LanguageCode.Kurdish,\n    name: 'Kurdish',\n    native: 'Kurd\u00EE',\n  },\n  name: 'Kurdish (Turkey)',\n  native_name: 'Kurd\u00EE (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Kyrgyz: Locale = {\n  id: LocaleCode.Kyrgyz,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  rtl: false,\n};\n\nexport const KyrgyzKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.KyrgyzKyrgyzstan,\n  language: {\n    code: LanguageCode.Kyrgyz,\n    name: 'Kyrgyz',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  name: 'Kyrgyz (Kyrgyzstan)',\n  native_name: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430 (\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const Lao: Locale = {\n  id: LocaleCode.Lao,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao',\n  native_name: '\u0EA5\u0EB2\u0EA7',\n  rtl: false,\n};\n\nexport const LaoLaos: Locale = {\n  country: {\n    code: CountryCode.Laos,\n    name: 'Laos',\n    native: '\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95',\n  },\n  id: LocaleCode.LaoLaos,\n  language: {\n    code: LanguageCode.Lao,\n    name: 'Lao',\n    native: '\u0EA5\u0EB2\u0EA7',\n  },\n  name: 'Lao (Laos)',\n  native_name: '\u0EA5\u0EB2\u0EA7 (\u0EAA.\u0E9B.\u0E9B\u0EB0\u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95)',\n  rtl: false,\n};\n\nexport const Latvian: Locale = {\n  id: LocaleCode.Latvian,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian',\n  native_name: 'Latvie\u0161u',\n  rtl: false,\n};\n\nexport const LatvianLatvia: Locale = {\n  country: {\n    code: CountryCode.Latvia,\n    name: 'Latvia',\n    native: 'Latvija',\n  },\n  id: LocaleCode.LatvianLatvia,\n  language: {\n    code: LanguageCode.Latvian,\n    name: 'Latvian',\n    native: 'Latvie\u0161u',\n  },\n  name: 'Latvian (Latvia)',\n  native_name: 'Latvie\u0161u (Latvija)',\n  rtl: false,\n};\n\nexport const Lithuanian: Locale = {\n  id: LocaleCode.Lithuanian,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian',\n  native_name: 'Lietuvi\u0173',\n  rtl: false,\n};\n\nexport const LithuanianLithuania: Locale = {\n  country: {\n    code: CountryCode.Lithuania,\n    name: 'Lithuania',\n    native: 'Lietuva',\n  },\n  id: LocaleCode.LithuanianLithuania,\n  language: {\n    code: LanguageCode.Lithuanian,\n    name: 'Lithuanian',\n    native: 'Lietuvi\u0173',\n  },\n  name: 'Lithuanian (Lithuania)',\n  native_name: 'Lietuvi\u0173 (Lietuva)',\n  rtl: false,\n};\n\nexport const Luxembourgish: Locale = {\n  id: LocaleCode.Luxembourgish,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish',\n  native_name: 'L\u00EBtzebuergesch',\n  rtl: false,\n};\n\nexport const LuxembourgishBelgium: Locale = {\n  country: {\n    code: CountryCode.Belgium,\n    name: 'Belgium',\n    native: 'Belgi\u00EB',\n  },\n  id: LocaleCode.LuxembourgishBelgium,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Belgium)',\n  native_name: 'L\u00EBtzebuergesch (Belgi\u00EB)',\n  rtl: false,\n};\n\nexport const LuxembourgishLuxembourg: Locale = {\n  country: {\n    code: CountryCode.Luxembourg,\n    name: 'Luxembourg',\n    native: 'Luxembourg',\n  },\n  id: LocaleCode.LuxembourgishLuxembourg,\n  language: {\n    code: LanguageCode.Luxembourgish,\n    name: 'Luxembourgish',\n    native: 'L\u00EBtzebuergesch',\n  },\n  name: 'Luxembourgish (Luxembourg)',\n  native_name: 'L\u00EBtzebuergesch (Luxembourg)',\n  rtl: false,\n};\n\nexport const Macedonian: Locale = {\n  id: LocaleCode.Macedonian,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  rtl: false,\n};\n\nexport const MacedonianNorthMacedonia: Locale = {\n  country: {\n    code: CountryCode.NorthMacedonia,\n    name: 'Macedonia',\n    native: '\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430',\n  },\n  id: LocaleCode.MacedonianNorthMacedonia,\n  language: {\n    code: LanguageCode.Macedonian,\n    name: 'Macedonian',\n    native: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438',\n  },\n  name: 'Macedonian (North Macedonia)',\n  native_name: '\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0441\u043A\u0438 (\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430)',\n  rtl: false,\n};\n\nexport const Malay: Locale = {\n  id: LocaleCode.Malay,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay',\n  native_name: 'Bahasa Melayu',\n  rtl: false,\n};\n\nexport const MalayBrunei: Locale = {\n  country: {\n    code: CountryCode.Brunei,\n    name: 'Brunei',\n    native: 'Negara Brunei Darussalam',\n  },\n  id: LocaleCode.MalayBrunei,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Brunei)',\n  native_name: 'Bahasa Melayu (Negara Brunei Darussalam)',\n  rtl: false,\n};\n\nexport const MalayMalaysia: Locale = {\n  country: {\n    code: CountryCode.Malaysia,\n    name: 'Malaysia',\n    native: 'Malaysia',\n  },\n  id: LocaleCode.MalayMalaysia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Malaysia)',\n  native_name: 'Bahasa Melayu (Malaysia)',\n  rtl: false,\n};\n\nexport const MalaySingapore: Locale = {\n  country: {\n    code: CountryCode.Singapore,\n    name: 'Singapore',\n    native: 'Singapore',\n  },\n  id: LocaleCode.MalaySingapore,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (Singapore)',\n  native_name: 'Bahasa Melayu (Singapore)',\n  rtl: false,\n};\n\nexport const MalayIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MalayIndia,\n  language: {\n    code: LanguageCode.Malay,\n    name: 'Malay',\n    native: 'Bahasa Melayu',\n  },\n  name: 'Malay (India)',\n  native_name: 'Bahasa Melayu (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Maltese: Locale = {\n  id: LocaleCode.Maltese,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese',\n  native_name: 'Malti',\n  rtl: false,\n};\n\nexport const MalteseMalta: Locale = {\n  country: {\n    code: CountryCode.Malta,\n    name: 'Malta',\n    native: 'Malta',\n  },\n  id: LocaleCode.MalteseMalta,\n  language: {\n    code: LanguageCode.Maltese,\n    name: 'Maltese',\n    native: 'Malti',\n  },\n  name: 'Maltese (Malta)',\n  native_name: 'Malti (Malta)',\n  rtl: false,\n};\n\nexport const Maori: Locale = {\n  id: LocaleCode.Maori,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori',\n  native_name: 'M\u0101ori',\n  rtl: false,\n};\n\nexport const MaoriNewZealand: Locale = {\n  country: {\n    code: CountryCode.NewZealand,\n    name: 'New Zealand',\n    native: 'New Zealand',\n  },\n  id: LocaleCode.MaoriNewZealand,\n  language: {\n    code: LanguageCode.Maori,\n    name: 'Maori',\n    native: 'M\u0101ori',\n  },\n  name: 'Maori (New Zealand)',\n  native_name: 'M\u0101ori (New Zealand)',\n  rtl: false,\n};\n\nexport const Marathi: Locale = {\n  id: LocaleCode.Marathi,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi',\n  native_name: '\u092E\u0930\u093E\u0920\u0940',\n  rtl: false,\n};\n\nexport const MarathiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.MarathiIndia,\n  language: {\n    code: LanguageCode.Marathi,\n    name: 'Marathi',\n    native: '\u092E\u0930\u093E\u0920\u0940',\n  },\n  name: 'Marathi (India)',\n  native_name: '\u092E\u0930\u093E\u0920\u0940 (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Mongolian: Locale = {\n  id: LocaleCode.Mongolian,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  rtl: false,\n};\n\nexport const MongolianMongolia: Locale = {\n  country: {\n    code: CountryCode.Mongolia,\n    name: 'Mongolia',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441',\n  },\n  id: LocaleCode.MongolianMongolia,\n  language: {\n    code: LanguageCode.Mongolian,\n    name: 'Mongolian',\n    native: '\u041C\u043E\u043D\u0433\u043E\u043B',\n  },\n  name: 'Mongolian (Mongolia)',\n  native_name: '\u041C\u043E\u043D\u0433\u043E\u043B (\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441)',\n  rtl: false,\n};\n\nexport const Montenegrin: Locale = {\n  id: LocaleCode.Montenegrin,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  rtl: false,\n};\n\nexport const MontenegrinMontenegro: Locale = {\n  country: {\n    code: CountryCode.Montenegro,\n    name: 'Montenegro',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  id: LocaleCode.MontenegrinMontenegro,\n  language: {\n    code: LanguageCode.Montenegrin,\n    name: 'Montenegrin',\n    native: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A',\n  },\n  name: 'Montenegrin (Montenegro)',\n  native_name: '\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A (\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430\u043A)',\n  rtl: false,\n};\n\nexport const Nepali: Locale = {\n  id: LocaleCode.Nepali,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  rtl: false,\n};\n\nexport const NepaliNepal: Locale = {\n  country: {\n    code: CountryCode.Nepal,\n    name: 'Nepal',\n    native: '\u0928\u0947\u092A\u093E\u0932',\n  },\n  id: LocaleCode.NepaliNepal,\n  language: {\n    code: LanguageCode.Nepali,\n    name: 'Nepali',\n    native: '\u0928\u0947\u092A\u093E\u0932\u0940',\n  },\n  name: 'Nepali (Nepal)',\n  native_name: '\u0928\u0947\u092A\u093E\u0932\u0940 (\u0928\u0947\u092A\u093E\u0932)',\n  rtl: false,\n};\n\nexport const NorthernSotho: Locale = {\n  id: LocaleCode.NorthernSotho,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho',\n  native_name: 'Sesotho sa Leboa',\n  rtl: false,\n};\n\nexport const NorthernSothoSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.NorthernSothoSouthAfrica,\n  language: {\n    code: LanguageCode.NorthernSotho,\n    name: 'Northern Sotho',\n    native: 'Sesotho sa Leboa',\n  },\n  name: 'Northern Sotho (South Africa)',\n  native_name: 'Sesotho sa Leboa (South Africa)',\n  rtl: false,\n};\n\nexport const Norwegian: Locale = {\n  id: LocaleCode.Norwegian,\n  language: {\n    code: LanguageCode.Norwegian,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian',\n  native_name: 'Norsk',\n  rtl: false,\n};\n\nexport const NorwegianBokmalNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianBokmalNorway,\n  language: {\n    code: LanguageCode.NorwegianBokmal,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Bokmal)',\n  native_name: 'Norsk (Bokm\u00E5l)',\n  rtl: false,\n};\n\nexport const NorwegianNynorskNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.NorwegianNynorskNorway,\n  language: {\n    code: LanguageCode.NorwegianNynorsk,\n    name: 'Norwegian',\n    native: 'Norsk',\n  },\n  name: 'Norwegian (Nynorsk)',\n  native_name: 'Norsk (Nynorsk)',\n  rtl: false,\n};\n\nexport const Oriya: Locale = {\n  id: LocaleCode.Oriya,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  rtl: false,\n};\n\nexport const OriyaIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.OriyaIndia,\n  language: {\n    code: LanguageCode.Oriya,\n    name: 'Oriya',\n    native: '\u0B13\u0B21\u0B3C\u0B3F\u0B06',\n  },\n  name: 'Oriya (India)',\n  native_name: '\u0B13\u0B21\u0B3C\u0B3F\u0B06 (\u0B2D\u0B3E\u0B30\u0B24)',\n  rtl: false,\n};\n\nexport const Pashto: Locale = {\n  id: LocaleCode.Pashto,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto',\n  native_name: '\u067E\u069A\u062A\u0648',\n  rtl: true,\n};\n\nexport const PashtoAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PashtoAfghanistan,\n  language: {\n    code: LanguageCode.Pashto,\n    name: 'Pashto',\n    native: '\u067E\u069A\u062A\u0648',\n  },\n  name: 'Pashto (Afghanistan)',\n  native_name: '\u067E\u069A\u062A\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Persian: Locale = {\n  id: LocaleCode.Persian,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC',\n  rtl: true,\n};\n\nexport const PersianIran: Locale = {\n  country: {\n    code: CountryCode.Iran,\n    name: 'Iran',\n    native: '\u0627\u06CC\u0631\u0627\u0646',\n  },\n  id: LocaleCode.PersianIran,\n  language: {\n    code: LanguageCode.Persian,\n    name: 'Persian',\n    native: '\u0641\u0627\u0631\u0633\u06CC',\n  },\n  name: 'Persian (Iran)',\n  native_name: '\u0641\u0627\u0631\u0633\u06CC (\u0627\u06CC\u0631\u0627\u0646)',\n  rtl: true,\n};\n\nexport const Polish: Locale = {\n  id: LocaleCode.Polish,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish',\n  native_name: 'Polski',\n  rtl: false,\n};\n\nexport const PolishPoland: Locale = {\n  country: {\n    code: CountryCode.Poland,\n    name: 'Poland',\n    native: 'Polska',\n  },\n  id: LocaleCode.PolishPoland,\n  language: {\n    code: LanguageCode.Polish,\n    name: 'Polish',\n    native: 'Polski',\n  },\n  name: 'Polish (Poland)',\n  native_name: 'Polski (Polska)',\n  rtl: false,\n};\n\nexport const Portuguese: Locale = {\n  id: LocaleCode.Portuguese,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese',\n  native_name: 'Portugu\u00EAs',\n  rtl: false,\n};\n\nexport const PortugueseBrazil: Locale = {\n  country: {\n    code: CountryCode.Brazil,\n    name: 'Brazil',\n    native: 'Brasil',\n  },\n  id: LocaleCode.PortugueseBrazil,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Brazil)',\n  native_name: 'Portugu\u00EAs (Brasil)',\n  rtl: false,\n};\n\nexport const PortuguesePortugal: Locale = {\n  country: {\n    code: CountryCode.Portugal,\n    name: 'Portugal',\n    native: 'Portugal',\n  },\n  id: LocaleCode.PortuguesePortugal,\n  language: {\n    code: LanguageCode.Portuguese,\n    name: 'Portuguese',\n    native: 'Portugu\u00EAs',\n  },\n  name: 'Portuguese (Portugal)',\n  native_name: 'Portugu\u00EAs (Portugal)',\n  rtl: false,\n};\n\nexport const Punjabi: Locale = {\n  id: LocaleCode.Punjabi,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  rtl: true,\n};\n\nexport const PunjabiPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.PunjabiPakistan,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (Pakistan)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const PunjabiIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0A2D\u0A3E\u0A30\u0A24',\n  },\n  id: LocaleCode.PunjabiIndia,\n  language: {\n    code: LanguageCode.Punjabi,\n    name: 'Punjabi',\n    native: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40',\n  },\n  name: 'Punjabi (India)',\n  native_name: '\u0A2A\u0A70\u0A1C\u0A3E\u0A2C\u0A40 (\u0A2D\u0A3E\u0A30\u0A24)',\n  rtl: true,\n};\n\nexport const Quechua: Locale = {\n  id: LocaleCode.Quechua,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua',\n  native_name: 'Runa Simi',\n  rtl: false,\n};\n\nexport const QuechuaBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.QuechuaBolivia,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Bolivia)',\n  native_name: 'Runa Simi (Bolivia)',\n  rtl: false,\n};\n\nexport const QuechuaEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.QuechuaEcuador,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Ecuador)',\n  native_name: 'Runa Simi (Ecuador)',\n  rtl: false,\n};\n\nexport const QuechuaPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.QuechuaPeru,\n  language: {\n    code: LanguageCode.Quechua,\n    name: 'Quechua',\n    native: 'Runa Simi',\n  },\n  name: 'Quechua (Peru)',\n  native_name: 'Runa Simi (Per\u00FA)',\n  rtl: false,\n};\n\nexport const Romanian: Locale = {\n  id: LocaleCode.Romanian,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian',\n  native_name: 'Rom\u00E2n\u0103',\n  rtl: false,\n};\n\nexport const RomanianRomania: Locale = {\n  country: {\n    code: CountryCode.Romania,\n    name: 'Romania',\n    native: 'Rom\u00E2nia',\n  },\n  id: LocaleCode.RomanianRomania,\n  language: {\n    code: LanguageCode.Romanian,\n    name: 'Romanian',\n    native: 'Rom\u00E2n\u0103',\n  },\n  name: 'Romanian (Romania)',\n  native_name: 'Rom\u00E2n\u0103 (Rom\u00E2nia)',\n  rtl: false,\n};\n\nexport const Russian: Locale = {\n  id: LocaleCode.Russian,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  rtl: false,\n};\n\nexport const RussianRussia: Locale = {\n  country: {\n    code: CountryCode.RussianFederation,\n    name: 'Russian Federation',\n    native: '\u0420\u043E\u0441\u0441\u0438\u044F',\n  },\n  id: LocaleCode.RussianRussia,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Russia)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0420\u043E\u0441\u0441\u0438\u044F)',\n  rtl: false,\n};\n\nexport const RussianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.RussianUkraine,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Ukraine)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const RussianKazakhstan: Locale = {\n  country: {\n    code: CountryCode.Kazakhstan,\n    name: 'Kazakhstan',\n    native: '\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D',\n  },\n  id: LocaleCode.RussianKazakhstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kazakhstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D)',\n  rtl: false,\n};\n\nexport const RussianKyrgyzstan: Locale = {\n  country: {\n    code: CountryCode.Kyrgyzstan,\n    name: 'Kyrgyzstan',\n    native: '\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430',\n  },\n  id: LocaleCode.RussianKyrgyzstan,\n  language: {\n    code: LanguageCode.Russian,\n    name: 'Russian',\n    native: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439',\n  },\n  name: 'Russian (Kyrgyzstan)',\n  native_name: '\u0420\u0443\u0441\u0441\u043A\u0438\u0439 (\u041A\u044B\u0440\u0433\u044B\u0437\u0447\u0430)',\n  rtl: false,\n};\n\nexport const Sanskrit: Locale = {\n  id: LocaleCode.Sanskrit,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  rtl: false,\n};\n\nexport const SanskritIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.SanskritIndia,\n  language: {\n    code: LanguageCode.Sanskrit,\n    name: 'Sanskrit',\n    native: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D',\n  },\n  name: 'Sanskrit (India)',\n  native_name: '\u0938\u0902\u0938\u094D\u0915\u0943\u0924\u092E\u094D (\u092D\u093E\u0930\u0924)',\n  rtl: false,\n};\n\nexport const Sami: Locale = {\n  id: LocaleCode.Sami,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami',\n  native_name: 'S\u00E1megiella',\n  rtl: false,\n};\n\nexport const SamiFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SamiFinland,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Finland)',\n  native_name: 'S\u00E1megiella (Suomi)',\n  rtl: false,\n};\n\nexport const SamiNorway: Locale = {\n  country: {\n    code: CountryCode.Norway,\n    name: 'Norway',\n    native: 'Norge',\n  },\n  id: LocaleCode.SamiNorway,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Norway)',\n  native_name: 'S\u00E1megiella (Norge)',\n  rtl: false,\n};\n\nexport const SamiSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SamiSweden,\n  language: {\n    code: LanguageCode.Sami,\n    name: 'Sami',\n    native: 'S\u00E1megiella',\n  },\n  name: 'Sami (Sweden)',\n  native_name: 'S\u00E1megiella (Sverige)',\n  rtl: false,\n};\n\nexport const Samoan: Locale = {\n  id: LocaleCode.Samoan,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan',\n  native_name: 'Gagana fa\u2019a S\u0101moa',\n  rtl: false,\n};\n\nexport const SamoanSamoa: Locale = {\n  country: {\n    code: CountryCode.Samoa,\n    name: 'Samoa',\n    native: 'Samoa',\n  },\n  id: LocaleCode.SamoanSamoa,\n  language: {\n    code: LanguageCode.Samoan,\n    name: 'Samoan',\n    native: 'Gagana fa\u2019a S\u0101moa',\n  },\n  name: 'Samoan (Samoa)',\n  native_name: 'Gagana fa\u2019a S\u0101moa (Samoa)',\n  rtl: false,\n};\n\nexport const Serbian: Locale = {\n  id: LocaleCode.Serbian,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin)',\n  native_name: 'Srpski (Latinica)',\n  rtl: false,\n};\n\nexport const SerbianBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: 'Bosna i Hercegovina',\n  },\n  id: LocaleCode.SerbianBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Bosnia and Herzegovina)',\n  native_name: 'Srpski (Latinica) (Bosna i Hercegovina)',\n  rtl: false,\n};\n\nexport const SerbianSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: 'Srbija i Crna Gora',\n  },\n  id: LocaleCode.SerbianSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.Serbian,\n    name: 'Serbian (Latin)',\n    native: 'Srpski (Latinica)',\n  },\n  name: 'Serbian (Latin) (Serbia and Montenegro)',\n  native_name: 'Srpski (Latinica) (Srbija i Crna Gora)',\n  rtl: false,\n};\n\nexport const SerbianCyrillic: Locale = {\n  id: LocaleCode.SerbianCyrillic,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicBosniaAndHerzegovina: Locale = {\n  country: {\n    code: CountryCode.BosniaAndHerzegovina,\n    name: 'Bosnia and Herzegovina',\n    native: '\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicBosniaAndHerzegovina,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Bosnia and Herzegovina)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430)',\n  rtl: false,\n};\n\nexport const SerbianCyrillicSerbiaAndMontenegro: Locale = {\n  country: {\n    code: CountryCode.SerbiaAndMontenegro,\n    name: 'Serbia and Montenegro',\n    native: '\u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430',\n  },\n  id: LocaleCode.SerbianCyrillicSerbiaAndMontenegro,\n  language: {\n    code: LanguageCode.SerbianCyrillic,\n    name: 'Serbian',\n    native: '\u0421\u0440\u043F\u0441\u043A\u0438',\n  },\n  name: 'Serbian (Cyrillic, Serbia and Montenegro)',\n  native_name: '\u0421\u0440\u043F\u0441\u043A\u0438 (\u040B\u0438\u0440\u0438\u043B\u0438\u0446\u0430, \u0421\u0440\u0431\u0438\u0458\u0430 \u0438 \u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430)',\n  rtl: false,\n};\n\nexport const Slovak: Locale = {\n  id: LocaleCode.Slovak,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak',\n  native_name: 'Sloven\u010Dina',\n  rtl: false,\n};\n\nexport const SlovakSlovakia: Locale = {\n  country: {\n    code: CountryCode.Slovakia,\n    name: 'Slovakia',\n    native: 'Slovensko',\n  },\n  id: LocaleCode.SlovakSlovakia,\n  language: {\n    code: LanguageCode.Slovak,\n    name: 'Slovak',\n    native: 'Sloven\u010Dina',\n  },\n  name: 'Slovak (Slovakia)',\n  native_name: 'Sloven\u010Dina (Slovensko)',\n  rtl: false,\n};\n\nexport const Slovenian: Locale = {\n  id: LocaleCode.Slovenian,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian',\n  native_name: 'Sloven\u0161\u010Dina',\n  rtl: false,\n};\n\nexport const SlovenianSlovenia: Locale = {\n  country: {\n    code: CountryCode.Slovenia,\n    name: 'Slovenia',\n    native: 'Slovenija',\n  },\n  id: LocaleCode.SlovenianSlovenia,\n  language: {\n    code: LanguageCode.Slovenian,\n    name: 'Slovenian',\n    native: 'Sloven\u0161\u010Dina',\n  },\n  name: 'Slovenian (Slovenia)',\n  native_name: 'Sloven\u0161\u010Dina (Slovenija)',\n  rtl: false,\n};\n\nexport const Somali: Locale = {\n  id: LocaleCode.Somali,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali',\n  native_name: 'Soomaaliga',\n  rtl: true,\n};\n\nexport const SomaliSomalia: Locale = {\n  country: {\n    code: CountryCode.Somalia,\n    name: 'Somalia',\n    native: 'Soomaaliya',\n  },\n  id: LocaleCode.SomaliSomalia,\n  language: {\n    code: LanguageCode.Somali,\n    name: 'Somali',\n    native: 'Soomaaliga',\n  },\n  name: 'Somali (Somalia)',\n  native_name: 'Soomaaliga (Soomaaliya)',\n  rtl: true,\n};\n\nexport const Spanish: Locale = {\n  id: LocaleCode.Spanish,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish',\n  native_name: 'Espa\u00F1ol',\n  rtl: false,\n};\n\nexport const SpanishArgentina: Locale = {\n  country: {\n    code: CountryCode.Argentina,\n    name: 'Argentina',\n    native: 'Argentina',\n  },\n  id: LocaleCode.SpanishArgentina,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Argentina)',\n  native_name: 'Espa\u00F1ol (Argentina)',\n  rtl: false,\n};\n\nexport const SpanishBolivia: Locale = {\n  country: {\n    code: CountryCode.Bolivia,\n    name: 'Bolivia',\n    native: 'Bolivia',\n  },\n  id: LocaleCode.SpanishBolivia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Bolivia)',\n  native_name: 'Espa\u00F1ol (Bolivia)',\n  rtl: false,\n};\n\nexport const SpanishChile: Locale = {\n  country: {\n    code: CountryCode.Chile,\n    name: 'Chile',\n    native: 'Chile',\n  },\n  id: LocaleCode.SpanishChile,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Chile)',\n  native_name: 'Espa\u00F1ol (Chile)',\n  rtl: false,\n};\n\nexport const SpanishColombia: Locale = {\n  country: {\n    code: CountryCode.Colombia,\n    name: 'Colombia',\n    native: 'Colombia',\n  },\n  id: LocaleCode.SpanishColombia,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Colombia)',\n  native_name: 'Espa\u00F1ol (Colombia)',\n  rtl: false,\n};\n\nexport const SpanishCostaRica: Locale = {\n  country: {\n    code: CountryCode.CostaRica,\n    name: 'Costa Rica',\n    native: 'Costa Rica',\n  },\n  id: LocaleCode.SpanishCostaRica,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Costa Rica)',\n  native_name: 'Espa\u00F1ol (Costa Rica)',\n  rtl: false,\n};\n\nexport const SpanishCuba: Locale = {\n  country: {\n    code: CountryCode.Cuba,\n    name: 'Cuba',\n    native: 'Cuba',\n  },\n  id: LocaleCode.SpanishCuba,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Cuba)',\n  native_name: 'Espa\u00F1ol (Cuba)',\n  rtl: false,\n};\n\nexport const SpanishDominicanRepublic: Locale = {\n  country: {\n    code: CountryCode.DominicanRepublic,\n    name: 'Dominican Republic',\n    native: 'Rep\u00FAblica Dominicana',\n  },\n  id: LocaleCode.SpanishDominicanRepublic,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Dominican Republic)',\n  native_name: 'Espa\u00F1ol (Rep\u00FAblica Dominicana)',\n  rtl: false,\n};\n\nexport const SpanishEcuador: Locale = {\n  country: {\n    code: CountryCode.Ecuador,\n    name: 'Ecuador',\n    native: 'Ecuador',\n  },\n  id: LocaleCode.SpanishEcuador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Ecuador)',\n  native_name: 'Espa\u00F1ol (Ecuador)',\n  rtl: false,\n};\n\nexport const SpanishElSalvador: Locale = {\n  country: {\n    code: CountryCode.ElSalvador,\n    name: 'El Salvador',\n    native: 'El Salvador',\n  },\n  id: LocaleCode.SpanishElSalvador,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (El Salvador)',\n  native_name: 'Espa\u00F1ol (El Salvador)',\n  rtl: false,\n};\n\nexport const SpanishEquatorialGuinea: Locale = {\n  country: {\n    code: CountryCode.EquatorialGuinea,\n    name: 'Equatorial Guinea',\n    native: 'Guinea Ecuatorial',\n  },\n  id: LocaleCode.SpanishEquatorialGuinea,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Equatorial Guinea)',\n  native_name: 'Espa\u00F1ol (Guinea Ecuatorial)',\n  rtl: false,\n};\n\nexport const SpanishGuatemala: Locale = {\n  country: {\n    code: CountryCode.Guatemala,\n    name: 'Guatemala',\n    native: 'Guatemala',\n  },\n  id: LocaleCode.SpanishGuatemala,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Guatemala)',\n  native_name: 'Espa\u00F1ol (Guatemala)',\n  rtl: false,\n};\n\nexport const SpanishHonduras: Locale = {\n  country: {\n    code: CountryCode.Honduras,\n    name: 'Honduras',\n    native: 'Honduras',\n  },\n  id: LocaleCode.SpanishHonduras,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Honduras)',\n  native_name: 'Espa\u00F1ol (Honduras)',\n  rtl: false,\n};\n\nexport const SpanishMexico: Locale = {\n  country: {\n    code: CountryCode.Mexico,\n    name: 'Mexico',\n    native: 'M\u00E9xico',\n  },\n  id: LocaleCode.SpanishMexico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Mexico)',\n  native_name: 'Espa\u00F1ol (M\u00E9xico)',\n  rtl: false,\n};\n\nexport const SpanishNicaragua: Locale = {\n  country: {\n    code: CountryCode.Nicaragua,\n    name: 'Nicaragua',\n    native: 'Nicaragua',\n  },\n  id: LocaleCode.SpanishNicaragua,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Nicaragua)',\n  native_name: 'Espa\u00F1ol (Nicaragua)',\n  rtl: false,\n};\n\nexport const SpanishPanama: Locale = {\n  country: {\n    code: CountryCode.Panama,\n    name: 'Panama',\n    native: 'Panam\u00E1',\n  },\n  id: LocaleCode.SpanishPanama,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Panama)',\n  native_name: 'Espa\u00F1ol (Panam\u00E1)',\n  rtl: false,\n};\n\nexport const SpanishParaguay: Locale = {\n  country: {\n    code: CountryCode.Paraguay,\n    name: 'Paraguay',\n    native: 'Paraguay',\n  },\n  id: LocaleCode.SpanishParaguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Paraguay)',\n  native_name: 'Espa\u00F1ol (Paraguay)',\n  rtl: false,\n};\n\nexport const SpanishPeru: Locale = {\n  country: {\n    code: CountryCode.Peru,\n    name: 'Peru',\n    native: 'Per\u00FA',\n  },\n  id: LocaleCode.SpanishPeru,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Peru)',\n  native_name: 'Espa\u00F1ol (Per\u00FA)',\n  rtl: false,\n};\n\nexport const SpanishPuertoRico: Locale = {\n  country: {\n    code: CountryCode.PuertoRico,\n    name: 'Puerto Rico',\n    native: 'Puerto Rico',\n  },\n  id: LocaleCode.SpanishPuertoRico,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Puerto Rico)',\n  native_name: 'Espa\u00F1ol (Puerto Rico)',\n  rtl: false,\n};\n\nexport const SpanishUruguay: Locale = {\n  country: {\n    code: CountryCode.Uruguay,\n    name: 'Uruguay',\n    native: 'Uruguay',\n  },\n  id: LocaleCode.SpanishUruguay,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Uruguay)',\n  native_name: 'Espa\u00F1ol (Uruguay)',\n  rtl: false,\n};\n\nexport const SpanishVenezuela: Locale = {\n  country: {\n    code: CountryCode.Venezuela,\n    name: 'Venezuela',\n    native: 'Venezuela',\n  },\n  id: LocaleCode.SpanishVenezuela,\n  language: {\n    code: LanguageCode.Spanish,\n    name: 'Spanish',\n    native: 'Espa\u00F1ol',\n  },\n  name: 'Spanish (Venezuela)',\n  native_name: 'Espa\u00F1ol (Venezuela)',\n  rtl: false,\n};\n\nexport const SutuSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.SutuSouthAfrica,\n  language: {\n    code: LanguageCode.Sutu,\n    name: 'Sutu',\n    native: 'Sesotho',\n  },\n  name: 'Sutu (South Africa)',\n  native_name: 'Sesotho (Afrika Borwa)',\n  rtl: false,\n};\n\nexport const Swahili: Locale = {\n  id: LocaleCode.Swahili,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili',\n  native_name: 'Kiswahili',\n  rtl: false,\n};\n\nexport const SwahiliKenya: Locale = {\n  country: {\n    code: CountryCode.Kenya,\n    name: 'Kenya',\n    native: 'Kenya',\n  },\n  id: LocaleCode.SwahiliKenya,\n  language: {\n    code: LanguageCode.Swahili,\n    name: 'Swahili',\n    native: 'Kiswahili',\n  },\n  name: 'Swahili (Kenya)',\n  native_name: 'Kiswahili (Kenya)',\n  rtl: false,\n};\n\nexport const Swedish: Locale = {\n  id: LocaleCode.Swedish,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish',\n  native_name: 'Svenska',\n  rtl: false,\n};\n\nexport const SwedishFinland: Locale = {\n  country: {\n    code: CountryCode.Finland,\n    name: 'Finland',\n    native: 'Suomi',\n  },\n  id: LocaleCode.SwedishFinland,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Finland)',\n  native_name: 'Svenska (Finland)',\n  rtl: false,\n};\n\nexport const SwedishSweden: Locale = {\n  country: {\n    code: CountryCode.Sweden,\n    name: 'Sweden',\n    native: 'Sverige',\n  },\n  id: LocaleCode.SwedishSweden,\n  language: {\n    code: LanguageCode.Swedish,\n    name: 'Swedish',\n    native: 'Svenska',\n  },\n  name: 'Swedish (Sweden)',\n  native_name: 'Svenska (Sverige)',\n  rtl: false,\n};\n\nexport const Syriac: Locale = {\n  id: LocaleCode.Syriac,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  rtl: true,\n};\n\nexport const SyriacSyria: Locale = {\n  country: {\n    code: CountryCode.Syria,\n    name: 'Syria',\n    native: '\u0633\u0648\u0631\u064A\u0627',\n  },\n  id: LocaleCode.SyriacSyria,\n  language: {\n    code: LanguageCode.Syriac,\n    name: 'Syriac',\n    native: '\u0723\u0718\u072A\u071D\u071D\u0710',\n  },\n  name: 'Syriac (Syria)',\n  native_name: '\u0723\u0718\u072A\u071D\u071D\u0710 (\u0633\u0648\u0631\u064A\u0627)',\n  rtl: true,\n};\n\nexport const Tajik: Locale = {\n  id: LocaleCode.Tajik,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  rtl: false,\n};\n\nexport const TajikTajikistan: Locale = {\n  country: {\n    code: CountryCode.Tajikistan,\n    name: 'Tajikistan',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.TajikTajikistan,\n  language: {\n    code: LanguageCode.Tajik,\n    name: 'Tajik',\n    native: '\u0422\u043E\u04B7\u0438\u043A\u04E3',\n  },\n  name: 'Tajik (Tajikistan)',\n  native_name: '\u0422\u043E\u04B7\u0438\u043A\u04E3 (\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Tagalog: Locale = {\n  id: LocaleCode.Tagalog,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog',\n  native_name: 'Tagalog',\n  rtl: false,\n};\n\nexport const TagalogPhilippines: Locale = {\n  country: {\n    code: CountryCode.Philippines,\n    name: 'Philippines',\n    native: 'Pilipinas',\n  },\n  id: LocaleCode.TagalogPhilippines,\n  language: {\n    code: LanguageCode.Tagalog,\n    name: 'Tagalog',\n    native: 'Tagalog',\n  },\n  name: 'Tagalog (Philippines)',\n  native_name: 'Tagalog (Pilipinas)',\n  rtl: false,\n};\n\nexport const Tamil: Locale = {\n  id: LocaleCode.Tamil,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  rtl: false,\n};\n\nexport const TamilIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TamilIndia,\n  language: {\n    code: LanguageCode.Tamil,\n    name: 'Tamil',\n    native: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD',\n  },\n  name: 'Tamil (India)',\n  native_name: '\u0BA4\u0BAE\u0BBF\u0BB4\u0BCD (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Telugu: Locale = {\n  id: LocaleCode.Telugu,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  rtl: false,\n};\n\nexport const TeluguIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02',\n  },\n  id: LocaleCode.TeluguIndia,\n  language: {\n    code: LanguageCode.Telugu,\n    name: 'Telugu',\n    native: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41',\n  },\n  name: 'Telugu (India)',\n  native_name: '\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41 (\u0C2D\u0C3E\u0C30\u0C24\u0C26\u0C47\u0C36\u0C02)',\n  rtl: false,\n};\n\nexport const Thai: Locale = {\n  id: LocaleCode.Thai,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai',\n  native_name: '\u0E44\u0E17\u0E22',\n  rtl: false,\n};\n\nexport const ThaiThailand: Locale = {\n  country: {\n    code: CountryCode.Thailand,\n    name: 'Thailand',\n    native: '\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22',\n  },\n  id: LocaleCode.ThaiThailand,\n  language: {\n    code: LanguageCode.Thai,\n    name: 'Thai',\n    native: '\u0E44\u0E17\u0E22',\n  },\n  name: 'Thai (Thailand)',\n  native_name: '\u0E44\u0E17\u0E22 (\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22)',\n  rtl: false,\n};\n\nexport const Tibetan: Locale = {\n  id: LocaleCode.Tibetan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  rtl: false,\n};\n\nexport const TibetanChina: Locale = {\n  country: {\n    code: CountryCode.China,\n    name: 'China',\n    native: '\u4E2D\u56FD',\n  },\n  id: LocaleCode.TibetanChina,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (China)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42)',\n  rtl: false,\n};\n\nexport const TibetanBhutan: Locale = {\n  country: {\n    code: CountryCode.Bhutan,\n    name: 'Bhutan',\n    native: '\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D',\n  },\n  id: LocaleCode.TibetanBhutan,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (Bhutan)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB1\u0F72\u0F0B\u0F63\u0F7A\u0F53\u0F4C\u0F0D)',\n  rtl: false,\n};\n\nexport const TibetanIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE',\n  },\n  id: LocaleCode.TibetanIndia,\n  language: {\n    code: LanguageCode.Tibetan,\n    name: 'Tibetan',\n    native: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42',\n  },\n  name: 'Tibetan (India)',\n  native_name: '\u0F56\u0F7C\u0F51\u0F0B\u0F61\u0F72\u0F42 (\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE)',\n  rtl: false,\n};\n\nexport const Tsonga: Locale = {\n  id: LocaleCode.Tsonga,\n  language: {\n    code: LanguageCode.Tsonga,\n    name: 'Tsonga',\n    native: 'Xitsonga',\n  },\n  name: 'Tsonga',\n  native_name: 'Xitsonga',\n  rtl: false,\n};\n\nexport const Tswana: Locale = {\n  id: LocaleCode.Tswana,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana',\n  native_name: 'Setswana',\n  rtl: false,\n};\n\nexport const TswanaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.TswanaSouthAfrica,\n  language: {\n    code: LanguageCode.Tswana,\n    name: 'Tswana',\n    native: 'Setswana',\n  },\n  name: 'Tswana (South Africa)',\n  native_name: 'Setswana (South Africa)',\n  rtl: false,\n};\n\nexport const Turkish: Locale = {\n  id: LocaleCode.Turkish,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish',\n  native_name: 'T\u00FCrk\u00E7e',\n  rtl: false,\n};\n\nexport const TurkishTurkey: Locale = {\n  country: {\n    code: CountryCode.Turkey,\n    name: 'Turkey',\n    native: 'T\u00FCrkiye',\n  },\n  id: LocaleCode.TurkishTurkey,\n  language: {\n    code: LanguageCode.Turkish,\n    name: 'Turkish',\n    native: 'T\u00FCrk\u00E7e',\n  },\n  name: 'Turkish (Turkey)',\n  native_name: 'T\u00FCrk\u00E7e (T\u00FCrkiye)',\n  rtl: false,\n};\n\nexport const Ukrainian: Locale = {\n  id: LocaleCode.Ukrainian,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  rtl: false,\n};\n\nexport const UkrainianUkraine: Locale = {\n  country: {\n    code: CountryCode.Ukraine,\n    name: 'Ukraine',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0430',\n  },\n  id: LocaleCode.UkrainianUkraine,\n  language: {\n    code: LanguageCode.Ukrainian,\n    name: 'Ukrainian',\n    native: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430',\n  },\n  name: 'Ukrainian (Ukraine)',\n  native_name: '\u0423\u043A\u0440\u0430\u0457\u043D\u0441\u044C\u043A\u0430 (\u0423\u043A\u0440\u0430\u0457\u043D\u0430)',\n  rtl: false,\n};\n\nexport const Urdu: Locale = {\n  id: LocaleCode.Urdu,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu',\n  native_name: '\u0627\u0631\u062F\u0648',\n  rtl: true,\n};\n\nexport const UrduAfghanistan: Locale = {\n  country: {\n    code: CountryCode.Afghanistan,\n    name: 'Afghanistan',\n    native: '\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduAfghanistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Afghanistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UrduIndia: Locale = {\n  country: {\n    code: CountryCode.India,\n    name: 'India',\n    native: '\u092D\u093E\u0930\u0924',\n  },\n  id: LocaleCode.UrduIndia,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (India)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u092D\u093E\u0930\u0924)',\n  rtl: true,\n};\n\nexport const UrduPakistan: Locale = {\n  country: {\n    code: CountryCode.Pakistan,\n    name: 'Pakistan',\n    native: '\u067E\u0627\u06A9\u0633\u062A\u0627\u0646',\n  },\n  id: LocaleCode.UrduPakistan,\n  language: {\n    code: LanguageCode.Urdu,\n    name: 'Urdu',\n    native: '\u0627\u0631\u062F\u0648',\n  },\n  name: 'Urdu (Pakistan)',\n  native_name: '\u0627\u0631\u062F\u0648 (\u067E\u0627\u06A9\u0633\u062A\u0627\u0646)',\n  rtl: true,\n};\n\nexport const UzbekLatin: Locale = {\n  id: LocaleCode.Uzbek,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek',\n  native_name: 'O\u02BBzbekcha',\n  rtl: false,\n};\n\nexport const UzbekUzbekistan: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: 'O\u02BBzbekiston',\n  },\n  id: LocaleCode.UzbekUzbekistan,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: 'O\u02BBzbekcha',\n  },\n  name: 'Uzbek (Latin, Uzbekistan)',\n  native_name: 'O\u02BBzbekcha (O\u02BBzbekiston)',\n  rtl: false,\n};\n\nexport const UzbekCyrillic: Locale = {\n  country: {\n    code: CountryCode.Uzbekistan,\n    name: 'Uzbekistan',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  id: LocaleCode.UzbekCyrillic,\n  language: {\n    code: LanguageCode.Uzbek,\n    name: 'Uzbek',\n    native: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D',\n  },\n  name: 'Uzbek (Cyrillic)',\n  native_name: '\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D (\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D)',\n  rtl: false,\n};\n\nexport const Vietnamese: Locale = {\n  id: LocaleCode.Vietnamese,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t',\n  rtl: false,\n};\n\nexport const VietnameseVietnam: Locale = {\n  country: {\n    code: CountryCode.Vietnam,\n    name: 'Vietnam',\n    native: 'Vi\u1EC7t Nam',\n  },\n  id: LocaleCode.VietnameseVietnam,\n  language: {\n    code: LanguageCode.Vietnamese,\n    name: 'Vietnamese',\n    native: 'Ti\u1EBFng Vi\u1EC7t',\n  },\n  name: 'Vietnamese (Vietnam)',\n  native_name: 'Ti\u1EBFng Vi\u1EC7t (Vi\u1EC7t Nam)',\n  rtl: false,\n};\n\nexport const Welsh: Locale = {\n  id: LocaleCode.Welsh,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh',\n  native_name: 'Cymraeg',\n  rtl: false,\n};\n\nexport const WelshUnitedKingdom: Locale = {\n  country: {\n    code: CountryCode.UnitedKingdom,\n    name: 'United Kingdom',\n    native: 'United Kingdom',\n  },\n  id: LocaleCode.WelshUnitedKingdom,\n  language: {\n    code: LanguageCode.Welsh,\n    name: 'Welsh',\n    native: 'Cymraeg',\n  },\n  name: 'Welsh (United Kingdom)',\n  native_name: 'Cymraeg (United Kingdom)',\n  rtl: false,\n};\n\nexport const Xhosa: Locale = {\n  id: LocaleCode.Xhosa,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa',\n  native_name: 'isiXhosa',\n  rtl: false,\n};\n\nexport const XhosaSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.XhosaSouthAfrica,\n  language: {\n    code: LanguageCode.Xhosa,\n    name: 'Xhosa',\n    native: 'isiXhosa',\n  },\n  name: 'Xhosa (South Africa)',\n  native_name: 'isiXhosa (South Africa)',\n  rtl: false,\n};\n\nexport const Yiddish: Locale = {\n  id: LocaleCode.Yiddish,\n  language: {\n    code: LanguageCode.Yiddish,\n    name: 'Yiddish',\n    native: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  },\n  name: 'Yiddish',\n  native_name: '\u05D9\u05D9\u05B4\u05D3\u05D9\u05E9',\n  rtl: false,\n};\n\nexport const Yoruba: Locale = {\n  id: LocaleCode.Yoruba,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba',\n  native_name: 'Yor\u00F9b\u00E1',\n  rtl: false,\n};\n\nexport const YorubaNigeria: Locale = {\n  country: {\n    code: CountryCode.Nigeria,\n    name: 'Nigeria',\n    native: 'Nigeria',\n  },\n  id: LocaleCode.YorubaNigeria,\n  language: {\n    code: LanguageCode.Yoruba,\n    name: 'Yoruba',\n    native: 'Yor\u00F9b\u00E1',\n  },\n  name: 'Yoruba (Nigeria)',\n  native_name: 'Yor\u00F9b\u00E1 (Nigeria)',\n  rtl: false,\n};\n\n// export const ZhuyinMandarin: Locale = {\n//   id: LocaleCode.ZhuyinMandarin,\n//   language: {\n//     code: LanguageCode.Mandarin,\n//     name: 'Mandarin',\n//     native: '\u666E\u901A\u8BDD',\n//   },\n//   name: 'Zhuyin (Mandarin)',\n//   native_name: '\u666E\u901A\u8BDD (\u666E\u901A\u8BDD)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinChina: Locale = {\n//   country: {\n//     code: CountryCode.China,\n//     name: 'China',\n//     native: '\u4E2D\u56FD',\n//   },\n//   id: LocaleCode.ZhuyinMandarinChina,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, China)',\n//   native_name: 'Zhuyin (Mandarin, China)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinTaiwan: Locale = {\n//   country: {\n//     code: CountryCode.Taiwan,\n//     name: 'Taiwan',\n//     native: '\u81FA\u7063',\n//   },\n//   id: LocaleCode.ZhuyinMandarinTaiwan,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Taiwan)',\n//   native_name: 'Zhuyin (Mandarin, Taiwan)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinHongKong: Locale = {\n//   country: {\n//     code: CountryCode.HongKong,\n//     name: 'Hong Kong',\n//     native: '\u9999\u6E2F',\n//   },\n//   id: LocaleCode.ZhuyinMandarinHongKong,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Hong Kong)',\n//   native_name: 'Zhuyin (Mandarin, Hong Kong)',\n//   rtl: false,\n// };\n\n// export const ZhuyinMandarinMacau: Locale = {\n//   country: {\n//     code: CountryCode.Macau,\n//     name: 'Macau',\n//     native: '\u6FB3\u9580',\n//   },\n//   id: LocaleCode.ZhuyinMandarinMacau,\n//   language: {\n//     code: LanguageCode.Zhuyin,\n//     name: 'Zhuyin',\n//     native: 'Zhuyin',\n//   },\n//   name: 'Zhuyin (Mandarin, Macau)',\n//   native_name: 'Zhuyin (Mandarin, Macau)',\n//   rtl: false,\n// };\n\nexport const Zulu: Locale = {\n  id: LocaleCode.Zulu,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu',\n  native_name: 'isiZulu',\n  rtl: false,\n};\n\nexport const ZuluSouthAfrica: Locale = {\n  country: {\n    code: CountryCode.SouthAfrica,\n    name: 'South Africa',\n    native: 'South Africa',\n  },\n  id: LocaleCode.ZuluSouthAfrica,\n  language: {\n    code: LanguageCode.Zulu,\n    name: 'Zulu',\n    native: 'isiZulu',\n  },\n  name: 'Zulu (South Africa)',\n  native_name: 'isiZulu (South Africa)',\n  rtl: false,\n};\n", "import { TimezoneRegions } from './region';\nimport { TimezoneRegion } from './region';\nimport { TimezoneOffset } from './timezone';\nimport { Timezones } from './timezones';\n\nexport const AfricaAbidjan: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAbidjan,\n  name: 'Africa/Abidjan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAccra: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAccra,\n  name: 'Africa/Accra',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaAddisAbaba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAddisAbaba,\n  name: 'Africa/Addis_Ababa',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaAlgiers: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAlgiers,\n  name: 'Africa/Algiers',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaAsmara: TimezoneRegion = {\n  id: TimezoneRegions.AfricaAsmara,\n  name: 'Africa/Asmara',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaBamako: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBamako,\n  name: 'Africa/Bamako',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBangui: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBangui,\n  name: 'Africa/Bangui',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBanjul: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBanjul,\n  name: 'Africa/Banjul',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBissau: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBissau,\n  name: 'Africa/Bissau',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaBlantyre: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBlantyre,\n  name: 'Africa/Blantyre',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaBrazzaville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBrazzaville,\n  name: 'Africa/Brazzaville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaBujumbura: TimezoneRegion = {\n  id: TimezoneRegions.AfricaBujumbura,\n  name: 'Africa/Bujumbura',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaCairo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCairo,\n  name: 'Africa/Cairo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AfricaCasablanca: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCasablanca,\n  name: 'Africa/Casablanca',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AfricaCeuta: TimezoneRegion = {\n  id: TimezoneRegions.AfricaCeuta,\n  name: 'Africa/Ceuta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AfricaConakry: TimezoneRegion = {\n  id: TimezoneRegions.AfricaConakry,\n  name: 'Africa/Conakry',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDakar: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDakar,\n  name: 'Africa/Dakar',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaDarEsSalaam: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDarEsSalaam,\n  name: 'Africa/Dar_es_Salaam',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDjibouti: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDjibouti,\n  name: 'Africa/Djibouti',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaDouala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaDouala,\n  name: 'Africa/Douala',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaElAaiun: TimezoneRegion = {\n  id: TimezoneRegions.AfricaElAaiun,\n  name: 'Africa/El_Aaiun',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaFreetown: TimezoneRegion = {\n  id: TimezoneRegions.AfricaFreetown,\n  name: 'Africa/Freetown',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaGaborone: TimezoneRegion = {\n  id: TimezoneRegions.AfricaGaborone,\n  name: 'Africa/Gaborone',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaHarare: TimezoneRegion = {\n  id: TimezoneRegions.AfricaHarare,\n  name: 'Africa/Harare',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaJohannesburg: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJohannesburg,\n  name: 'Africa/Johannesburg',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaJuba: TimezoneRegion = {\n  id: TimezoneRegions.AfricaJuba,\n  name: 'Africa/Juba',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKampala: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKampala,\n  name: 'Africa/Kampala',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKhartoum: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKhartoum,\n  name: 'Africa/Khartoum',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaKigali: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKigali,\n  name: 'Africa/Kigali',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaKinshasa: TimezoneRegion = {\n  id: TimezoneRegions.AfricaKinshasa,\n  name: 'Africa/Kinshasa',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLagos: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLagos,\n  name: 'Africa/Lagos',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLibreville: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLibreville,\n  name: 'Africa/Libreville',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLome,\n  name: 'Africa/Lome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaLuanda: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLuanda,\n  name: 'Africa/Luanda',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaLubumbashi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLubumbashi,\n  name: 'Africa/Lubumbashi',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaLusaka: TimezoneRegion = {\n  id: TimezoneRegions.AfricaLusaka,\n  name: 'Africa/Lusaka',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMalabo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMalabo,\n  name: 'Africa/Malabo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaMaputo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaputo,\n  name: 'Africa/Maputo',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.CentralAfricaTime,\n};\n\nexport const AfricaMaseru: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMaseru,\n  name: 'Africa/Maseru',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMbabane: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMbabane,\n  name: 'Africa/Mbabane',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.SouthAfricanStandardTime,\n};\n\nexport const AfricaMogadishu: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMogadishu,\n  name: 'Africa/Mogadishu',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaMonrovia: TimezoneRegion = {\n  id: TimezoneRegions.AfricaMonrovia,\n  name: 'Africa/Monrovia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaNairobi: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNairobi,\n  name: 'Africa/Nairobi',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const AfricaNdjamena: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNdjamena,\n  name: 'Africa/Ndjamena',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNiamey: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNiamey,\n  name: 'Africa/Niamey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaNouakchott: TimezoneRegion = {\n  id: TimezoneRegions.AfricaNouakchott,\n  name: 'Africa/Nouakchott',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AfricaOuagadougou: TimezoneRegion = {\n  id: TimezoneRegions.AfricaOuagadougou,\n  name: 'Africa/Ouagadougou',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaPortoNovo: TimezoneRegion = {\n  id: TimezoneRegions.AfricaPortoNovo,\n  name: 'Africa/Porto-Novo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AfricaSaoTome: TimezoneRegion = {\n  id: TimezoneRegions.AfricaSaoTome,\n  name: 'Africa/SaoTome',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTripoli: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTripoli,\n  name: 'Africa/Tripoli',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaTunis: TimezoneRegion = {\n  id: TimezoneRegions.AfricaTunis,\n  name: 'Africa/Tunis',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AfricaWindhoek: TimezoneRegion = {\n  id: TimezoneRegions.AfricaWindhoek,\n  name: 'Africa/Windhoek',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.WestAfricaTime,\n};\n\nexport const AmericaAdak: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAdak,\n  name: 'America/Adak',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaAnchorage: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnchorage,\n  name: 'America/Anchorage',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaAnguilla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAnguilla,\n  name: 'America/Anguilla',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAntigua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAntigua,\n  name: 'America/Antigua',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAraguaina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAraguaina,\n  name: 'America/Araguaina',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaArgentinaBuenosAires: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaBuenosAires,\n  name: 'America/Argentina/Buenos_Aires',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCatamarca: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCatamarca,\n  name: 'America/Argentina/Catamarca',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaCordoba,\n  name: 'America/Argentina/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaJujuy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaJujuy,\n  name: 'America/Argentina/Jujuy',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaLaRioja: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaLaRioja,\n  name: 'America/Argentina/La_Rioja',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaMendoza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaMendoza,\n  name: 'America/Argentina/Mendoza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaRioGallegos: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaRioGallegos,\n  name: 'America/Argentina/Rio_Gallegos',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSalta: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSalta,\n  name: 'America/Argentina/Salta',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanJuan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanJuan,\n  name: 'America/Argentina/San_Juan',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaSanLuis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaSanLuis,\n  name: 'America/Argentina/San_Luis',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaTucuman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaTucuman,\n  name: 'America/Argentina/Tucuman',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaArgentinaUshuaia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaArgentinaUshuaia,\n  name: 'America/Argentina/Ushuaia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaAruba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAruba,\n  name: 'America/Aruba',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaAsuncion: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAsuncion,\n  name: 'America/Asuncion',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ParaguayTime,\n};\n\nexport const AmericaAtikokan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtikokan,\n  name: 'America/Atikokan',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaAtka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaAtka,\n  name: 'America/Atka',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const AmericaBahia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahia,\n  name: 'America/Bahia',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBahiaBanderas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBahiaBanderas,\n  name: 'America/Bahia_Banderas',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBarbados: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBarbados,\n  name: 'America/Barbados',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBelem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelem,\n  name: 'America/Belem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaBelize: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBelize,\n  name: 'America/Belize',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaBlancSablon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBlancSablon,\n  name: 'America/Blanc-Sablon',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaBoaVista: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoaVista,\n  name: 'America/Boa_Vista',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaBogota: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBogota,\n  name: 'America/Bogota',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.ColombiaTime,\n};\n\nexport const AmericaBoise: TimezoneRegion = {\n  id: TimezoneRegions.AmericaBoise,\n  name: 'America/Boise',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCambridgeBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCambridgeBay,\n  name: 'America/Cambridge_Bay',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCampoGrande: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCampoGrande,\n  name: 'America/Campo_Grande',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCancun: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCancun,\n  name: 'America/Cancun',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCaracas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCaracas,\n  name: 'America/Caracas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.VenezuelaStandardTime,\n};\n\nexport const AmericaCayenne: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayenne,\n  name: 'America/Cayenne',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.FrenchGuianaTime,\n};\n\nexport const AmericaCayman: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCayman,\n  name: 'America/Cayman',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaChicago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChicago,\n  name: 'America/Chicago',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaChihuahua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaChihuahua,\n  name: 'America/Chihuahua',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCoralHarbour: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCoralHarbour,\n  name: 'America/Coral_Harbour',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaCordoba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCordoba,\n  name: 'America/Cordoba',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ArgentinaTime,\n};\n\nexport const AmericaCostaRica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCostaRica,\n  name: 'America/Costa_Rica',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaCreston: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCreston,\n  name: 'America/Creston',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaCuiaba: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuiaba,\n  name: 'America/Cuiaba',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaCuracao: TimezoneRegion = {\n  id: TimezoneRegions.AmericaCuracao,\n  name: 'America/Curacao',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaDanmarkshavn: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDanmarkshavn,\n  name: 'America/Danmarkshavn',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AmericaDawson: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawson,\n  name: 'America/Dawson',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDawsonCreek: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDawsonCreek,\n  name: 'America/Dawson_Creek',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaDenver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDenver,\n  name: 'America/Denver',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaDetroit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDetroit,\n  name: 'America/Detroit',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaDominica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaDominica,\n  name: 'America/Dominica',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaEdmonton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEdmonton,\n  name: 'America/Edmonton',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaEirunepe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaEirunepe,\n  name: 'America/Eirunepe',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaElSalvador: TimezoneRegion = {\n  id: TimezoneRegions.AmericaElSalvador,\n  name: 'America/El_Salvador',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaFortaleza: TimezoneRegion = {\n  id: TimezoneRegions.AmericaFortaleza,\n  name: 'America/Fortaleza',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaGlaceBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGlaceBay,\n  name: 'America/Glace_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGodthab: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGodthab,\n  name: 'America/Godthab',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.WestGreenlandTime,\n};\n\nexport const AmericaGooseBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGooseBay,\n  name: 'America/Goose_Bay',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrandTurk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrandTurk,\n  name: 'America/Grand_Turk',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGrenada: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGrenada,\n  name: 'America/Grenada',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuadeloupe: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuadeloupe,\n  name: 'America/Guadeloupe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaGuatemala: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuatemala,\n  name: 'America/Guatemala',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaGuayaquil: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuayaquil,\n  name: 'America/Guayaquil',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EcuadorTime,\n};\n\nexport const AmericaGuyana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaGuyana,\n  name: 'America/Guyana',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHalifax: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHalifax,\n  name: 'America/Halifax',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaHavana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHavana,\n  name: 'America/Havana',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CubaStandardTime,\n};\n\nexport const AmericaHermosillo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaHermosillo,\n  name: 'America/Hermosillo',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIndianaIndianapolis: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaIndianapolis,\n  name: 'America/Indiana/Indianapolis',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaKnox: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaKnox,\n  name: 'America/Indiana/Knox',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaMarengo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaMarengo,\n  name: 'America/Indiana/Marengo',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaPetersburg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaPetersburg,\n  name: 'America/Indiana/Petersburg',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaTellCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaTellCity,\n  name: 'America/Indiana/Tell_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaIndianaVevay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVevay,\n  name: 'America/Indiana/Vevay',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaVincennes: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaVincennes,\n  name: 'America/Indiana/Vincennes',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaIndianaWinamac: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIndianaWinamac,\n  name: 'America/Indiana/Winamac',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaInuvik: TimezoneRegion = {\n  id: TimezoneRegions.AmericaInuvik,\n  name: 'America/Inuvik',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaIqaluit: TimezoneRegion = {\n  id: TimezoneRegions.AmericaIqaluit,\n  name: 'America/Iqaluit',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaJamaica: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJamaica,\n  name: 'America/Jamaica',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaJuneau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaJuneau,\n  name: 'America/Juneau',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaKentuckyLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyLouisville,\n  name: 'America/Kentucky/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKentuckyMonticello: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKentuckyMonticello,\n  name: 'America/Kentucky/Monticello',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaKralendijk: TimezoneRegion = {\n  id: TimezoneRegions.AmericaKralendijk,\n  name: 'America/Kralendijk',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaLaPaz: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLaPaz,\n  name: 'America/La_Paz',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.BoliviaTime,\n};\n\nexport const AmericaLima: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLima,\n  name: 'America/Lima',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.PeruTime,\n};\n\nexport const AmericaLosAngeles: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLosAngeles,\n  name: 'America/Los_Angeles',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaLouisville: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLouisville,\n  name: 'America/Louisville',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaLowerPrinces: TimezoneRegion = {\n  id: TimezoneRegions.AmericaLowerPrinces,\n  name: 'America/Lower_Princes',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMaceio: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMaceio,\n  name: 'America/Maceio',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaManagua: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManagua,\n  name: 'America/Managua',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaManaus: TimezoneRegion = {\n  id: TimezoneRegions.AmericaManaus,\n  name: 'America/Manaus',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaMarigot: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMarigot,\n  name: 'America/Marigot',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMartinique: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMartinique,\n  name: 'America/Martinique',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMatamoros: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMatamoros,\n  name: 'America/Matamoros',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMazatlan: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMazatlan,\n  name: 'America/Mazatlan',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaMenominee: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMenominee,\n  name: 'America/Menominee',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMerida: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMerida,\n  name: 'America/Merida',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMetlakatla: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMetlakatla,\n  name: 'America/Metlakatla',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaMexicoCity: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMexicoCity,\n  name: 'America/Mexico_City',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMiquelon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMiquelon,\n  name: 'America/Miquelon',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SaintPierreAndMiquelonStandardTime,\n};\n\nexport const AmericaMoncton: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMoncton,\n  name: 'America/Moncton',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaMonterrey: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMonterrey,\n  name: 'America/Monterrey',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaMontevideo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontevideo,\n  name: 'America/Montevideo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.UruguayStandardTime,\n};\n\nexport const AmericaMontreal: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontreal,\n  name: 'America/Montreal',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaMontserrat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaMontserrat,\n  name: 'America/Montserrat',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaNassau: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNassau,\n  name: 'America/Nassau',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNewYork: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNewYork,\n  name: 'America/New_York',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNipigon: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNipigon,\n  name: 'America/Nipigon',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaNome: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNome,\n  name: 'America/Nome',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaNoronha: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNoronha,\n  name: 'America/Noronha',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.FernandoDeNoronhaTime,\n};\n\nexport const AmericaNorthDakotaBeulah: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaBeulah,\n  name: 'America/North_Dakota/Beulah',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaCenter: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaCenter,\n  name: 'America/North_Dakota/Center',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaNorthDakotaNewSalem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaNorthDakotaNewSalem,\n  name: 'America/North_Dakota/New_Salem',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaOjinaga: TimezoneRegion = {\n  id: TimezoneRegions.AmericaOjinaga,\n  name: 'America/Ojinaga',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPanama: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPanama,\n  name: 'America/Panama',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPangnirtung: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPangnirtung,\n  name: 'America/Pangnirtung',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaParamaribo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaParamaribo,\n  name: 'America/Paramaribo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.SurinameTime,\n};\n\nexport const AmericaPhoenix: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPhoenix,\n  name: 'America/Phoenix',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaPortAuPrince: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortAuPrince,\n  name: 'America/Port-au-Prince',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaPortOfSpain: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortOfSpain,\n  name: 'America/Port_of_Spain',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaPortoVelho: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPortoVelho,\n  name: 'America/Porto_Velho',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AmazonTime,\n};\n\nexport const AmericaPuertoRico: TimezoneRegion = {\n  id: TimezoneRegions.AmericaPuertoRico,\n  name: 'America/Puerto_Rico',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaRainyRiver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRainyRiver,\n  name: 'America/Rainy_River',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRankinInlet: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRankinInlet,\n  name: 'America/Rankin_Inlet',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRecife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRecife,\n  name: 'America/Recife',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaRegina: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRegina,\n  name: 'America/Regina',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaResolute: TimezoneRegion = {\n  id: TimezoneRegions.AmericaResolute,\n  name: 'America/Resolute',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaRioBranco: TimezoneRegion = {\n  id: TimezoneRegions.AmericaRioBranco,\n  name: 'America/Rio_Branco',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.AcreTime,\n};\n\nexport const AmericaSantaIsabel: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantaIsabel,\n  name: 'America/Santa_Isabel',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaSantarem: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantarem,\n  name: 'America/Santarem',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaSantiago: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantiago,\n  name: 'America/Santiago',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChileStandardTime,\n};\n\nexport const AmericaSantoDomingo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSantoDomingo,\n  name: 'America/Santo_Domingo',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSaoPaulo: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSaoPaulo,\n  name: 'America/Sao_Paulo',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.BrasiliaTime,\n};\n\nexport const AmericaScoresbysund: TimezoneRegion = {\n  id: TimezoneRegions.AmericaScoresbysund,\n  name: 'America/Scoresbysund',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.EasternGreenlandTime,\n};\n\nexport const AmericaShiprock: TimezoneRegion = {\n  id: TimezoneRegions.AmericaShiprock,\n  name: 'America/Shiprock',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AmericaSitka: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSitka,\n  name: 'America/Sitka',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaStBarthelemy: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStBarthelemy,\n  name: 'America/St_Barthelemy',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStJohns: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStJohns,\n  name: 'America/St_Johns',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AmericaStKitts: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStKitts,\n  name: 'America/St_Kitts',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStLucia: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStLucia,\n  name: 'America/St_Lucia',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStThomas: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStThomas,\n  name: 'America/St_Thomas',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaStVincent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaStVincent,\n  name: 'America/St_Vincent',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaSwiftCurrent: TimezoneRegion = {\n  id: TimezoneRegions.AmericaSwiftCurrent,\n  name: 'America/Swift_Current',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaTegucigalpa: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTegucigalpa,\n  name: 'America/Tegucigalpa',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaThule: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThule,\n  name: 'America/Thule',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaThunderBay: TimezoneRegion = {\n  id: TimezoneRegions.AmericaThunderBay,\n  name: 'America/Thunder_Bay',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTijuana: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTijuana,\n  name: 'America/Tijuana',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaToronto: TimezoneRegion = {\n  id: TimezoneRegions.AmericaToronto,\n  name: 'America/Toronto',\n  offset: TimezoneOffset.UTC_MINUS_5,\n  timezone: Timezones.EasternStandardTime,\n};\n\nexport const AmericaTortola: TimezoneRegion = {\n  id: TimezoneRegions.AmericaTortola,\n  name: 'America/Tortola',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AmericaVancouver: TimezoneRegion = {\n  id: TimezoneRegions.AmericaVancouver,\n  name: 'America/Vancouver',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWhitehorse: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWhitehorse,\n  name: 'America/Whitehorse',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.PacificStandardTime,\n};\n\nexport const AmericaWinnipeg: TimezoneRegion = {\n  id: TimezoneRegions.AmericaWinnipeg,\n  name: 'America/Winnipeg',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AmericaYakutat: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYakutat,\n  name: 'America/Yakutat',\n  offset: TimezoneOffset.UTC_MINUS_9,\n  timezone: Timezones.AlaskaStandardTime,\n};\n\nexport const AmericaYellowknife: TimezoneRegion = {\n  id: TimezoneRegions.AmericaYellowknife,\n  name: 'America/Yellowknife',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.MountainStandardTime,\n};\n\nexport const AntarcticaCasey: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaCasey,\n  name: 'Antarctica/Casey',\n  offset: TimezoneOffset.UTC_MINUS_8,\n  timezone: Timezones.WesternStandardTime,\n};\n\nexport const AntarcticaDavis: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDavis,\n  name: 'Antarctica/Davis',\n  offset: TimezoneOffset.UTC_MINUS_7,\n  timezone: Timezones.NewfoundlandStandardTime,\n};\n\nexport const AntarcticaDumontDUrville: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaDumontDUrville,\n  name: 'Antarctica/DumontDUrville',\n  offset: TimezoneOffset.UTC_MINUS_10,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMacquarie: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMacquarie,\n  name: 'Antarctica/Macquarie',\n  offset: TimezoneOffset.UTC_MINUS_11,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMawson: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMawson,\n  name: 'Antarctica/Mawson',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaMcMurdo: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaMcMurdo,\n  name: 'Antarctica/McMurdo',\n  offset: TimezoneOffset.UTC_MINUS_12,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const AntarcticaPalmer: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaPalmer,\n  name: 'Antarctica/Palmer',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const AntarcticaRothera: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaRothera,\n  name: 'Antarctica/Rothera',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.RotheraResearchStationTime,\n};\n\nexport const AntarcticaSyowa: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaSyowa,\n  name: 'Antarctica/Syowa',\n  offset: TimezoneOffset.UTC_MINUS_3,\n  timezone: Timezones.ShowaStationTime,\n};\n\nexport const AntarcticaTroll: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaTroll,\n  name: 'Antarctica/Troll',\n  offset: TimezoneOffset.UTC_MINUS_2,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const AntarcticaVostok: TimezoneRegion = {\n  id: TimezoneRegions.AntarcticaVostok,\n  name: 'Antarctica/Vostok',\n  offset: TimezoneOffset.UTC_MINUS_6,\n  timezone: Timezones.CentralStandardTime,\n};\n\nexport const ArcticLongyearbyen: TimezoneRegion = {\n  id: TimezoneRegions.ArcticLongyearbyen,\n  name: 'Arctic/Longyearbyen',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const AsiaAden: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAden,\n  name: 'Asia/Aden',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaAlmaty: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAlmaty,\n  name: 'Asia/Almaty',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.AlmaAtaTime,\n};\n\nexport const AsiaAmman: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAmman,\n  name: 'Asia/Amman',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaAnadyr: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAnadyr,\n  name: 'Asia/Anadyr',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const AsiaAqtau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtau,\n  name: 'Asia/Aqtau',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAqtobe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAqtobe,\n  name: 'Asia/Aqtobe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.AqtobeTime,\n};\n\nexport const AsiaAshgabat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaAshgabat,\n  name: 'Asia/Ashgabat',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TurkmenistanTime,\n};\n\nexport const AsiaBaghdad: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaghdad,\n  name: 'Asia/Baghdad',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBahrain: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBahrain,\n  name: 'Asia/Bahrain',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaBaku: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBaku,\n  name: 'Asia/Baku',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AzerbaijanTime,\n};\n\nexport const AsiaBangkok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBangkok,\n  name: 'Asia/Bangkok',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaBarnaul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBarnaul,\n  name: 'Asia/Barnaul',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaBeirut: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBeirut,\n  name: 'Asia/Beirut',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaBishkek: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBishkek,\n  name: 'Asia/Bishkek',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KyrgyzstanTime,\n};\n\nexport const AsiaBrunei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaBrunei,\n  name: 'Asia/Brunei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.BruneiTime,\n};\n\nexport const AsiaChita: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChita,\n  name: 'Asia/Chita',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaChoibalsan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaChoibalsan,\n  name: 'Asia/Choibalsan',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChoibalsanStandardTime,\n};\n\nexport const AsiaColombo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaColombo,\n  name: 'Asia/Colombo',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaDamascus: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDamascus,\n  name: 'Asia/Damascus',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaDhaka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDhaka,\n  name: 'Asia/Dhaka',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BangladeshStandardTime,\n};\n\nexport const AsiaDili: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDili,\n  name: 'Asia/Dili',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaDubai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDubai,\n  name: 'Asia/Dubai',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaDushanbe: TimezoneRegion = {\n  id: TimezoneRegions.AsiaDushanbe,\n  name: 'Asia/Dushanbe',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.TajikistanTime,\n};\n\nexport const AsiaFamagusta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaFamagusta,\n  name: 'Asia/Famagusta',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaGaza: TimezoneRegion = {\n  id: TimezoneRegions.AsiaGaza,\n  name: 'Asia/Gaza',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHebron: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHebron,\n  name: 'Asia/Hebron',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaHoChiMinh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHoChiMinh,\n  name: 'Asia/Ho_Chi_Minh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaHongKong: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHongKong,\n  name: 'Asia/Hong_Kong',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.HongKongTime,\n};\n\nexport const AsiaHovd: TimezoneRegion = {\n  id: TimezoneRegions.AsiaHovd,\n  name: 'Asia/Hovd',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.HovdTime,\n};\n\nexport const AsiaIrkutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaIrkutsk,\n  name: 'Asia/Irkutsk',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.IrkutskTime,\n};\n\nexport const AsiaJakarta: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJakarta,\n  name: 'Asia/Jakarta',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaJayapura: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJayapura,\n  name: 'Asia/Jayapura',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaJerusalem: TimezoneRegion = {\n  id: TimezoneRegions.AsiaJerusalem,\n  name: 'Asia/Jerusalem',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const AsiaKabul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKabul,\n  name: 'Asia/Kabul',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.AfghanistanTime,\n};\n\nexport const AsiaKamchatka: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKamchatka,\n  name: 'Asia/Kamchatka',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.KamchatkaTime,\n};\n\nexport const AsiaKarachi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKarachi,\n  name: 'Asia/Karachi',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.PakistanStandardTime,\n};\n\nexport const AsiaKathmandu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKathmandu,\n  name: 'Asia/Kathmandu',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.NepalTime,\n};\n\nexport const AsiaKhandyga: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKhandyga,\n  name: 'Asia/Khandyga',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaKolkata: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKolkata,\n  name: 'Asia/Kolkata',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.IndianStandardTime,\n};\n\nexport const AsiaKrasnoyarsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKrasnoyarsk,\n  name: 'Asia/Krasnoyarsk',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.KrasnoyarskTime,\n};\nexport const AsiaKualaLumpur: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKualaLumpur,\n  name: 'Asia/Kuala_Lumpur',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuching: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuching,\n  name: 'Asia/Kuching',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaStandardTime,\n};\n\nexport const AsiaKuwait: TimezoneRegion = {\n  id: TimezoneRegions.AsiaKuwait,\n  name: 'Asia/Kuwait',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaMacau: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMacau,\n  name: 'Asia/Macau',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaMagadan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMagadan,\n  name: 'Asia/Magadan',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.MagadanTime,\n};\n\nexport const AsiaMakassar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMakassar,\n  name: 'Asia/Makassar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.MalaysiaTime,\n};\n\nexport const AsiaManila: TimezoneRegion = {\n  id: TimezoneRegions.AsiaManila,\n  name: 'Asia/Manila',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PhilippineTime,\n};\n\nexport const AsiaMuscat: TimezoneRegion = {\n  id: TimezoneRegions.AsiaMuscat,\n  name: 'Asia/Muscat',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GulfStandardTime,\n};\n\nexport const AsiaNovokuznetsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovokuznetsk,\n  name: 'Asia/Novokuznetsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaNovosibirsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaNovosibirsk,\n  name: 'Asia/Novosibirsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.NovosibirskTime,\n};\n\nexport const AsiaOmsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOmsk,\n  name: 'Asia/Omsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.OmskTime,\n};\n\nexport const AsiaOral: TimezoneRegion = {\n  id: TimezoneRegions.AsiaOral,\n  name: 'Asia/Oral',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.OralTime,\n};\n\nexport const AsiaPhnomPenh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPhnomPenh,\n  name: 'Asia/Phnom_Penh',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaPontianak: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPontianak,\n  name: 'Asia/Pontianak',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.WesternIndonesianTime,\n};\n\nexport const AsiaPyongyang: TimezoneRegion = {\n  id: TimezoneRegions.AsiaPyongyang,\n  name: 'Asia/Pyongyang',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaQatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQatar,\n  name: 'Asia/Qatar',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaQyzylorda: TimezoneRegion = {\n  id: TimezoneRegions.AsiaQyzylorda,\n  name: 'Asia/Qyzylorda',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.WestKazakhstanTime,\n};\n\nexport const AsiaRangoon: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRangoon,\n  name: 'Asia/Rangoon',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.MyanmarStandardTime,\n};\n\nexport const AsiaRiyadh: TimezoneRegion = {\n  id: TimezoneRegions.AsiaRiyadh,\n  name: 'Asia/Riyadh',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.ArabiaStandardTime,\n};\n\nexport const AsiaSakhalin: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSakhalin,\n  name: 'Asia/Sakhalin',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SakhalinIslandTime,\n};\n\nexport const AsiaSamarkand: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSamarkand,\n  name: 'Asia/Samarkand',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaSeoul: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSeoul,\n  name: 'Asia/Seoul',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.KoreaStandardTime,\n};\n\nexport const AsiaShanghai: TimezoneRegion = {\n  id: TimezoneRegions.AsiaShanghai,\n  name: 'Asia/Shanghai',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaSingapore: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSingapore,\n  name: 'Asia/Singapore',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.SingaporeStandardTime,\n};\n\nexport const AsiaSrednekolymsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaSrednekolymsk,\n  name: 'Asia/Srednekolymsk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SrednekolymskTime,\n};\n\nexport const AsiaTaipei: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTaipei,\n  name: 'Asia/Taipei',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaTashkent: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTashkent,\n  name: 'Asia/Tashkent',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.UzbekistanTime,\n};\n\nexport const AsiaTbilisi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTbilisi,\n  name: 'Asia/Tbilisi',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.GeorgiaStandardTime,\n};\n\nexport const AsiaTehran: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTehran,\n  name: 'Asia/Tehran',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.IranStandardTime,\n};\n\nexport const AsiaThimphu: TimezoneRegion = {\n  id: TimezoneRegions.AsiaThimphu,\n  name: 'Asia/Thimphu',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.BhutanTime,\n};\n\nexport const AsiaTokyo: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTokyo,\n  name: 'Asia/Tokyo',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.JapanStandardTime,\n};\n\nexport const AsiaTomsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaTomsk,\n  name: 'Asia/Tomsk',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.KrasnoyarskTime,\n};\n\nexport const AsiaUlaanbaatar: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUlaanbaatar,\n  name: 'Asia/Ulaanbaatar',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.UlaanbaatarStandardTime,\n};\n\nexport const AsiaUrumqi: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUrumqi,\n  name: 'Asia/Urumqi',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.ChinaStandardTime,\n};\n\nexport const AsiaUstNera: TimezoneRegion = {\n  id: TimezoneRegions.AsiaUstNera,\n  name: 'Asia/Ust-Nera',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaVientiane: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVientiane,\n  name: 'Asia/Vientiane',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.IndochinaTime,\n};\n\nexport const AsiaVladivostok: TimezoneRegion = {\n  id: TimezoneRegions.AsiaVladivostok,\n  name: 'Asia/Vladivostok',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.VladivostokTime,\n};\n\nexport const AsiaYakutsk: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYakutsk,\n  name: 'Asia/Yakutsk',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.YakutskTime,\n};\n\nexport const AsiaYekaterinburg: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYekaterinburg,\n  name: 'Asia/Yekaterinburg',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.YekaterinburgTime,\n};\n\nexport const AsiaYerevan: TimezoneRegion = {\n  id: TimezoneRegions.AsiaYerevan,\n  name: 'Asia/Yerevan',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ArmeniaTime,\n};\n\nexport const AtlanticAzores: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticAzores,\n  name: 'Atlantic/Azores',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.AzoresStandardTime,\n};\n\nexport const AtlanticBermuda: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticBermuda,\n  name: 'Atlantic/Bermuda',\n  offset: TimezoneOffset.UTC_MINUS_4,\n  timezone: Timezones.AtlanticStandardTime,\n};\n\nexport const AtlanticCanary: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCanary,\n  name: 'Atlantic/Canary',\n  offset: TimezoneOffset.UTC_MINUS_1,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticCapeVerde: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticCapeVerde,\n  name: 'Atlantic/Cape_Verde',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CapeVerdeTime,\n};\n\nexport const AtlanticFaroe: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticFaroe,\n  name: 'Atlantic/Faroe',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticMadeira: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticMadeira,\n  name: 'Atlantic/Madeira',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.WesternEuropeanTime,\n};\n\nexport const AtlanticReykjavik: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticReykjavik,\n  name: 'Atlantic/Reykjavik',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticSouthGeorgia: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticSouthGeorgia,\n  name: 'Atlantic/South_Georgia',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.CoordinatedUniversalTime,\n};\n\nexport const AtlanticStHelena: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStHelena,\n  name: 'Atlantic/St_Helena',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const AtlanticStanley: TimezoneRegion = {\n  id: TimezoneRegions.AtlanticStanley,\n  name: 'Atlantic/Stanley',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.FalklandIslandsTime,\n};\n\nexport const AustraliaAdelaide: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaAdelaide,\n  name: 'Australia/Adelaide',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaBrisbane: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrisbane,\n  name: 'Australia/Brisbane',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaBrokenHill: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaBrokenHill,\n  name: 'Australia/Broken_Hill',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaCanberra: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCanberra,\n  name: 'Australia/Canberra',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaCurrie: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaCurrie,\n  name: 'Australia/Currie',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaDarwin: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaDarwin,\n  name: 'Australia/Darwin',\n  offset: TimezoneOffset.UTC_PLUS_9_30,\n  timezone: Timezones.AustralianCentralStandardTime,\n};\n\nexport const AustraliaEucla: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaEucla,\n  name: 'Australia/Eucla',\n  offset: TimezoneOffset.UTC_PLUS_8_45,\n  timezone: Timezones.AustralianCentralWesternStandardTime,\n};\n\nexport const AustraliaHobart: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaHobart,\n  name: 'Australia/Hobart',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLindeman: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLindeman,\n  name: 'Australia/Lindeman',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaLordHowe: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaLordHowe,\n  name: 'Australia/Lord_Howe',\n  offset: TimezoneOffset.UTC_PLUS_10_30,\n  timezone: Timezones.LordHoweStandardTime,\n};\n\nexport const AustraliaMelbourne: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaMelbourne,\n  name: 'Australia/Melbourne',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const AustraliaPerth: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaPerth,\n  name: 'Australia/Perth',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.AustralianWesternStandardTime,\n};\n\nexport const AustraliaSydney: TimezoneRegion = {\n  id: TimezoneRegions.AustraliaSydney,\n  name: 'Australia/Sydney',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.AustralianEasternStandardTime,\n};\n\nexport const EuropeAmsterdam: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAmsterdam,\n  name: 'Europe/Amsterdam',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAndorra: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAndorra,\n  name: 'Europe/Andorra',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeAthens: TimezoneRegion = {\n  id: TimezoneRegions.EuropeAthens,\n  name: 'Europe/Athens',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBelgrade: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBelgrade,\n  name: 'Europe/Belgrade',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBerlin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBerlin,\n  name: 'Europe/Berlin',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBratislava: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBratislava,\n  name: 'Europe/Bratislava',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBrussels: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBrussels,\n  name: 'Europe/Brussels',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBucharest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBucharest,\n  name: 'Europe/Bucharest',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeBudapest: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBudapest,\n  name: 'Europe/Budapest',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeBusingen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeBusingen,\n  name: 'Europe/Busingen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeChisinau: TimezoneRegion = {\n  id: TimezoneRegions.EuropeChisinau,\n  name: 'Europe/Chisinau',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeCopenhagen: TimezoneRegion = {\n  id: TimezoneRegions.EuropeCopenhagen,\n  name: 'Europe/Copenhagen',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeDublin: TimezoneRegion = {\n  id: TimezoneRegions.EuropeDublin,\n  name: 'Europe/Dublin',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeGibraltar: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGibraltar,\n  name: 'Europe/Gibraltar',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeGuernsey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeGuernsey,\n  name: 'Europe/Guernsey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeHelsinki: TimezoneRegion = {\n  id: TimezoneRegions.EuropeHelsinki,\n  name: 'Europe/Helsinki',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeIsleOfMan: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIsleOfMan,\n  name: 'Europe/Isle_of_Man',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeIstanbul: TimezoneRegion = {\n  id: TimezoneRegions.EuropeIstanbul,\n  name: 'Europe/Istanbul',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeJersey: TimezoneRegion = {\n  id: TimezoneRegions.EuropeJersey,\n  name: 'Europe/Jersey',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeKaliningrad: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKaliningrad,\n  name: 'Europe/Kaliningrad',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeKiev: TimezoneRegion = {\n  id: TimezoneRegions.EuropeKiev,\n  name: 'Europe/Kiev',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeLisbon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLisbon,\n  name: 'Europe/Lisbon',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLjubljana: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLjubljana,\n  name: 'Europe/Ljubljana',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeLondon: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLondon,\n  name: 'Europe/London',\n  offset: TimezoneOffset.UTC_0,\n  timezone: Timezones.GreenwichMeanTime,\n};\n\nexport const EuropeLuxembourg: TimezoneRegion = {\n  id: TimezoneRegions.EuropeLuxembourg,\n  name: 'Europe/Luxembourg',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMadrid: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMadrid,\n  name: 'Europe/Madrid',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMalta: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMalta,\n  name: 'Europe/Malta',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMariehamn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMariehamn,\n  name: 'Europe/Mariehamn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMinsk: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMinsk,\n  name: 'Europe/Minsk',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeMonaco: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMonaco,\n  name: 'Europe/Monaco',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeMoscow: TimezoneRegion = {\n  id: TimezoneRegions.EuropeMoscow,\n  name: 'Europe/Moscow',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeOslo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeOslo,\n  name: 'Europe/Oslo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeParis: TimezoneRegion = {\n  id: TimezoneRegions.EuropeParis,\n  name: 'Europe/Paris',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePodgorica: TimezoneRegion = {\n  id: TimezoneRegions.EuropePodgorica,\n  name: 'Europe/Podgorica',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropePrague: TimezoneRegion = {\n  id: TimezoneRegions.EuropePrague,\n  name: 'Europe/Prague',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeRiga: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRiga,\n  name: 'Europe/Riga',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeRome: TimezoneRegion = {\n  id: TimezoneRegions.EuropeRome,\n  name: 'Europe/Rome',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSamara: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSamara,\n  name: 'Europe/Samara',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSanMarino: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSanMarino,\n  name: 'Europe/San_Marino',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSarajevo: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSarajevo,\n  name: 'Europe/Sarajevo',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSimferopol: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSimferopol,\n  name: 'Europe/Simferopol',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeSkopje: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSkopje,\n  name: 'Europe/Skopje',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeSofia: TimezoneRegion = {\n  id: TimezoneRegions.EuropeSofia,\n  name: 'Europe/Sofia',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeStockholm: TimezoneRegion = {\n  id: TimezoneRegions.EuropeStockholm,\n  name: 'Europe/Stockholm',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeTallinn: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTallinn,\n  name: 'Europe/Tallinn',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeTirane: TimezoneRegion = {\n  id: TimezoneRegions.EuropeTirane,\n  name: 'Europe/Tirane',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeUzhgorod: TimezoneRegion = {\n  id: TimezoneRegions.EuropeUzhgorod,\n  name: 'Europe/Uzhgorod',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVaduz: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVaduz,\n  name: 'Europe/Vaduz',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVatican: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVatican,\n  name: 'Europe/Vatican',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVienna: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVienna,\n  name: 'Europe/Vienna',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeVilnius: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVilnius,\n  name: 'Europe/Vilnius',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeVolgograd: TimezoneRegion = {\n  id: TimezoneRegions.EuropeVolgograd,\n  name: 'Europe/Volgograd',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeWarsaw: TimezoneRegion = {\n  id: TimezoneRegions.EuropeWarsaw,\n  name: 'Europe/Warsaw',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZagreb: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZagreb,\n  name: 'Europe/Zagreb',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const EuropeZaporozhye: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZaporozhye,\n  name: 'Europe/Zaporozhye',\n  offset: TimezoneOffset.UTC_PLUS_2,\n  timezone: Timezones.EasternEuropeanTime,\n};\n\nexport const EuropeZurich: TimezoneRegion = {\n  id: TimezoneRegions.EuropeZurich,\n  name: 'Europe/Zurich',\n  offset: TimezoneOffset.UTC_PLUS_1,\n  timezone: Timezones.CentralEuropeanTime,\n};\n\nexport const IndianAntananarivo: TimezoneRegion = {\n  id: TimezoneRegions.IndianAntananarivo,\n  name: 'Indian/Antananarivo',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianChagos: TimezoneRegion = {\n  id: TimezoneRegions.IndianChagos,\n  name: 'Indian/Chagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.IndianOceanTime,\n};\n\nexport const IndianChristmas: TimezoneRegion = {\n  id: TimezoneRegions.IndianChristmas,\n  name: 'Indian/Christmas',\n  offset: TimezoneOffset.UTC_PLUS_7,\n  timezone: Timezones.ChristmasIslandTime,\n};\n\nexport const IndianCocos: TimezoneRegion = {\n  id: TimezoneRegions.IndianCocos,\n  name: 'Indian/Cocos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.CocosIslandsTime,\n};\n\nexport const IndianComoro: TimezoneRegion = {\n  id: TimezoneRegions.IndianComoro,\n  name: 'Indian/Comoro',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianKerguelen: TimezoneRegion = {\n  id: TimezoneRegions.IndianKerguelen,\n  name: 'Indian/Kerguelen',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.FrenchSouthernAndAntarcticTime,\n};\n\nexport const IndianMahe: TimezoneRegion = {\n  id: TimezoneRegions.IndianMahe,\n  name: 'Indian/Mahe',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.SeychellesTime,\n};\n\nexport const IndianMaldives: TimezoneRegion = {\n  id: TimezoneRegions.IndianMaldives,\n  name: 'Indian/Maldives',\n  offset: TimezoneOffset.UTC_PLUS_5,\n  timezone: Timezones.MaldivesTime,\n};\n\nexport const IndianMauritius: TimezoneRegion = {\n  id: TimezoneRegions.IndianMauritius,\n  name: 'Indian/Mauritius',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.MauritiusTime,\n};\n\nexport const IndianMayotte: TimezoneRegion = {\n  id: TimezoneRegions.IndianMayotte,\n  name: 'Indian/Mayotte',\n  offset: TimezoneOffset.UTC_PLUS_3,\n  timezone: Timezones.EastAfricaTime,\n};\n\nexport const IndianReunion: TimezoneRegion = {\n  id: TimezoneRegions.IndianReunion,\n  name: 'Indian/Reunion',\n  offset: TimezoneOffset.UTC_PLUS_4,\n  timezone: Timezones.ReunionTime,\n};\n\nexport const PacificApia: TimezoneRegion = {\n  id: TimezoneRegions.PacificApia,\n  name: 'Pacific/Apia',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificAuckland: TimezoneRegion = {\n  id: TimezoneRegions.PacificAuckland,\n  name: 'Pacific/Auckland',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.NewZealandStandardTime,\n};\n\nexport const PacificChatham: TimezoneRegion = {\n  id: TimezoneRegions.PacificChatham,\n  name: 'Pacific/Chatham',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.ChathamStandardTime,\n};\n\nexport const PacificEaster: TimezoneRegion = {\n  id: TimezoneRegions.PacificEaster,\n  name: 'Pacific/Easter',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.EasterIslandStandardTime,\n};\n\nexport const PacificEfate: TimezoneRegion = {\n  id: TimezoneRegions.PacificEfate,\n  name: 'Pacific/Efate',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.VanuatuTime,\n};\n\nexport const PacificEnderbury: TimezoneRegion = {\n  id: TimezoneRegions.PacificEnderbury,\n  name: 'Pacific/Enderbury',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFakaofo: TimezoneRegion = {\n  id: TimezoneRegions.PacificFakaofo,\n  name: 'Pacific/Fakaofo',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificFiji: TimezoneRegion = {\n  id: TimezoneRegions.PacificFiji,\n  name: 'Pacific/Fiji',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.FijiTime,\n};\n\nexport const PacificFunafuti: TimezoneRegion = {\n  id: TimezoneRegions.PacificFunafuti,\n  name: 'Pacific/Funafuti',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.TuvaluTime,\n};\n\nexport const PacificGalapagos: TimezoneRegion = {\n  id: TimezoneRegions.PacificGalapagos,\n  name: 'Pacific/Galapagos',\n  offset: TimezoneOffset.UTC_PLUS_6,\n  timezone: Timezones.GalapagosTime,\n};\n\nexport const PacificGambier: TimezoneRegion = {\n  id: TimezoneRegions.PacificGambier,\n  name: 'Pacific/Gambier',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.GambierIslandTime,\n};\n\nexport const PacificGuadalcanal: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuadalcanal,\n  name: 'Pacific/Guadalcanal',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SolomonIslandsTime,\n};\n\nexport const PacificGuam: TimezoneRegion = {\n  id: TimezoneRegions.PacificGuam,\n  name: 'Pacific/Guam',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificHonolulu: TimezoneRegion = {\n  id: TimezoneRegions.PacificHonolulu,\n  name: 'Pacific/Honolulu',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificJohnston: TimezoneRegion = {\n  id: TimezoneRegions.PacificJohnston,\n  name: 'Pacific/Johnston',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.HawaiiAleutianStandardTime,\n};\n\nexport const PacificKiritimati: TimezoneRegion = {\n  id: TimezoneRegions.PacificKiritimati,\n  name: 'Pacific/Kiritimati',\n  offset: TimezoneOffset.UTC_PLUS_14,\n  timezone: Timezones.LineIslandsTime,\n};\n\nexport const PacificKosrae: TimezoneRegion = {\n  id: TimezoneRegions.PacificKosrae,\n  name: 'Pacific/Kosrae',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.KosraeTime,\n};\n\nexport const PacificKwajalein: TimezoneRegion = {\n  id: TimezoneRegions.PacificKwajalein,\n  name: 'Pacific/Kwajalein',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMajuro: TimezoneRegion = {\n  id: TimezoneRegions.PacificMajuro,\n  name: 'Pacific/Majuro',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.MarshallIslandsTime,\n};\n\nexport const PacificMarquesas: TimezoneRegion = {\n  id: TimezoneRegions.PacificMarquesas,\n  name: 'Pacific/Marquesas',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.MarquesasIslandsTime,\n};\n\nexport const PacificMidway: TimezoneRegion = {\n  id: TimezoneRegions.PacificMidway,\n  name: 'Pacific/Midway',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificNauru: TimezoneRegion = {\n  id: TimezoneRegions.PacificNauru,\n  name: 'Pacific/Nauru',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.NauruTime,\n};\n\nexport const PacificNiue: TimezoneRegion = {\n  id: TimezoneRegions.PacificNiue,\n  name: 'Pacific/Niue',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NiueTime,\n};\n\nexport const PacificNorfolk: TimezoneRegion = {\n  id: TimezoneRegions.PacificNorfolk,\n  name: 'Pacific/Norfolk',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NorfolkIslandTime,\n};\n\nexport const PacificNoumea: TimezoneRegion = {\n  id: TimezoneRegions.PacificNoumea,\n  name: 'Pacific/Noumea',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.NewCaledoniaTime,\n};\n\nexport const PacificPagoPago: TimezoneRegion = {\n  id: TimezoneRegions.PacificPagoPago,\n  name: 'Pacific/Pago_Pago',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.SamoaStandardTime,\n};\n\nexport const PacificPalau: TimezoneRegion = {\n  id: TimezoneRegions.PacificPalau,\n  name: 'Pacific/Palau',\n  offset: TimezoneOffset.UTC_PLUS_9,\n  timezone: Timezones.PalauTime,\n};\n\nexport const PacificPitcairn: TimezoneRegion = {\n  id: TimezoneRegions.PacificPitcairn,\n  name: 'Pacific/Pitcairn',\n  offset: TimezoneOffset.UTC_PLUS_8,\n  timezone: Timezones.PitcairnTime,\n};\n\nexport const PacificPonape: TimezoneRegion = {\n  id: TimezoneRegions.PacificPonape,\n  name: 'Pacific/Ponape',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificPortMoresby: TimezoneRegion = {\n  id: TimezoneRegions.PacificPortMoresby,\n  name: 'Pacific/Port_Moresby',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.PapuaNewGuineaTime,\n};\n\nexport const PacificRarotonga: TimezoneRegion = {\n  id: TimezoneRegions.PacificRarotonga,\n  name: 'Pacific/Rarotonga',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.CookIslandTime,\n};\n\nexport const PacificSaipan: TimezoneRegion = {\n  id: TimezoneRegions.PacificSaipan,\n  name: 'Pacific/Saipan',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChamorroStandardTime,\n};\n\nexport const PacificTahiti: TimezoneRegion = {\n  id: TimezoneRegions.PacificTahiti,\n  name: 'Pacific/Tahiti',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.TahitiTime,\n};\n\nexport const PacificTarawa: TimezoneRegion = {\n  id: TimezoneRegions.PacificTarawa,\n  name: 'Pacific/Tarawa',\n  offset: TimezoneOffset.UTC_PLUS_12,\n  timezone: Timezones.GilbertIslandTime,\n};\n\nexport const PacificTongatapu: TimezoneRegion = {\n  id: TimezoneRegions.PacificTongatapu,\n  name: 'Pacific/Tongatapu',\n  offset: TimezoneOffset.UTC_PLUS_13,\n  timezone: Timezones.TongaTime,\n};\n\nexport const PacificChuuk: TimezoneRegion = {\n  id: TimezoneRegions.PacificChuuk,\n  name: 'Pacific/Chuuk',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n\nexport const PacificPohnpei: TimezoneRegion = {\n  id: TimezoneRegions.PacificPohnpei,\n  name: 'Pacific/Pohnpei',\n  offset: TimezoneOffset.UTC_PLUS_11,\n  timezone: Timezones.PohnpeiStandardTime,\n};\n\nexport const PacificYap: TimezoneRegion = {\n  id: TimezoneRegions.PacificYap,\n  name: 'Pacific/Yap',\n  offset: TimezoneOffset.UTC_PLUS_10,\n  timezone: Timezones.ChuukTime,\n};\n", "export enum License {\n  Apache2 = 'Apache-2.0',\n  BeerWare = 'beerware',\n  BSD2 = 'BSD-2-clause',\n  BSD3 = 'BSD-3-Clause',\n  ISC = 'ISC',\n  MIT = 'MIT',\n  Unlicensed = 'unlicensed',\n}\n", "/*\n  This is a decent start, but I should make the log level TSDoc's more clear\n  of the intention and expected result from using each level.\n*/\nexport enum LogLevel {\n  /**\n   * Analytics (Business/Web) related events.\n   */\n  Analytics = 'analytics',\n  /**\n   * Exception that needs urgent review by engineers.\n   */\n  Critical = 'critical',\n  /**\n   * Logging used by developers to temporarily debug an issue.\n   */\n  Debug = 'debug',\n  /**\n   * A runtime error that does not require immediate attention.\n   */\n  Error = 'error',\n  /**\n   * An HTTP request/response event. Default is 'info' level.\n   */\n  Http = 'http',\n  /**\n   * Used for logging general information regarding application processes.\n   */\n  Info = 'info',\n  /**\n   * Used to warn about possible issues.\n   */\n  Warning = 'warning',\n}\n", "export type HttpRequestHost = string;\nexport type HttpRequestResource = string;\nexport type HttpRequestBody = Record<string, unknown> | string | unknown | null;\n\nexport enum HttpRequestMethod {\n  Delete = 'delete',\n  Get = 'get',\n  Head = 'head',\n  Patch = 'patch',\n  Post = 'post',\n  Put = 'put',\n}\n\nexport type HttpRequestHeaders = Record<string, string>;\n\nexport type HttpRequest = {\n  readonly body?: HttpRequestBody;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly response?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpRequestHeaders;\n  readonly host?: HttpRequestHost;\n  readonly method: HttpRequestMethod;\n  readonly resource: HttpRequestResource;\n};\n", "export type HttpResponseBody<T> = T & (Record<string, unknown> | unknown);\n\nexport type HttpResponseHeaders = Record<string, string>;\n\nexport enum HttpResponseCode {\n  CONTINUE = 100,\n  SWITCHING_PROTOCOLS = 101,\n  PROCESSING = 102,\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NON_AUTHORITATIVE_INFORMATION = 203,\n  NO_CONTENT = 204,\n  RESET_CONTENT = 205,\n  PARTIAL_CONTENT = 206,\n  MULTI_STATUS = 207,\n  ALREADY_REPORTED = 208,\n  IM_USED = 226,\n  MULTIPLE_CHOICES = 300,\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  SEE_OTHER = 303,\n  NOT_MODIFIED = 304,\n  USE_PROXY = 305,\n  SWITCH_PROXY = 306,\n  TEMPORARY_REDIRECT = 307,\n  PERMANENT_REDIRECT = 308,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  PAYMENT_REQUIRED = 402,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  NOT_ACCEPTABLE = 406,\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n  REQUEST_TIMEOUT = 408,\n  CONFLICT = 409,\n  GONE = 410,\n  LENGTH_REQUIRED = 411,\n  PRECONDITION_FAILED = 412,\n  PAYLOAD_TOO_LARGE = 413,\n  URI_TOO_LONG = 414,\n  UNSUPPORTED_MEDIA_TYPE = 415,\n  RANGE_NOT_SATISFIABLE = 416,\n  EXPECTATION_FAILED = 417,\n  I_AM_A_TEAPOT = 418,\n  MISDIRECTED_REQUEST = 421,\n  UNPROCESSABLE_ENTITY = 422,\n  LOCKED = 423,\n  FAILED_DEPENDENCY = 424,\n  TOO_EARLY = 425,\n  UPGRADE_REQUIRED = 426,\n  PRECONDITION_REQUIRED = 428,\n  TOO_MANY_REQUESTS = 429,\n  REQUEST_HEADER_FIELDS_TOO_LARGE = 431,\n  UNAVAILABLE_FOR_LEGAL_REASONS = 451,\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504,\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n  VARIANT_ALSO_NEGOTIATES = 506,\n  INSUFFICIENT_STORAGE = 507,\n  LOOP_DETECTED = 508,\n  BANDWIDTH_LIMIT_EXCEEDED = 509,\n  NOT_EXTENDED = 510,\n  NETWORK_AUTHENTICATION_REQUIRED = 511,\n}\n\nexport type HttpResponse<T = Record<string, unknown>> = {\n  readonly body?: HttpResponseBody<T>;\n  readonly details?: {\n    readonly date?: string;\n    readonly duration?: number;\n    readonly id?: string;\n    readonly request?: {\n      readonly id?: string;\n    };\n    readonly size?: number;\n  };\n  readonly headers?: HttpResponseHeaders;\n  readonly status?: {\n    readonly code: HttpResponseCode;\n  };\n};\n", "export enum OnboardingStatus {\n  Completed = 'completed',\n  Started = 'started',\n  Uncompleted = 'uncompleted',\n}\n\nexport type OnboardingStep = {\n  description: string;\n  id: string;\n  guide_id: OnboardingGuide;\n  name: string;\n};\n\nexport type OnboardingGuide = {\n  id: string;\n  name: string;\n  description: string;\n  steps: OnboardingStep['id'][];\n};\n", "export type Dependency = {\n  readonly [name: string]: string | undefined;\n};\n\nexport type Dependencies = Record<string, string>;\n\nexport enum BrowserPackage {\n  AmazonCognitoIdentityJS = 'amazon-cognito-identity-js',\n  History = 'history',\n  JSFileDownload = 'js-file-download',\n  React = 'react',\n  ReactColorful = 'react-colorful',\n  ReactCountryFlag = 'react-country-flag',\n  ReactDOM = 'react-dom',\n  ReactDatePicker = 'react-date-picker',\n  ReactDropzone = 'react-dropzone',\n  ReactRedux = 'react-redux',\n  ReactRouter = 'react-router',\n  ReactSyntaxHighlighter = 'react-syntax-highlighter',\n  SrcLaunchIcons = '@srclaunch/icons',\n  SrcLaunchReactHooks = '@srclaunch/react-hooks',\n  SrcLaunchThemes = '@srclaunch/themes',\n  SrcLaunchWebApplicationState = '@srclaunch/web-app-state',\n  SrcLaunchWebEnvironment = '@srclaunch/web-environment',\n  StyledComponents = 'styled-components',\n}\n\nexport enum NodePackage {\n  AsyncExitHook = 'async-exit-hook',\n  AwsSDK = 'aws-sdk',\n  CORS = 'cors',\n  Compression = 'compression',\n  Config = 'config',\n  Express = 'express',\n  FSExtra = 'fs-extra',\n  Keygrip = 'keygrip',\n  Multer = 'multer',\n  Plaid = 'plaid',\n  Sequelize = 'sequelize',\n  SrcLaunchDataClient = '@srclaunch/data-client',\n  SrcLaunchHttpServer = '@srclaunch/http-server',\n  SrcLaunchNodeEnvironment = '@srclaunch/node-environment',\n}\n\nexport enum UniversalPackage {\n  Axios = 'axios',\n  ChangeCase = 'change-case',\n  ColorNamer = 'color-namer',\n  CryptoJS = 'crypto-js',\n  CurrencyCodes = 'currency-codes',\n  EmailValidator = 'email-validator',\n  HexRGB = 'hex-rgb',\n  JSYaml = 'js-yaml',\n  Luxon = 'luxon',\n  NanoID = 'nanoid',\n  PasswordValidator = 'password-validator',\n  PicoColors = 'pico-colors',\n  Pluralize = 'pluralize',\n  QueryString = 'query-string',\n  RGBHex = 'rgb-hex',\n  Redux = 'redux',\n  ReduxToolkit = '@reduxjs/toolkit',\n  SerializeError = 'serialize-error',\n  SrcLaunchA11y = '@srclaunch/a11y',\n  SrcLaunchActions = '@srclaunch/actions',\n  SrcLaunchAuthentication = '@srclaunch/authentication',\n  SrcLaunchExceptions = '@srclaunch/exceptions',\n  SrcLaunchHttpClient = '@srclaunch/http-client',\n  SrcLaunchI18n = '@srclaunch/i18n',\n  SrcLaunchLogger = '@srclaunch/logger',\n  SrcLaunchTransform = '@srclaunch/transform',\n  SrcLaunchValidation = '@srclaunch/validation',\n  Uuid = 'uuid',\n  Zxcvbn = 'zxcvbn',\n}\n\nexport enum TypesPackage {\n  React = '@types/react',\n}\n\nexport type Package =\n  | BrowserPackage\n  | NodePackage\n  | TypesPackage\n  | UniversalPackage;\n\nexport enum PackageType {\n  CommonJS = 'commonjs',\n  Module = 'module',\n}\n\nexport type PackageConfig = {\n  readonly exports?: readonly {\n    readonly import?: string;\n    readonly path: string;\n    readonly require?: string;\n  }[];\n  readonly files?: readonly string[];\n  readonly main?: string;\n  readonly module?: string;\n  readonly scripts?: Record<string, string>;\n  readonly type?: PackageType;\n  readonly types?: string;\n};\n\nexport enum PackageManager {\n  NPM = 'npm',\n  PNPM = 'pnpm',\n  Yarn = 'yarn',\n}\n", "export enum DesktopPlatform {\n  Linux = 'Linux',\n  MacOS = 'MacOS',\n  Windows = 'Windows',\n}\n", "export enum MobilePlatform {\n  Android = 'android',\n  IOS = 'ios',\n}\n", "export enum ProblemSeverity {\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n  Emergency = 'emergency',\n}\n\nexport enum ProblemType {\n  Bug = 'bug',\n}\n\nexport interface Problem {\n  readonly severity: ProblemSeverity;\n  readonly type: ProblemType;\n}\n", "export enum ProjectType {\n  APIService = 'api-service',\n  CLIApplication = 'cli-application',\n  ComponentLibrary = 'component-library',\n  CoreAPI = 'core-api',\n  DesktopApplication = 'desktop-application',\n  FiniteStateMachine = 'finite-state-machine',\n  Function = 'function',\n  GitHubAction = 'github-action',\n  GitHubApp = 'github-app',\n  IconLibrary = 'icon-library',\n  Library = 'library',\n  MachineLearningClassifier = 'machine-learning-classifier',\n  MobileApplication = 'mobile-application',\n  NodeApplication = 'node-application',\n  TaskQueue = 'task-queue',\n  ThemeLibrary = 'theme-library',\n  UniversalApplication = 'universal-application',\n  WebApplication = 'web-application',\n  WebHook = 'web-hook',\n  WebService = 'web-service',\n  WebSocketService = 'web-socket-service',\n}\n", "import { ISO8601 } from '../data/primitive';\nimport { Task } from '../workflow/task';\n\nexport enum Status {\n  Canceled = 'canceled',\n  Completed = 'completed',\n  Failed = 'failed',\n  Queued = 'queued',\n  Running = 'running',\n  Started = 'started',\n}\n\nexport type QueueLog = {\n  readonly id?: string;\n  readonly message?: string;\n  readonly status?: Task['status'];\n  readonly task?: Task['id'];\n  readonly timestamp?: ISO8601;\n  readonly type?: 'info' | 'error';\n};\n\nexport type Queue = {\n  readonly description?: string;\n  readonly ended?: ISO8601;\n  readonly finished: readonly Task['id'][];\n  readonly id: string;\n  readonly input?: Record<string, string | number | boolean>;\n  readonly logs?: readonly QueueLog[];\n  readonly name: string;\n  readonly output?: Record<string, string | number | boolean>;\n  readonly queued: readonly Task['id'][];\n  readonly running: readonly Task['id'][];\n  readonly started?: ISO8601;\n  readonly status?: Status;\n  readonly tasks?: readonly Task[];\n};\n\nexport type QueueInitializationResult = {\n  readonly error: boolean | Error;\n};\n", "import { DeploymentOptions } from '../deployment';\nimport { License } from '../legal/license';\n\nexport enum PublishAccess {\n  Public = 'public',\n  Restricted = 'restricted',\n}\n\nexport type PublishOptions = {\n  readonly access?: PublishAccess;\n  readonly license?: License;\n  readonly registry?: string;\n};\n\nexport type ReleaseConfig = {\n  readonly deployment?: DeploymentOptions | readonly DeploymentOptions[];\n  readonly dryRun?: boolean;\n  readonly force?: boolean;\n  readonly local?: boolean;\n  readonly name?: string;\n  readonly publish?: PublishOptions;\n  readonly version?: string;\n};\n", "import React from 'react';\n\nexport enum RouteRole {\n  ForgotPassword = 'forgot_password',\n  Index = 'index',\n  Login = 'login',\n  PageNotFound = '404',\n  Signup = 'signup',\n  VerifyCode = 'verify_code',\n}\n\nexport type Route = {\n  readonly component?: React.ElementType;\n  readonly hierarchy?: ReadonlyArray<string>;\n  readonly loginRequired?: boolean;\n  readonly markdown?: {\n    readonly content?: string;\n    readonly file?: {\n      readonly name: string;\n      readonly path: string;\n    };\n  };\n  readonly path?: string;\n  readonly role?: RouteRole;\n};\n", "export enum Runner {\n  Node = 'node',\n  TSNode = 'ts-node',\n  Vite = 'vite',\n}\n\nexport type RunOptions<R = Record<string, unknown>> = R & {\n  readonly runner?: Runner.Node | Runner.TSNode | Runner.Vite;\n  readonly watch?: readonly string[];\n};\n", "export enum ServiceType {\n  API = 'api',\n  CoreAPI = 'core-api',\n  Custom = 'custom',\n  FiniteStateMachine = 'finite-state-machine',\n  MachineLearningClassifier = 'machine-learning-classifier',\n  Queue = 'queue',\n  WebSocket = 'web-socket',\n}\n\nexport type Service = {\n  readonly id: string;\n  readonly name: string;\n  readonly type: ServiceType;\n};\n\nexport type ServiceOptions = Service;\n", "export enum FileType {\n  JSON = 'json',\n  TS = 'ts',\n  TSX = 'tsx',\n  JS = 'js',\n  JSX = 'jsx',\n  YAML = 'yaml',\n}\n\nexport type File<T = FileType> = {\n  readonly contents?: string;\n  readonly extension?: string;\n  readonly name: string;\n  readonly path?: string;\n  readonly type: T;\n  readonly size?: number;\n};\n", "export enum TestTool {\n  Ava = 'ava',\n  Jest = 'jest',\n  Tape = 'tape',\n  Vitest = 'vitest',\n}\n\nexport enum TestReporter {\n  Clover = 'clover',\n  Cobertura = 'cobertura',\n  HTML = 'html',\n  JSONSummary = 'json-summary',\n  JSON = 'json',\n  Lcov = 'lcov',\n  Lcovonly = 'lcovonly',\n  None = 'none',\n  TeamCity = 'teamcity',\n  TextLcov = 'text-lcov',\n  TextSummary = 'text-summary',\n  Text = 'text',\n}\n\nexport interface TestConfig {\n  readonly concurrency?: number;\n  readonly coverage?: {\n    readonly directory?: string;\n    readonly files?: {\n      readonly exclude?: readonly string[];\n      readonly include?: readonly string[];\n    };\n    readonly reporters?: readonly TestReporter[];\n    readonly thresholds?: {\n      readonly [arg: string | 'global']: {\n        readonly branches?: number;\n        readonly functions?: number;\n        readonly lines?: number;\n        readonly statements?: number;\n      };\n    };\n  };\n  readonly fail?: {\n    readonly fast?: boolean;\n    readonly noTests?: boolean;\n  };\n  readonly files?: {\n    readonly exclude?: readonly string[];\n    readonly include?: readonly string[];\n  };\n  readonly match?: readonly string[];\n  readonly tool?: TestTool;\n  readonly watch?: boolean;\n  readonly verbose?: boolean;\n}\n", "export enum DeviceType {\n  Mobile = 'mobile',\n  TV = 'tv',\n  Watch = 'watch',\n  Web = 'web',\n}\n", "export enum ModalType {\n  Confirm = 'confirm',\n  Create = 'create',\n  Delete = 'delete',\n  Edit = 'edit',\n  Error = 'error',\n  Info = 'info',\n  Success = 'success',\n  Warning = 'warning',\n}\n\nexport type Modal = {\n  readonly id: string;\n  readonly date_created: string;\n  readonly label: string;\n  readonly type: ModalType;\n};\n", "export enum NotificationType {\n  Error = 'error',\n  Info = 'info',\n  Success = 'success',\n  Warning = 'warning',\n}\n\nexport type Notification = {\n  readonly id: string;\n  readonly date_created: string;\n  readonly label: string;\n  readonly type: NotificationType;\n};\n", "import { CommunicationMedium } from '../../communications/medium';\n\n/**\n * @enum AuthenticationStatus\n * @property Archived - User is no longer active.\n * @property Compromised - User is disabled due to a potential security threat.\n * @property Confirmed - User has been confirmed.\n * @property ForcePasswordChange - The user is confirmed and the user can sign in\n * using a temporary password, but on first sign-in, the user must change his\n * or her password to a new value before doing anything else.\n * @property ResetRequired - User is confirmed, but the user must request a\n * code and reset his or her password before he or she can sign in.\n * @property Unconfirmed - User has been created but not confirmed.\n * @property Unknown - User status is not known.\n */\nexport enum UserVerificationStatus {\n  Archived = 'ARCHIVED',\n  Compromised = 'COMPROMISED',\n  Confirmed = 'CONFIRMED',\n  ForcePasswordChange = 'FORCE_CHANGE_PASSWORD',\n  ResetRequired = 'RESET_REQUIRED',\n  Unconfirmed = 'UNCONFIRMED',\n  Unknown = 'UNKNOWN',\n}\n\nexport enum UserAuthenticationVerificationType {\n  Code = 'code',\n  Link = 'link',\n}\n\nexport type UserVerificationDetails = {\n  readonly delivery: {\n    readonly destination: string;\n    readonly medium: CommunicationMedium.Email;\n  };\n  readonly status: UserVerificationStatus;\n};\n", "export enum UserRole {\n  Owner = 'Owner',\n  Admin = 'Admin',\n  User = 'User',\n  Visitor = 'Visitor',\n}\n", "import { Task } from './task';\n\nexport type WorkflowInput = unknown;\nexport type WorkflowOutput = unknown;\n\nexport interface WorkflowOptions<I = WorkflowInput, O = WorkflowOutput> {\n  readonly description?: string;\n  readonly input?: I;\n  readonly tasks?: { readonly [id: string]: Task };\n  readonly name?: string;\n  readonly output?: O;\n}\n\nexport class Workflow<I = WorkflowInput, O = WorkflowOutput>\n  implements WorkflowOptions<I, O>\n{\n  public readonly name?: string;\n  public readonly description?: string;\n  public readonly input: I;\n  public readonly tasks?: { readonly [id: string]: Task };\n\n  public constructor({ description, input, tasks, name }: WorkflowOptions) {\n    this.description = description;\n    this.input = input as unknown as I;\n    this.tasks = tasks;\n    this.name = name;\n  }\n}\n", "import {\n  BuildFormat,\n  BuildTarget,\n  ESBuildOptions,\n  Platform,\n} from '@srclaunch/types';\nimport {\n  build as buildCommand,\n  Format,\n  Platform as ESBuildPlatform,\n} from 'esbuild';\nimport * as fs from 'fs-extra';\nimport path from 'node:path';\nimport pc from 'picocolors';\n\nimport { BUILD_DIR } from '../../constants/build';\nimport { getFormatFileSubExtension } from './formats';\n\nexport async function build({\n  bundle = true,\n  clean = true,\n  format,\n  formats = [BuildFormat.ESM, BuildFormat.IIFE],\n  input,\n  minify = true,\n  output,\n  platform = Platform.Universal,\n  sourcemap = true,\n  splitting = true,\n  target = BuildTarget.ESNext,\n  treeShaking = true,\n}: ESBuildOptions) {\n  try {\n    const getEntryPoints = () => {\n      return [\n        path.join(\n          path.resolve(),\n          input?.directory ?? 'src',\n          input?.file ?? 'index.ts',\n        ),\n        ...(input?.files\n          ? input.files.map(f =>\n              path.join(path.resolve(), input?.directory ?? 'src', f),\n            )\n          : []),\n      ];\n    };\n\n    const getPlatform = (): ESBuildPlatform => {\n      switch (platform) {\n        case Platform.Browser:\n          return 'browser';\n        case Platform.Node:\n          return 'node';\n        case Platform.Universal:\n          return 'neutral';\n        default:\n          return 'neutral';\n      }\n    };\n\n    const buildFormat = async (formatType: BuildFormat) => {\n      const buildOptions = {\n        bundle: Boolean(bundle),\n        entryNames: `[dir]/[name].${getFormatFileSubExtension(formatType)}`,\n        entryPoints: getEntryPoints(),\n        external:\n          typeof bundle === 'object' ? (bundle.exclude as string[]) : [],\n        format: formatType as Format,\n        minify,\n        outdir: splitting ? output?.directory ?? BUILD_DIR : undefined,\n        outfile: splitting\n          ? undefined\n          : `${output?.directory ?? BUILD_DIR}/${\n              output?.file ?? `index.${getFormatFileSubExtension(formatType)}`\n            }`,\n        platform: getPlatform(),\n        sourcemap,\n        splitting: format === BuildFormat.ESM && splitting,\n        target,\n        treeShaking,\n      };\n\n      const result = await buildCommand(buildOptions);\n\n      if (result.warnings) {\n        for (const warning of result.warnings) {\n          console.warn(warning.text);\n        }\n      }\n\n      if (result.errors) {\n        for (const error of result.errors) {\n          console.error(error.text);\n        }\n      }\n    };\n\n    if (clean) {\n      await fs.emptyDir(\n        path.join(path.resolve(), output?.directory ?? BUILD_DIR),\n      );\n    }\n\n    if (format) {\n      await buildFormat(format);\n    } else if (formats.length > 0) {\n      for (const f of formats) {\n        await buildFormat(f);\n      }\n    }\n  } catch (error: any) {\n    console.error(error);\n  }\n}\n", "export const BUILD_DIR = 'dist';\nexport const BUILD_FILE_NAME = 'index';\n", "import { BuildFormat } from '@srclaunch/types';\n\nexport function getFormatFileSubExtension(format: BuildFormat) {\n  switch (format) {\n    case BuildFormat.CJS:\n      return 'cjs';\n    case BuildFormat.ESM:\n      return 'esm';\n    case BuildFormat.IIFE:\n      return 'iife';\n    case BuildFormat.UMD:\n      return 'umd';\n    default:\n      return `${format}`;\n  }\n}\n\nexport function getViteFormatFileExtension(\n  format:\n    | 'amd'\n    | 'cjs'\n    | 'es'\n    | 'iife'\n    | 'system'\n    | 'umd'\n    | 'commonjs'\n    | 'esm'\n    | 'module'\n    | 'systemjs',\n) {\n  switch (format) {\n    case 'cjs':\n    case 'commonjs':\n      return '.cjs.js';\n    case 'es':\n    case 'esm':\n    case 'module':\n      return '.esm.js';\n    case 'iife':\n      return '.iife.js';\n    case 'umd':\n      return '.umd.js';\n    default:\n      return `${format}.js`;\n  }\n}\n", "import { BuildOptions } from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport pc from 'picocolors';\nimport ts from 'typescript';\n\nexport type TypesBuildOptions = Pick<\n  BuildOptions,\n  'input' | 'output' | 'types'\n>;\n\nexport async function build({ input, types, output }: TypesBuildOptions) {\n  const configPath =\n    typeof types === 'object' ? types?.configPath : 'tsconfig.json';\n  const tsConfigContents = configPath\n    ? await fs.readFile(path.join(path.resolve(), configPath))\n    : undefined;\n\n  if (tsConfigContents) {\n    const tsConfig = await JSON.parse(tsConfigContents.toString());\n\n    const { options: tsOptions } = ts.parseJsonConfigFileContent(\n      {\n        ...tsConfig,\n        compilerOptions: {\n          ...tsConfig.compilerOptions,\n          declarationDir: path.join(\n            path.resolve(),\n            output?.directory ??\n              tsConfig.compilerOptions.declarationDir ??\n              'dist',\n          ),\n        },\n      },\n      ts.sys,\n      path.resolve(),\n    );\n\n    const srcFiles = await fs.readdir(\n      path.join(path.resolve(), input?.directory ?? 'src'),\n    );\n\n    const buildFiles = srcFiles\n      .filter(f => f.endsWith('.ts') || f.endsWith('.tsx'))\n      .map(file => {\n        return path.join(path.resolve(), input?.directory ?? 'src', file);\n      });\n    const program: ts.Program = ts.createProgram(buildFiles, tsOptions);\n    const emitResult = program.emit();\n    const allDiagnostics = ts\n      .getPreEmitDiagnostics(program)\n      .concat(emitResult.diagnostics);\n\n    // for (const diagnostic of allDiagnostics) {\n    //   if (diagnostic.file) {\n    //     const { line, character } =\n    //       diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n    //     const message = ts.flattenDiagnosticMessageText(\n    //       diagnostic.messageText,\n    //       '\\n',\n    //     );\n    //     // console.log(\n    //     //   `${diagnostic.file.fileName} (${line + 1},${\n    //     //     character + 1\n    //     //   }): ${message}`,\n    //     // );\n    //   } else {\n    //     // console.log(\n    //     //   `${ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')}`,\n    //     // );\n    //   }\n    // }\n\n    // console.log(`${pc.green('\u2714')} compiled types`);\n  }\n}\n", "import { BuildFormat, BuildTarget, ViteBuildOptions } from '@srclaunch/types';\nimport path from 'node:path';\nimport pc from 'picocolors';\nimport {\n  build as buildCommand,\n  BuildOptions,\n  LibraryFormats,\n  LibraryOptions,\n  PluginOption,\n} from 'vite';\n\nimport { ASSETS_DIR } from '../../constants/assets';\nimport { BUILD_DIR } from '../../constants/build';\nimport { SOURCE_DIR, SOURCE_MAIN_FILE } from '../../constants/dev';\nimport { getVitePlugins } from '../runners/web-application/runner';\n// import { getVitePlugins } from '../vite';\nimport { getViteFormatFileExtension } from './formats';\n\nexport async function build({\n  assetsDir,\n  bundle = true,\n  clean = true,\n  format = BuildFormat.ESM,\n  formats,\n  input,\n  library = false,\n  manifest = true,\n  minify = true,\n  optimize,\n  output,\n  pwa,\n  react,\n  rootDir,\n  sourcemap = true,\n  ssr,\n  styledComponents,\n  target = BuildTarget.ESNext,\n}: ViteBuildOptions) {\n  try {\n    const viteFormats = (\n      formats && formats.length > 0\n        ? formats?.map(f => (f === BuildFormat.ESM ? 'es' : f))\n        : [format === BuildFormat.ESM ? 'es' : format]\n    ) as LibraryFormats[];\n\n    const getLibraryOptions = (): LibraryOptions => {\n      return {\n        entry: path.join(\n          path.resolve(),\n          input?.directory ?? SOURCE_DIR,\n          input?.file ?? SOURCE_MAIN_FILE,\n        ),\n        fileName: fmt =>\n          `${output?.file ?? 'index'}${getViteFormatFileExtension(fmt)}`,\n        formats: viteFormats,\n        name:\n          library && typeof library === 'object' ? library?.name : undefined,\n      };\n    };\n\n    const getRollupOptions = (): BuildOptions['rollupOptions'] => {\n      let options: BuildOptions['rollupOptions'] = {\n        external: [],\n      };\n\n      if (\n        typeof bundle === 'object' &&\n        bundle.exclude &&\n        bundle.exclude.length > 0\n      ) {\n        options = {\n          ...options,\n          external: (bundle.exclude ?? []) as string[],\n        };\n      }\n\n      if (styledComponents) {\n        options = {\n          ...options,\n          external: [...(options.external as string[]), 'styled-components'],\n        };\n      }\n\n      if (typeof bundle === 'object' && bundle.preserveModules) {\n        options = {\n          ...options,\n          output: {\n            entryFileNames: '[name].[format].js',\n          },\n        };\n      }\n\n      if (typeof bundle === 'object' && bundle.globals) {\n        options = {\n          ...options,\n          output: {\n            ...options.output,\n            globals: bundle.globals,\n          },\n        };\n      }\n\n      return Object.entries(options).length > 0\n        ? options\n        : {\n            output: undefined,\n          };\n    };\n\n    await buildCommand({\n      base: output?.path,\n      build: {\n        // assetsDir,\n        emptyOutDir: clean,\n        lib: library ? getLibraryOptions() : undefined,\n        manifest,\n        minify,\n        outDir: path.join(path.resolve(), output?.directory ?? BUILD_DIR),\n        rollupOptions: getRollupOptions(),\n        sourcemap,\n        ssrManifest: manifest && ssr,\n        target,\n      },\n      define: typeof bundle === 'object' ? bundle?.define : undefined,\n      envPrefix: 'SRCLAUNCH_',\n      optimizeDeps: {\n        exclude: (optimize?.exclude ?? []) as string[],\n        include: (optimize?.include ?? []) as string[],\n      },\n      plugins: getVitePlugins({\n        pwa,\n        react,\n        styledComponents,\n      }) as PluginOption[],\n      publicDir: assetsDir,\n      root:\n        rootDir ?? path.join(path.resolve(), input?.directory ?? SOURCE_DIR),\n    });\n\n    // if (Array.isArray(buildOutput)) {\n    //   for (const result of buildOutput) {\n    //     for (const o of result.output) {\n    //       console.log(o);\n    //     }\n    //   }\n    // }\n\n    // console.log('result', result);\n\n    // if (Array.isArray(result) && result.length > 0 && result[0]) {\n    //   for (const output of result) {\n    //     if (Array.isArray(output) && output.length > 0) {\n    //       for (const line of output) {\n    //         if (line.output) {\n    //           for (const line of output.output) {\n    //             if (line.type === 'asset') {\n    //               `Wrote asset ${line.fileName}...`;\n    //             } else {\n    //               console.log(\n    //                 `Wrote chunk ${line.fileName}... ${\n    //                   line.code.length / 1024\n    //                 } kb`,\n    //               );\n    //             }\n    //           }\n    //         }\n    //       }\n    //     }\n    //     //  else if (typeof output === 'object') {\n    //     //   if (output.output) {\n    //     //     for (const line of output.output) {\n    //     //       console.log(line);\n    //     //     }\n    //     //   }\n    //     // }\n    //   }\n    // }\n\n    // if (result.errors) {\n    //   result.errors.forEach(error => {\n    //     console.error(error.text);\n    //   });\n    // }\n\n    console.log(\n      `${pc.green('\u2714')} bundled to ${\n        formats && formats.length > 0\n          ? `${pc.bold(formats.join(', ').toLocaleUpperCase())} formats`\n          : `${pc.bold(format.toLocaleUpperCase())} format`\n      }`,\n    );\n  } catch (error: any) {\n    console.error(`Error occurred while building: ${error.name}`, error);\n  }\n}\n", "export const SOURCE_DIR = 'src';\nexport const SOURCE_MAIN_FILE = 'index.ts';\n", "/* eslint-disable functional/prefer-readonly-type */\nimport {\n  DevelopmentEnvironmentOptions,\n  EnvironmentOptions,\n  EnvironmentType,\n  WebApplicationOptions,\n} from '@srclaunch/types';\nimport {} from '@srclaunch/types';\nimport react from '@vitejs/plugin-react';\nimport { RequestListener } from 'node:http';\nimport path from 'node:path';\nimport pc from 'picocolors';\nimport { createServer, InlineConfig, PluginOption, ViteDevServer } from 'vite';\nimport { VitePWA } from 'vite-plugin-pwa';\n\nimport { Process } from '../../process';\n\nexport const getVitePlugins = ({\n  react: reactApp,\n  pwa,\n  styledComponents,\n}: {\n  readonly pwa?: boolean;\n  readonly react?: boolean;\n  readonly styledComponents?: boolean;\n}): readonly PluginOption[] => {\n  let plugins: PluginOption[] = [];\n\n  if (reactApp && styledComponents) {\n    plugins = [\n      react({\n        babel: {\n          plugins: [\n            [\n              'babel-plugin-styled-components',\n              {\n                displayName: true,\n                fileName: false,\n              },\n            ],\n          ],\n        },\n      }) as PluginOption,\n    ];\n  } else if (reactApp && !styledComponents) {\n    plugins = [react() as PluginOption];\n  }\n\n  if (pwa) {\n    plugins = [...plugins, VitePWA()];\n  }\n  return plugins;\n};\n\ninterface WebApplicationRunnerOptions extends WebApplicationOptions {\n  readonly environment?: EnvironmentType;\n}\n\nexport class WebApplicationRunner {\n  private readonly environment?: EnvironmentType;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private process?: Process;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private invoked = false;\n\n  public constructor(props: WebApplicationRunnerOptions) {\n    const { environment } = props;\n\n    this.environment = environment;\n\n    // if (!this.script) {\n    //   throw new Error('No input provided');\n    // }\n\n    this.process = new Process('node ./vite', {});\n    // Now we can run a script and invoke a callback when complete, e.g.\n  }\n\n  public async run() {\n    this.process?.run();\n\n    this.process?.on('error', error => {\n      if (this.invoked) return;\n      this.invoked = true;\n\n      console.error(pc.red(error));\n    });\n\n    this.process?.on('data', data => {\n      console.log(data);\n    });\n\n    this.process?.on('close', () => {\n      console.log(pc.green('Process exited'));\n    });\n  }\n}\n", "import childProcess, { ChildProcess } from 'node:child_process';\nimport EventEmitter from 'node:events';\n// import { EventEmitter } from 'node:stream';\nimport pc from 'picocolors';\n\nexport class Process extends EventEmitter {\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private process?: ChildProcess;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private invoked = false;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private output: readonly string[] = [];\n  private readonly args: Record<string, unknown>;\n\n  public constructor(\n    private readonly command: string,\n    args?: Record<string, unknown>,\n  ) {\n    super();\n    this.args = args || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  override emit(eventName: string | symbol, args?: unknown): boolean {\n    return super.emit(eventName, args);\n  }\n\n  public async run() {\n    if (!this.process) {\n      throw new Error('Process not initialized');\n    }\n\n    // listen for errors as they may prevent the exit event from firing\n    this.process.on('error', error => {\n      if (this.invoked) return;\n      this.invoked = true;\n\n      this.emit('error', error);\n    });\n\n    // execute the callback once the process has finished running\n    this.process.on('exit', code => {\n      if (this.invoked) return;\n      this.invoked = true;\n      const error = code === 0 ? null : new Error('exit code ' + code);\n      this.emit('error', error);\n    });\n\n    this.process.stdout?.on('data', data => {\n      this.output = [...this.output, data.toString()];\n      this.emit('data', data);\n    });\n\n    this.process.stderr?.on('data', data => {\n      this.output = [...this.output, data.toString()];\n      this.emit('data', data);\n    });\n\n    this.process.on('close', code => {\n      if (code !== 0) {\n        this.emit('close');\n        // console.error(pc.red(`Process exited with code ${code}`));\n      }\n    });\n\n    this.process = childProcess.spawn(this.command, [], {\n      env: Object.assign({}, process.env, this.args),\n      shell: true,\n      stdio: 'pipe',\n    });\n  }\n\n  public kill() {\n    if (!this.process) {\n      throw new Error('Process not initialized');\n    }\n\n    this.process.kill();\n  }\n}\n", "import { AnyFlags, Result, TypedFlags } from 'meow';\n\nexport enum CommandType {\n  Project = 'project',\n  Workspace = 'workspace',\n}\n\nexport type RunArguments<C, F> = {\n  readonly cli: Result<AnyFlags>;\n  readonly config: C;\n  readonly flags: F;\n};\n\nexport type RunFunction<\n  C,\n  F = Record<string, unknown> & TypedFlags<AnyFlags>,\n> = (arguments_: RunArguments<C, F>) => Promise<void>;\n\nexport type CommandConstructorArgs<\n  C,\n  F = Record<string, unknown> & TypedFlags<AnyFlags>,\n> = {\n  readonly commands?: readonly Command<C, F>[];\n  readonly description: string;\n  readonly flags?: F;\n  readonly name: string;\n  readonly run?: RunFunction<C, F>;\n  readonly type?: CommandType;\n};\n\nexport class Command<C, F = Record<string, unknown> & TypedFlags<AnyFlags>> {\n  readonly flags?: F;\n  readonly name: string;\n  private readonly runFunction?: RunFunction<\n    C,\n    Record<string, unknown> & TypedFlags<AnyFlags>\n  >;\n  readonly commands: CommandConstructorArgs<\n    C,\n    Record<string, unknown> & TypedFlags<AnyFlags>\n  >['commands'];\n  readonly type: CommandType = CommandType.Project;\n\n  constructor(options: CommandConstructorArgs<C, F>) {\n    this.name = options.name;\n    this.commands = options.commands as CommandConstructorArgs<\n      C,\n      Record<string, unknown> & TypedFlags<AnyFlags>\n    >['commands'];\n    this.flags = options.flags;\n    this.type = options.type ?? CommandType.Project;\n    this.runFunction = options.run as RunFunction<\n      C,\n      Record<string, unknown> & TypedFlags<AnyFlags>\n    >;\n  }\n\n  public async run({\n    cli,\n    config,\n    flags,\n  }: RunArguments<\n    C,\n    Record<string, unknown> & TypedFlags<AnyFlags>\n  >): Promise<void> {\n    if (this.runFunction) {\n      return await this.runFunction({\n        cli,\n        config,\n        flags,\n      });\n    }\n  }\n}\n\nexport async function handleCommand({\n  cli,\n  config,\n  command,\n  commands,\n  flags,\n}: {\n  readonly cli: Result<AnyFlags>;\n  readonly command: readonly string[];\n  readonly commands?: readonly Command<\n    any,\n    Record<string, unknown> & TypedFlags<AnyFlags>\n  >[];\n  readonly config: Record<string, unknown>;\n  readonly flags: Record<string, unknown> & TypedFlags<AnyFlags>;\n}): Promise<void> {\n  if (!command || command.length === 0 || !command[0]) {\n    console.error('No command specified');\n    return;\n  }\n\n  if (!commands) {\n    console.error('No commands specified');\n    return;\n  }\n\n  const commandName = command[0];\n  const matchingCommand = commands.find(cmd => cmd.name === commandName);\n\n  if (!matchingCommand) {\n    console.error(`Unknown command ${commandName}`);\n    return;\n  }\n\n  if (command.length === 1) {\n    matchingCommand.run({\n      cli,\n      config,\n      flags,\n    });\n  } else if (command.length > 1) {\n    handleCommand({\n      cli,\n      command: command.slice(1),\n      commands: matchingCommand?.commands,\n      config,\n      flags,\n    });\n  }\n}\n", "import { ProjectConfig } from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\nimport pc from 'picocolors';\n\n// import { render } from 'ink';\nimport { AppContainer } from '../containers/AppContainer';\nimport { createChangeset } from '../lib/changesets';\nimport { Command, CommandType } from '../lib/command';\nimport { InteractiveModeFlag, InteractiveModeFlagType } from '../lib/flags';\nimport { add, commit } from '../lib/git';\n\nexport default new Command({\n  commands: [\n    new Command<\n      ProjectConfig,\n      TypedFlags<\n        InteractiveModeFlagType & {\n          readonly files: {\n            readonly alias: 'f';\n            readonly description: 'A comma-separated list of files to add to the changeset';\n            readonly isRequired: true;\n            readonly type: 'string';\n          };\n\n          readonly message: {\n            readonly alias: 'm';\n            readonly description: 'A message describing the changes';\n            readonly isRequired: true;\n            readonly type: 'string';\n          };\n          readonly scope: {\n            readonly alias: 's';\n            readonly description: 'The scope of the changes';\n            readonly isRequired: false;\n            readonly type: 'string';\n          };\n          readonly type: {\n            readonly alias: 't';\n            readonly description: 'The type of changes made';\n            readonly isRequired: true;\n            readonly type: 'string';\n          };\n        }\n      >\n    >({\n      description: 'Create a changeset',\n      name: 'add',\n      run: async ({ cli, flags }) => {\n        const { message, scope, type } = flags;\n        if (flags.interactive) {\n          // const { waitUntilExit } = render(\n          //   <AppContainer\n          //     initialTab=\"Changes\"\n          //     cliVersion={cli.pkg.version}\n          //     flags={flags}\n          //   />,\n          // );\n          // await waitUntilExit();\n        } else {\n          try {\n            const { commitMessage } = await createChangeset({\n              files: flags.files.split(','),\n              message,\n              scope,\n              type,\n            });\n\n            console.log(\n              `${pc.green('\u2714')} added changeset ${pc.bold(commitMessage)}`,\n            );\n          } catch (error) {\n            console.error('commit err', error);\n          }\n        }\n      },\n      type: CommandType.Project,\n    }),\n    new Command<ProjectConfig>({\n      description: 'List changesets',\n      name: 'list',\n      run: async ({ config, flags }) => {},\n      type: CommandType.Project,\n    }),\n    new Command<ProjectConfig>({\n      description: 'Show help for changesets',\n      name: 'help',\n      run: async () => {\n        console.info('Available changesets commands are: create, list');\n      },\n      type: CommandType.Project,\n    }),\n  ],\n  description: 'Manage changesets',\n  name: 'changesets',\n});\n", "import { Changeset } from '@srclaunch/types';\nimport path from 'path';\nimport { add, commit } from './git';\n\nexport async function createChangeset({\n  files = [],\n  message,\n  scope,\n  type,\n}: Omit<Changeset, 'files' | 'type'> & {\n  files: string | string[];\n  type: Changeset['type'] | string;\n}): Promise<{\n  commitMessage: string;\n}> {\n  const paths =\n    typeof files === 'string'\n      ? files\n      : files.map(file => (file === '.' ? '.' : path.resolve(file))).join(' ');\n\n  await add(paths);\n\n  const commitMessage = `${type}${scope ? `(${scope})` : ''}: ${message}`;\n  await commit(commitMessage);\n\n  return {\n    commitMessage,\n  };\n}\n", "import Git, { SimpleGit } from 'simple-git';\n\nexport async function add(path: string) {\n  const git: SimpleGit = Git();\n\n  return git.add(path);\n}\n\nexport async function commit(message: string) {\n  const git: SimpleGit = Git();\n\n  await git.commit(message);\n}\n\nexport async function getBranchName() {\n  const git: SimpleGit = Git();\n\n  return await (\n    await git.branchLocal()\n  ).current;\n}\n\nexport async function push({ followTags = true }: { followTags?: boolean }) {\n  const git: SimpleGit = Git();\n  const currentBranch = await git.branchLocal();\n\n  const currentRepo = await (\n    await git.getRemotes()\n  ).find(remote => remote.name === 'origin');\n\n  const followTagsArg = followTags ? { '--follow-tags': null } : undefined;\n\n  const result = await git.push(\n    currentRepo?.name ?? 'origin',\n    currentBranch.current,\n    {\n      ...followTagsArg,\n    },\n  );\n\n  return {\n    branch: currentBranch.current,\n    repo: result.repo,\n  };\n}\n", "import pc from 'picocolors';\n\nimport { Command } from '../lib/command';\n\nexport default new Command({\n  commands: [\n    new Command({\n      description:\n        'Checks if a SrcLaunch configuration file exists and is valid',\n      name: 'check',\n      run: async () => {\n        // const config = await getSrcLaunchConfig();\n        // if (!config) {\n        //   console.error(\n        //     `${chalk.red('\u2718')} ${chalk.bold('No SrcLaunch config file found')}`,\n        //   );\n        // } else if (isValidSrcLaunchConfig(config)) {\n        //   console.info(`${chalk.green('\u2714')} SrcLaunch config file is valid`);\n        // } else {\n        //   console.error(\n        //     `${chalk.red('\u2718')} ${chalk.bold(\n        //       'SrcLaunch config file is invalid',\n        //     )}`,\n        //   );\n        // }\n      },\n    }),\n    new Command({\n      description:\n        'Creates a SrcLaunch configuration file in the current directory.',\n      name: 'create',\n      run: async () => {\n        // const config = await getSrcLaunchConfig();\n        // if (config) {\n        //   console.info(`${chalk.green('\u2714')} project cleaned`);\n        // }\n      },\n    }),\n  ],\n  description: `Shows help for ${pc.bold('config')} commands`,\n  name: 'config',\n});\n", "import { ProjectConfig, ProjectType, WorkspaceConfig } from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\n\n// import { transformObjectToYAML } from '@srclaunch/logic';\nimport { Command } from '../lib/command';\nimport { WorkspaceCreator } from '../lib/creators/workspace';\nimport { SrcLaunchWebApplicationGenerator } from '../lib/generators/srclaunch/project';\nimport { SrcLaunchWorkspaceGenerator } from '../lib/generators/srclaunch/workspace';\n// import { generateSDKs } from '../lib/generate';\nimport { createNewProjectInteractive } from '../lib/project/create';\n\nexport type CreateFlags = TypedFlags<{\n  readonly description: {\n    readonly required: true;\n    readonly type: 'string';\n  };\n  readonly name: {\n    readonly required: true;\n    readonly type: 'string';\n  };\n  readonly owner: {\n    readonly required: false;\n    readonly type: 'string';\n  };\n  readonly type: {\n    readonly required: true;\n    readonly type: 'string';\n  };\n}>;\n\nexport default new Command<ProjectConfig & WorkspaceConfig>({\n  commands: [\n    new Command<ProjectConfig, CreateFlags>({\n      description: 'Create SrcLaunch workspace',\n      name: 'workspace',\n      async run({ config, flags }): Promise<void> {\n        console.log('creating workspace');\n\n        const generator = new SrcLaunchWorkspaceGenerator({\n          description: flags.description,\n          name: flags.name as string,\n          owner: flags.owner,\n        });\n\n        await generator.generate();\n\n        console.info('Successfully generated workspace');\n\n        // const workspaceCreator = new WorkspaceCreator();\n        // await workspaceCreator.create();\n      },\n    }),\n    new Command<WorkspaceConfig, CreateFlags>({\n      description: 'Create a SrcLaunch project',\n      name: 'project',\n      async run({ flags }): Promise<void> {\n        switch (flags.type) {\n          case ProjectType.WebApplication: {\n            const generator = new SrcLaunchWebApplicationGenerator({\n              description: flags.description,\n              name: flags.name as string,\n              owner: flags.owner,\n            });\n\n            await generator.generate();\n\n            console.info('Successfully generated Web Application project');\n          }\n        }\n        // await createNewProjectInteractive({\n        //   description: flags.description,\n        //   name: flags.name,\n        //   type: flags.type,\n        // });\n      },\n    }),\n  ],\n  description: `Create and initialize a new SrcLaunch project or workspace.`,\n  name: 'create',\n});\n", "export * from './web-application';\n", "import { Platform, Primitives, ProjectType } from '@srclaunch/types';\n\nimport { CodeGenWorkflow } from '../../../codegen';\nimport {\n  getGitHubActionTemplate,\n  GitHubActionRunnerOS,\n  GitHubActionTrigger,\n} from '../../../templates/ci-cd/github-action';\nimport { getEditorConfigTemplate } from '../../../templates/dx/editor-config';\nimport { getESLintConfigTemplate } from '../../../templates/dx/eslint-config';\nimport { getESLintIgnoreTemplate } from '../../../templates/dx/eslint-ignore';\nimport { getPrettierConfigTemplate } from '../../../templates/dx/prettier-config';\nimport { getPrettierIgnoreTemplate } from '../../../templates/dx/prettier-ignore';\nimport { getStyleLintConfigTemplate } from '../../../templates/dx/stylelint-config';\nimport { getTurboConfigTemplate } from '../../../templates/dx/turbo-config';\nimport { getTypeScriptConfigTemplate } from '../../../templates/dx/typescript-config';\nimport { getTypescriptTypeDefinitionTemplate } from '../../../templates/dx/typescript-type-definition';\nimport { getGitIgnoreTemplate } from '../../../templates/package/gitignore';\nimport { getPackageConfigTemplate } from '../../../templates/package/package-config';\nimport { getChangeLogTemplate } from '../../../templates/project/changelog';\nimport { getLicenseTemplate } from '../../../templates/project/license';\nimport { getReadmeTemplate } from '../../../templates/project/readme';\nimport { getSrcLaunchModelTemplate } from '../../../templates/srclaunch/model';\nimport { getSrcLaunchWorkspaceConfigTemplate } from '../../../templates/srclaunch/workspace-config';\nimport { getPnpmWorkspaceConfigTemplate } from '../../../templates/workspace/pnpm-workspace';\n\ninterface SrcLaunchWebApplicationGeneratorOptions {\n  readonly description?: string;\n  readonly name: string;\n  readonly owner?: string;\n  readonly type?: ProjectType;\n}\n\nexport class SrcLaunchWebApplicationGenerator extends CodeGenWorkflow {\n  public constructor(options: SrcLaunchWebApplicationGeneratorOptions) {\n    super();\n\n    const { description, name, owner } = options;\n\n    this.createDirectory('.github')\n      .createDirectory('.github/workflows')\n      .createDirectory('.srclaunch')\n      .createDirectory('assets')\n      .createDirectory('src')\n      .createDirectory('src/components')\n      .createDirectory('src/layouts')\n      .createDirectory('src/pages')\n      .createDirectory('src/state')\n      // .addFile('src/index.html', getSrcLaunchWebApplicationIndexHtmlTemplate())\n      // .addFile('src/index.tsx', getSrcLaunchWebApplicationIndexTsTemplate())\n      // .addFile('src/react-app-env.d.ts', getSrcLaunchWebApplicationReactAppEnvDtsTemplate())\n      // .addFile('src/routes.ts', getSrcLaunchWebApplicationRoutesTsTemplate())\n\n      .addFile(\n        '.eslintrc.cjs',\n        getESLintConfigTemplate({\n          platform: Platform.Browser,\n        }),\n      )\n      .addFile(\n        '.gitignore',\n        getGitIgnoreTemplate({\n          paths: [\n            '.env',\n            '.DS_Store',\n            '**/coverage/',\n            '**/dist/',\n            'node_modules/',\n            '**/node_modules/',\n            '.pnpm-debug.log',\n            '.turbo',\n          ],\n        }),\n      )\n      .addFile(\n        '.prettierignore',\n        getPrettierIgnoreTemplate({\n          paths: [\n            '.cache/**',\n            '.husky/**',\n            '.next/**',\n            '.turbo/**',\n            'node_modules',\n            'coverage/**',\n            'dist/**',\n            'docs/**',\n            'node_modules/**',\n            'pnpm-lock.yaml',\n          ],\n        }),\n      )\n      .addFile('.prettierrc.cjs', getPrettierConfigTemplate())\n      .addFile(\n        '.srclaunchrc.ts',\n        getSrcLaunchWorkspaceConfigTemplate({ name, owner }),\n      )\n      .addFile('.stylelintrc.js', getStyleLintConfigTemplate())\n      .addFile('CHANGELOG.md', getChangeLogTemplate())\n      // .addFile('commitlint.config.cjs', '')\n      .addFile('LICENSE', getLicenseTemplate())\n      .addFile(\n        'package.json',\n        getPackageConfigTemplate({\n          description,\n          name,\n          owner,\n        }),\n      )\n      .addFile(\n        'pnpm-workspace.yaml',\n        getPnpmWorkspaceConfigTemplate({\n          paths: ['apps/**', 'packages/**', 'sdk/**', 'services/**'],\n        }),\n      )\n      .addFile('tsconfig.json', getTypeScriptConfigTemplate())\n      .addFile('turbo.json', getTurboConfigTemplate())\n      .addFile('README.md', getReadmeTemplate({ name, owner }));\n  }\n}\n", "import fs from 'fs-extra';\nimport mustache from 'mustache';\n\nenum CodeGenOperationType {\n  AddFile = 'add-file',\n  CreateDirectory = 'create-directory',\n}\n\ninterface CodeGenOperation {\n  readonly content?: string;\n  readonly path: string;\n  readonly props?: Record<string, unknown>;\n  readonly type: CodeGenOperationType;\n}\n\nexport class CodeGenWorkflow {\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private operations: Array<CodeGenOperation> = [];\n  public constructor() {}\n\n  public addFile(\n    path: string,\n    content?: string,\n    props?: Record<string, unknown>,\n  ) {\n    this.operations = [\n      ...this.operations,\n      {\n        content: content && props ? mustache.render(content, props) : content,\n        path,\n        props,\n        type: CodeGenOperationType.AddFile,\n      },\n    ];\n\n    return this;\n  }\n\n  public createDirectory(path: string) {\n    this.operations = [\n      ...this.operations,\n      {\n        path,\n        type: CodeGenOperationType.CreateDirectory,\n      },\n    ];\n    return this;\n  }\n\n  public async generate() {\n    for (const operation of this.operations) {\n      switch (operation.type) {\n        case CodeGenOperationType.AddFile:\n          console.log(`Adding file '${operation.path}'`);\n\n          await fs.writeFile(operation.path, operation.content);\n          break;\n        case CodeGenOperationType.CreateDirectory:\n          console.log(`Creating directory '${operation.path}'`);\n          await fs.mkdirp(operation.path);\n\n          break;\n        default:\n          throw new Error(`Unknown operation type ${operation.type}`);\n      }\n    }\n  }\n}\n", "/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\nvar objectToString = Object.prototype.toString;\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\n  return objectToString.call(object) === '[object Array]';\n};\n\nfunction isFunction (object) {\n  return typeof object === 'function';\n}\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nfunction typeStr (obj) {\n  return isArray(obj) ? 'array' : typeof obj;\n}\n\nfunction escapeRegExp (string) {\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Null safe way of checking whether or not an object,\n * including its prototype, has a given property\n */\nfunction hasProperty (obj, propName) {\n  return obj != null && typeof obj === 'object' && (propName in obj);\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nfunction primitiveHasOwnProperty (primitive, propName) {\n  return (\n    primitive != null\n    && typeof primitive !== 'object'\n    && primitive.hasOwnProperty\n    && primitive.hasOwnProperty(propName)\n  );\n}\n\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n// See https://github.com/janl/mustache.js/issues/189\nvar regExpTest = RegExp.prototype.test;\nfunction testRegExp (re, string) {\n  return regExpTest.call(re, string);\n}\n\nvar nonSpaceRe = /\\S/;\nfunction isWhitespace (string) {\n  return !testRegExp(nonSpaceRe, string);\n}\n\nvar entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nfunction escapeHtml (string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n    return entityMap[s];\n  });\n}\n\nvar whiteRe = /\\s*/;\nvar spaceRe = /\\s+/;\nvar equalsRe = /\\s*=/;\nvar curlyRe = /\\s*\\}/;\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n */\nfunction parseTemplate (template, tags) {\n  if (!template)\n    return [];\n  var lineHasNonSpace = false;\n  var sections = [];     // Stack to hold section tokens\n  var tokens = [];       // Buffer to hold the tokens\n  var spaces = [];       // Indices of whitespace tokens on the current line\n  var hasTag = false;    // Is there a {{tag}} on the current line?\n  var nonSpace = false;  // Is there a non-space char on the current line?\n  var indentation = '';  // Tracks indentation for tags that use it\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n  // Strips all whitespace tokens array for the current line\n  // if there was a {{#tag}} on it and otherwise only space.\n  function stripSpace () {\n    if (hasTag && !nonSpace) {\n      while (spaces.length)\n        delete tokens[spaces.pop()];\n    } else {\n      spaces = [];\n    }\n\n    hasTag = false;\n    nonSpace = false;\n  }\n\n  var openingTagRe, closingTagRe, closingCurlyRe;\n  function compileTags (tagsToCompile) {\n    if (typeof tagsToCompile === 'string')\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n      throw new Error('Invalid tags: ' + tagsToCompile);\n\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n  }\n\n  compileTags(tags || mustache.tags);\n\n  var scanner = new Scanner(template);\n\n  var start, type, value, chr, token, openSection;\n  while (!scanner.eos()) {\n    start = scanner.pos;\n\n    // Match any text between tags.\n    value = scanner.scanUntil(openingTagRe);\n\n    if (value) {\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n        chr = value.charAt(i);\n\n        if (isWhitespace(chr)) {\n          spaces.push(tokens.length);\n          indentation += chr;\n        } else {\n          nonSpace = true;\n          lineHasNonSpace = true;\n          indentation += ' ';\n        }\n\n        tokens.push([ 'text', chr, start, start + 1 ]);\n        start += 1;\n\n        // Check for whitespace on the current line.\n        if (chr === '\\n') {\n          stripSpace();\n          indentation = '';\n          tagIndex = 0;\n          lineHasNonSpace = false;\n        }\n      }\n    }\n\n    // Match the opening tag.\n    if (!scanner.scan(openingTagRe))\n      break;\n\n    hasTag = true;\n\n    // Get the tag type.\n    type = scanner.scan(tagRe) || 'name';\n    scanner.scan(whiteRe);\n\n    // Get the tag value.\n    if (type === '=') {\n      value = scanner.scanUntil(equalsRe);\n      scanner.scan(equalsRe);\n      scanner.scanUntil(closingTagRe);\n    } else if (type === '{') {\n      value = scanner.scanUntil(closingCurlyRe);\n      scanner.scan(curlyRe);\n      scanner.scanUntil(closingTagRe);\n      type = '&';\n    } else {\n      value = scanner.scanUntil(closingTagRe);\n    }\n\n    // Match the closing tag.\n    if (!scanner.scan(closingTagRe))\n      throw new Error('Unclosed tag at ' + scanner.pos);\n\n    if (type == '>') {\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n    } else {\n      token = [ type, value, start, scanner.pos ];\n    }\n    tagIndex++;\n    tokens.push(token);\n\n    if (type === '#' || type === '^') {\n      sections.push(token);\n    } else if (type === '/') {\n      // Check section nesting.\n      openSection = sections.pop();\n\n      if (!openSection)\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n      if (openSection[1] !== value)\n        throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n    } else if (type === 'name' || type === '{' || type === '&') {\n      nonSpace = true;\n    } else if (type === '=') {\n      // Set the tags for the next time around.\n      compileTags(value);\n    }\n  }\n\n  stripSpace();\n\n  // Make sure there are no open sections when we're done.\n  openSection = sections.pop();\n\n  if (openSection)\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n  return nestTokens(squashTokens(tokens));\n}\n\n/**\n * Combines the values of consecutive text tokens in the given `tokens` array\n * to a single token.\n */\nfunction squashTokens (tokens) {\n  var squashedTokens = [];\n\n  var token, lastToken;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    if (token) {\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n        lastToken[1] += token[1];\n        lastToken[3] = token[3];\n      } else {\n        squashedTokens.push(token);\n        lastToken = token;\n      }\n    }\n  }\n\n  return squashedTokens;\n}\n\n/**\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens (tokens) {\n  var nestedTokens = [];\n  var collector = nestedTokens;\n  var sections = [];\n\n  var token, section;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n    }\n  }\n\n  return nestedTokens;\n}\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nfunction Scanner (string) {\n  this.string = string;\n  this.tail = string;\n  this.pos = 0;\n}\n\n/**\n * Returns `true` if the tail is empty (end of string).\n */\nScanner.prototype.eos = function eos () {\n  return this.tail === '';\n};\n\n/**\n * Tries to match the given regular expression at the current position.\n * Returns the matched text if it can match, the empty string otherwise.\n */\nScanner.prototype.scan = function scan (re) {\n  var match = this.tail.match(re);\n\n  if (!match || match.index !== 0)\n    return '';\n\n  var string = match[0];\n\n  this.tail = this.tail.substring(string.length);\n  this.pos += string.length;\n\n  return string;\n};\n\n/**\n * Skips all text until the given regular expression can be matched. Returns\n * the skipped string, which is the entire tail if no match can be made.\n */\nScanner.prototype.scanUntil = function scanUntil (re) {\n  var index = this.tail.search(re), match;\n\n  switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = '';\n      break;\n    case 0:\n      match = '';\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n  }\n\n  this.pos += match.length;\n\n  return match;\n};\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nfunction Context (view, parentContext) {\n  this.view = view;\n  this.cache = { '.': this.view };\n  this.parent = parentContext;\n}\n\n/**\n * Creates a new context using the given view with this context\n * as the parent.\n */\nContext.prototype.push = function push (view) {\n  return new Context(view, this);\n};\n\n/**\n * Returns the value of the given name in this context, traversing\n * up the context hierarchy if the value is absent in this context's view.\n */\nContext.prototype.lookup = function lookup (name) {\n  var cache = this.cache;\n\n  var value;\n  if (cache.hasOwnProperty(name)) {\n    value = cache[name];\n  } else {\n    var context = this, intermediateValue, names, index, lookupHit = false;\n\n    while (context) {\n      if (name.indexOf('.') > 0) {\n        intermediateValue = context.view;\n        names = name.split('.');\n        index = 0;\n\n        /**\n         * Using the dot notion path in `name`, we descend through the\n         * nested objects.\n         *\n         * To be certain that the lookup has been successful, we have to\n         * check if the last object in the path actually has the property\n         * we are looking for. We store the result in `lookupHit`.\n         *\n         * This is specially necessary for when the value has been set to\n         * `undefined` and we want to avoid looking up parent contexts.\n         *\n         * In the case where dot notation is used, we consider the lookup\n         * to be successful even if the last \"object\" in the path is\n         * not actually an object but a primitive (e.g., a string, or an\n         * integer), because it is sometimes useful to access a property\n         * of an autoboxed primitive, such as the length of a string.\n         **/\n        while (intermediateValue != null && index < names.length) {\n          if (index === names.length - 1)\n            lookupHit = (\n              hasProperty(intermediateValue, names[index])\n              || primitiveHasOwnProperty(intermediateValue, names[index])\n            );\n\n          intermediateValue = intermediateValue[names[index++]];\n        }\n      } else {\n        intermediateValue = context.view[name];\n\n        /**\n         * Only checking against `hasProperty`, which always returns `false` if\n         * `context.view` is not an object. Deliberately omitting the check\n         * against `primitiveHasOwnProperty` if dot notation is not used.\n         *\n         * Consider this example:\n         * ```\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n         * ```\n         *\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\n         * in the dot notation case, then render call would return:\n         *\n         * \"The length of a football field is 9.\"\n         *\n         * rather than the expected:\n         *\n         * \"The length of a football field is 100 yards.\"\n         **/\n        lookupHit = hasProperty(context.view, name);\n      }\n\n      if (lookupHit) {\n        value = intermediateValue;\n        break;\n      }\n\n      context = context.parent;\n    }\n\n    cache[name] = value;\n  }\n\n  if (isFunction(value))\n    value = value.call(this.view);\n\n  return value;\n};\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nfunction Writer () {\n  this.templateCache = {\n    _cache: {},\n    set: function set (key, value) {\n      this._cache[key] = value;\n    },\n    get: function get (key) {\n      return this._cache[key];\n    },\n    clear: function clear () {\n      this._cache = {};\n    }\n  };\n}\n\n/**\n * Clears all cached templates in this writer.\n */\nWriter.prototype.clearCache = function clearCache () {\n  if (typeof this.templateCache !== 'undefined') {\n    this.templateCache.clear();\n  }\n};\n\n/**\n * Parses and caches the given `template` according to the given `tags` or\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n * that is generated from the parse.\n */\nWriter.prototype.parse = function parse (template, tags) {\n  var cache = this.templateCache;\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n  var isCacheEnabled = typeof cache !== 'undefined';\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n  if (tokens == undefined) {\n    tokens = parseTemplate(template, tags);\n    isCacheEnabled && cache.set(cacheKey, tokens);\n  }\n  return tokens;\n};\n\n/**\n * High-level method that is used to render the given `template` with\n * the given `view`.\n *\n * The optional `partials` argument may be an object that contains the\n * names and templates of partials that are used in the template. It may\n * also be a function that is used to load partial templates on the fly\n * that takes a single argument: the name of the partial.\n *\n * If the optional `config` argument is given here, then it should be an\n * object with a `tags` attribute or an `escape` attribute or both.\n * If an array is passed, then it will be interpreted the same way as\n * a `tags` attribute on a `config` object.\n *\n * The `tags` attribute of a `config` object must be an array with two\n * string values: the opening and closing tags used in the template (e.g.\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n *\n * The `escape` attribute of a `config` object must be a function which\n * accepts a string as input and outputs a safely escaped string.\n * If an `escape` function is not provided, then an HTML-safe string\n * escaping function is used as the default.\n */\nWriter.prototype.render = function render (template, view, partials, config) {\n  var tags = this.getConfigTags(config);\n  var tokens = this.parse(template, tags);\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\n  return this.renderTokens(tokens, context, partials, template, config);\n};\n\n/**\n * Low-level method that renders the given array of `tokens` using\n * the given `context` and `partials`.\n *\n * Note: The `originalTemplate` is only ever used to extract the portion\n * of the original template that was contained in a higher-order section.\n * If the template doesn't use higher-order sections, this argument may\n * be omitted.\n */\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n  var buffer = '';\n\n  var token, symbol, value;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    value = undefined;\n    token = tokens[i];\n    symbol = token[0];\n\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n    else if (symbol === '&') value = this.unescapedValue(token, context);\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\n    else if (symbol === 'text') value = this.rawValue(token);\n\n    if (value !== undefined)\n      buffer += value;\n  }\n\n  return buffer;\n};\n\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n  var self = this;\n  var buffer = '';\n  var value = context.lookup(token[1]);\n\n  // This function is used to render an arbitrary template\n  // in the current context by higher-order sections.\n  function subRender (template) {\n    return self.render(template, context, partials, config);\n  }\n\n  if (!value) return;\n\n  if (isArray(value)) {\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n    }\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n  } else if (isFunction(value)) {\n    if (typeof originalTemplate !== 'string')\n      throw new Error('Cannot use higher-order sections without the original template');\n\n    // Extract the portion of the original template that the section contains.\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n    if (value != null)\n      buffer += value;\n  } else {\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n  }\n  return buffer;\n};\n\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n  var value = context.lookup(token[1]);\n\n  // Use JavaScript's definition of falsy. Include empty arrays.\n  // See https://github.com/janl/mustache.js/issues/186\n  if (!value || (isArray(value) && value.length === 0))\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\n};\n\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n  var partialByNl = partial.split('\\n');\n  for (var i = 0; i < partialByNl.length; i++) {\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n      partialByNl[i] = filteredIndentation + partialByNl[i];\n    }\n  }\n  return partialByNl.join('\\n');\n};\n\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n  if (!partials) return;\n  var tags = this.getConfigTags(config);\n\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n  if (value != null) {\n    var lineHasNonSpace = token[6];\n    var tagIndex = token[5];\n    var indentation = token[4];\n    var indentedValue = value;\n    if (tagIndex == 0 && indentation) {\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n    }\n    var tokens = this.parse(indentedValue, tags);\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\n  }\n};\n\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return value;\n};\n\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\n  var escape = this.getConfigEscape(config) || mustache.escape;\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n};\n\nWriter.prototype.rawValue = function rawValue (token) {\n  return token[1];\n};\n\nWriter.prototype.getConfigTags = function getConfigTags (config) {\n  if (isArray(config)) {\n    return config;\n  }\n  else if (config && typeof config === 'object') {\n    return config.tags;\n  }\n  else {\n    return undefined;\n  }\n};\n\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\n  if (config && typeof config === 'object' && !isArray(config)) {\n    return config.escape;\n  }\n  else {\n    return undefined;\n  }\n};\n\nvar mustache = {\n  name: 'mustache.js',\n  version: '4.2.0',\n  tags: [ '{{', '}}' ],\n  clearCache: undefined,\n  escape: undefined,\n  parse: undefined,\n  render: undefined,\n  Scanner: undefined,\n  Context: undefined,\n  Writer: undefined,\n  /**\n   * Allows a user to override the default caching strategy, by providing an\n   * object with set, get and clear methods. This can also be used to disable\n   * the cache by setting it to the literal `undefined`.\n   */\n  set templateCache (cache) {\n    defaultWriter.templateCache = cache;\n  },\n  /**\n   * Gets the default or overridden caching object from the default writer.\n   */\n  get templateCache () {\n    return defaultWriter.templateCache;\n  }\n};\n\n// All high-level mustache.* functions use this writer.\nvar defaultWriter = new Writer();\n\n/**\n * Clears all cached templates in the default writer.\n */\nmustache.clearCache = function clearCache () {\n  return defaultWriter.clearCache();\n};\n\n/**\n * Parses and caches the given template in the default writer and returns the\n * array of tokens it contains. Doing this ahead of time avoids the need to\n * parse templates on the fly as they are rendered.\n */\nmustache.parse = function parse (template, tags) {\n  return defaultWriter.parse(template, tags);\n};\n\n/**\n * Renders the `template` with the given `view`, `partials`, and `config`\n * using the default writer.\n */\nmustache.render = function render (template, view, partials, config) {\n  if (typeof template !== 'string') {\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\n                        'argument for mustache#render(template, view, partials)');\n  }\n\n  return defaultWriter.render(template, view, partials, config);\n};\n\n// Export the escaping function so that the user may override it.\n// See https://github.com/janl/mustache.js/issues/244\nmustache.escape = escapeHtml;\n\n// Export these mainly for testing, but also for advanced usage.\nmustache.Scanner = Scanner;\nmustache.Context = Context;\nmustache.Writer = Writer;\n\nexport default mustache;\n", "import { Platform } from '@srclaunch/types';\n\nexport const getESLintConfigTemplate = ({\n  platform,\n  tsconfigPath,\n}: {\n  readonly platform?: Platform;\n  readonly tsconfigPath?: string;\n}) => `\nconst base = require('@srclaunch/dx/.eslintrc.${\n  platform ? `${platform}.` : ''\n}cjs');\n\nmodule.exports = {\n  ...base,\n  ${\n    tsconfigPath\n      ? `parserOptions: { ...base.parserOptions, project: '${tsconfigPath}' },`\n      : ''\n  };\n};`;\n", "export const getPrettierConfigTemplate = () => `\nconst base = require('@srclaunch/dx/.prettierrc.cjs');\n\nmodule.exports = {\n  ...base,\n};`;\n", "export const getPrettierIgnoreTemplate = ({\n  paths,\n}: {\n  readonly paths: ReadonlyArray<string>;\n}) => paths.join('\\n');\n", "export const getStyleLintConfigTemplate = () => `\nimport base from '@srclaunch/dx/.stylelintrc.mjs';\n\nexport default {\n  ...base,\n};`;\n", "export const getTurboConfigTemplate = () => `\n{\n  \"$schema\": \"https://turborepo.org/schema.json\",\n  \"baseBranch\": \"origin/main\",\n  \"pipeline\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"test\": {\n      \"dependsOn\": [\"build\"],\n      \"outputs\": [],\n      \"inputs\": [\"src/**/*.tsx\", \"src/**/*.ts\"]\n    },\n    \"release\": {\n      \"dependsOn\": [\"build\", \"test\"],\n      \"outputs\": []\n    },\n    \"release:local\": {\n      \"dependsOn\": [\"build\", \"test\"],\n      \"outputs\": []\n    },\n    \"deploy\": {\n      \"dependsOn\": [\"release\"],\n      \"outputs\": []\n    },\n    \"deploy:local\": {\n      \"cache\": false,\n      \"dependsOn\": [\"release:local\"],\n      \"outputs\": []\n    }\n  }\n}`;\n", "export const getTypeScriptConfigTemplate = () => `\n{\n  \"extends\": \"@srclaunch/dx/tsconfig.json\",\n  \"include\": [\n    \"./.eslintrc.cjs\",\n    \"**/*.ts\",\n    \"**/*.tsx\",\n  ]\n}`;\n", "export const getGitIgnoreTemplate = ({\n  paths,\n}: {\n  readonly paths: ReadonlyArray<string>;\n}) => paths.join('\\n');\n", "export const getPackageConfigTemplate = ({\n  owner,\n  name,\n  description,\n}: {\n  readonly description?: string;\n  readonly name: string;\n  readonly owner?: string;\n}) => `\n{\n  \"name\": \"@${owner}/${name}\",\n  \"description\": \"${description}\",\n  \"version\": \"0.0.1\",\n  \"engines\": {\n    \"node\": \">=16\",\n    \"pnpm\": \">=7.6.0\"\n  },\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"turbo run build --color\",\n    \"build:models\": \"srclaunch models build\",\n    \"deploy\": \"turbo run deploy --color --concurrency=1\",\n    \"dev\": \"srclaunch dev\",\n    \"release\": \"turbo run release --color --concurrency=2\",\n    \"test\": \"turbo run test --color --concurrency=2\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/${owner}/${name}.git\"\n  },\n  \"packageManager\": \"pnpm@7.6.0\",\n  \"pnpm\": {\n    \"packageExtensions\": {\n      \"eslint-plugin-flowtype\": {\n        \"peerDependenciesMeta\": {\n          \"@babel/plugin-syntax-flow\": {\n            \"optional\": true\n          },\n          \"@babel/plugin-transform-react-jsx\": {\n            \"optional\": true\n          }\n        }\n      }\n    },\n    \"peerDependencyRules\": {\n      \"allowAny\": [\n        \"eslint\"\n      ]\n    }\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^17.0.3\",\n    \"@commitlint/config-conventional\": \"^17.0.3\",\n    \"@microsoft/eslint-plugin-sdl\": \"^0.2.0\",\n    \"@srclaunch/cli\": \"^1.0.0\",\n    \"@srclaunch/dx\": \"^1.0.0\",\n    \"@srclaunch/types\": \"^1.0.0\",\n    \"@types/node\": \"^18.6.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.31.0\",\n    \"@typescript-eslint/parser\": \"^5.31.0\",\n    \"babel-plugin-styled-components\": \"^2.0.7\",\n    \"eslint\": \"^8.20.0\",\n    \"eslint-config-prettier\": \"^8.5.0\",\n    \"eslint-config-react-app\": \"^7.0.1\",\n    \"eslint-config-stylelint\": \"^15.1.0\",\n    \"eslint-import-resolver-typescript\": \"^3.3.0\",\n    \"eslint-plugin-better-styled-components\": \"^1.1.2\",\n    \"eslint-plugin-eslint-comments\": \"^3.2.0\",\n    \"eslint-plugin-functional\": \"^4.2.2\",\n    \"eslint-plugin-github\": \"^4.3.7\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-jest\": \"^26.6.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.6.1\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-only-warn\": \"^1.0.3\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"eslint-plugin-react\": \"^7.30.1\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-regexp\": \"^1.8.0\",\n    \"eslint-plugin-simple-import-sort\": \"^7.0.0\",\n    \"eslint-plugin-sort-keys-fix\": \"^1.1.2\",\n    \"eslint-plugin-sort-requires\": \"^2.1.0\",\n    \"eslint-plugin-testing-library\": \"^5.5.1\",\n    \"eslint-plugin-tsdoc\": \"^0.2.16\",\n    \"eslint-plugin-typescript-sort-keys\": \"^2.1.0\",\n    \"eslint-plugin-unicorn\": \"^43.0.2\",\n    \"prettier\": \"^2.7.1\",\n    \"stylelint\": \"^14.9.1\",\n    \"stylelint-config-idiomatic-order\": \"^8.1.0\",\n    \"stylelint-config-prettier\": \"^9.0.3\",\n    \"stylelint-config-recommended\": \"^8.0.0\",\n    \"stylelint-config-styled-components\": \"^0.1.1\",\n    \"stylelint-order\": \"^5.0.0\",\n    \"turbo\": \"^1.3.4\",\n    \"typescript\": \"^4.7.4\"\n  }\n}`;\n", "export const getChangeLogTemplate = () => `\n# Changelog`;\n", "export const getLicenseTemplate = () => `\nMIT License`;\n", "export const getReadmeTemplate = ({\n  name,\n  owner,\n}: {\n  readonly name: string;\n  readonly owner?: string;\n}) => `# ${owner ? `@${owner}/` : ''}${name}`;\n", "export const getSrcLaunchWorkspaceConfigTemplate = ({\n  owner,\n  name,\n}: {\n  readonly name: string;\n  readonly owner?: string;\n}) => `\nimport { WorkspaceConfig } from '@srclaunch/types';\n\nexport default <WorkspaceConfig>{\n  name: '${name}',\n  owner: '${owner}',\n  projects: {},\n  sdk: {\n    coreApi: {\n      name: '@${owner}/${name}-core-api-sdk',\n      path: 'sdk/core-api',\n      environments: {\n        development: {\n          host: 'localhost',\n          port: 3000,\n          protocol: 'http',\n        }\n      }\n    },\n    dataClient: {\n      name: '@${owner}/${name}-data-client-sdk',\n      path: 'sdk/data-client',\n    },\n    exceptions: {\n      name: '@${owner}/${name}-exceptions-sdk',\n      path: 'sdk/exceptions',\n    },\n    httpClient: {\n      name: '@${owner}/${name}-http-client-sdk',\n      path: 'sdk/http-client',\n    },\n    models: {\n      name: '@${owner}/${name}-models-sdk',\n      path: 'sdk/models',\n    },\n    reduxStore: {\n      name: '@${owner}/${name}-redux-store-sdk',\n      path: 'sdk/redux-store',\n    },\n    rtkQueryApi: {\n      name: '@${owner}/${name}-rtk-query-api-sdk',\n      path: 'sdk/rtk-query-api',\n    },\n    rtkSlices: {\n      name: '@${owner}/${name}-rtk-slices-sdk',\n      path: 'sdk/rtk-slices',\n    },\n    sequelizeModels: {\n      name: '@${owner}/${name}-sequelize-models-sdk',\n      path: 'sdk/sequelize-models',\n    },\n    types: {\n      name: '@${owner}/${name}-types-sdk',\n      path: 'sdk/types',\n    },\n  },\n};\n\n`;\n", "export const getPnpmWorkspaceConfigTemplate = ({\n  paths,\n}: {\n  readonly paths: ReadonlyArray<string>;\n}) =>\n  `packages:\n    ${paths.map(path => `- ${path}`).join('\\n')}\n`;\n", "import { Platform, Primitives } from '@srclaunch/types';\n\nimport { CodeGenWorkflow } from '../../../codegen';\nimport {\n  getGitHubActionTemplate,\n  GitHubActionRunnerOS,\n  GitHubActionTrigger,\n} from '../../../templates/ci-cd/github-action';\nimport { getEditorConfigTemplate } from '../../../templates/dx/editor-config';\nimport { getESLintConfigTemplate } from '../../../templates/dx/eslint-config';\nimport { getESLintIgnoreTemplate } from '../../../templates/dx/eslint-ignore';\nimport { getPrettierConfigTemplate } from '../../../templates/dx/prettier-config';\nimport { getPrettierIgnoreTemplate } from '../../../templates/dx/prettier-ignore';\nimport { getStyleLintConfigTemplate } from '../../../templates/dx/stylelint-config';\nimport { getTurboConfigTemplate } from '../../../templates/dx/turbo-config';\nimport { getTypeScriptConfigTemplate } from '../../../templates/dx/typescript-config';\nimport { getTypescriptTypeDefinitionTemplate } from '../../../templates/dx/typescript-type-definition';\nimport { getGitIgnoreTemplate } from '../../../templates/package/gitignore';\nimport { getPackageConfigTemplate } from '../../../templates/package/package-config';\nimport { getChangeLogTemplate } from '../../../templates/project/changelog';\nimport { getLicenseTemplate } from '../../../templates/project/license';\nimport { getReadmeTemplate } from '../../../templates/project/readme';\nimport { getSrcLaunchModelTemplate } from '../../../templates/srclaunch/model';\nimport { getSrcLaunchWorkspaceConfigTemplate } from '../../../templates/srclaunch/workspace-config';\nimport { getPnpmWorkspaceConfigTemplate } from '../../../templates/workspace/pnpm-workspace';\n\ninterface SrcLaunchWorkspaceGeneratorOptions {\n  readonly description?: string;\n  readonly name: string;\n  readonly owner?: string;\n}\n\nexport class SrcLaunchWorkspaceGenerator extends CodeGenWorkflow {\n  public constructor(options: SrcLaunchWorkspaceGeneratorOptions) {\n    super();\n\n    const { description, name, owner } = options;\n\n    this.createDirectory('.github')\n      .createDirectory('.github/workflows')\n      .addFile(\n        './.github/workflows/ci.yml',\n        getGitHubActionTemplate({\n          jobs: {\n            publish: {\n              name: 'Publish packages',\n              runsOn: GitHubActionRunnerOS.UbuntuLatest,\n              steps: [\n                {\n                  name: 'Setup CI/CD environment',\n                  uses: 'srclaunch/core/packages/ci-cd/.github/actions/setup@main',\n                  with: {\n                    turbo_team: '${{ secrets.TURBO_TEAM }}',\n                    turbo_token: '${{ secrets.TURBO_TOKEN }}',\n                  },\n                },\n                {\n                  name: 'Deploy',\n                  uses: 'srclaunch/core/packages/ci-cd/.github/actions/deploy@main',\n                  with: {\n                    github_token: '${{ secrets.GITHUB_TOKEN }}',\n                    npm_token: '${{ secrets.NPM_ACCESS_TOKEN }}',\n                    turbo_team: '${{ secrets.TURBO_TEAM }}',\n                    turbo_token: '${{ secrets.TURBO_TOKEN }}',\n                  },\n                },\n              ],\n            },\n          },\n          name: 'Release packages',\n          trigger: {\n            branches: ['main'],\n            on: GitHubActionTrigger.Push,\n          },\n        }),\n      )\n      .createDirectory('apps')\n      .createDirectory('exceptions')\n      .createDirectory('media')\n      .createDirectory('models')\n      .addFile(\n        './models/Todo.ts',\n        getSrcLaunchModelTemplate({\n          fields: {\n            completed: {\n              label: 'Completed',\n              type: Primitives.String,\n            },\n            name: {\n              label: 'Name',\n              type: Primitives.String,\n            },\n          },\n          name: 'Todo',\n        }),\n      )\n      .createDirectory('sdk')\n      .createDirectory('services')\n      .createDirectory('types')\n      .addFile(\n        './types/todo.ts',\n        getTypescriptTypeDefinitionTemplate({\n          fields: {\n            completed: 'boolean',\n            name: 'string',\n          },\n          name: 'Todo',\n        }),\n      )\n      .addFile('.editorconfig', getEditorConfigTemplate())\n      .addFile(\n        '.eslintignore',\n        getESLintIgnoreTemplate({\n          paths: [\n            'node_modules/**',\n            'coverage/**',\n            'dist/**',\n            'docs',\n            'release',\n            '*.hbs',\n            '.next/**',\n            '.turbo/**',\n            '.tsbuildinfo',\n          ],\n        }),\n      )\n      .addFile(\n        '.eslintrc.cjs',\n        getESLintConfigTemplate({ platform: Platform.Universal }),\n      )\n      .addFile(\n        '.gitignore',\n        getGitIgnoreTemplate({\n          paths: [\n            '.env',\n            '.DS_Store',\n            '**/coverage/',\n            '**/dist/',\n            'node_modules/',\n            '**/node_modules/',\n            '.pnpm-debug.log',\n            '.turbo',\n          ],\n        }),\n      )\n      .addFile(\n        '.prettierignore',\n        getPrettierIgnoreTemplate({\n          paths: [\n            '.cache/**',\n            '.husky/**',\n            '.next/**',\n            '.turbo/**',\n            'node_modules',\n            'coverage/**',\n            'dist/**',\n            'docs/**',\n            'node_modules/**',\n            'pnpm-lock.yaml',\n          ],\n        }),\n      )\n      .addFile('.prettierrc.cjs', getPrettierConfigTemplate())\n      .addFile(\n        '.srclaunchrc.ts',\n        getSrcLaunchWorkspaceConfigTemplate({ name, owner }),\n      )\n      .addFile('.stylelintrc.js', getStyleLintConfigTemplate())\n      .addFile('CHANGELOG.md', getChangeLogTemplate())\n      // .addFile('commitlint.config.cjs', '')\n      .addFile('LICENSE', getLicenseTemplate())\n      .addFile(\n        'package.json',\n        getPackageConfigTemplate({\n          description,\n          name,\n          owner,\n        }),\n      )\n      .addFile(\n        'pnpm-workspace.yaml',\n        getPnpmWorkspaceConfigTemplate({\n          paths: ['apps/**', 'packages/**', 'sdk/**', 'services/**'],\n        }),\n      )\n      .addFile('tsconfig.json', getTypeScriptConfigTemplate())\n      .addFile('turbo.json', getTurboConfigTemplate())\n      .addFile('README.md', getReadmeTemplate({ name, owner }));\n  }\n}\n", "export enum GitHubActionTrigger {\n  PullRequest = 'pull_request',\n  Push = 'push',\n  Release = 'release',\n}\n\nexport enum GitHubActionRunnerOS {\n  UbuntuLatest = 'ubuntu-latest',\n}\n\nexport interface GitHubActionJobStep {\n  readonly name: string;\n  readonly run?: string;\n  readonly uses?: string;\n  readonly with?: Record<string, string>;\n}\nexport const getGitHubActionTemplate = ({\n  name,\n  jobs,\n  trigger,\n}: {\n  readonly jobs: Record<\n    string,\n    {\n      readonly name: string;\n      readonly runsOn?: GitHubActionRunnerOS;\n      readonly steps: ReadonlyArray<GitHubActionJobStep>;\n    }\n  >;\n  readonly name: string;\n  readonly trigger: {\n    readonly branches: ReadonlyArray<string>;\n    readonly on: GitHubActionTrigger;\n  };\n}) => `name: ${name}\n\non:\n  ${trigger.on}:\n    branches:\n      ${trigger.branches.map(branch => `- ${branch}`).join('\\n')}\n\nconcurrency:\n  group: publish-\\${{ github.ref }}-1\n  cancel-in-progress: true\n\njobs:\n  ${Object.keys(jobs).map((jobName, index) => {\n    const job = jobs[jobName];\n\n    return `${jobName}:\n    name: ${job?.name}\n    runs-on: ${job?.runsOn ?? GitHubActionRunnerOS.UbuntuLatest}\n\n    steps:\n${job?.steps\n  ?.map(step => {\n    const stepName = step.name;\n    const stepRun = step.run;\n    const stepUses = step.uses;\n    const stepWith = step.with;\n\n    return `      - name: ${stepName}\n        ${stepRun ? `run: ${stepRun}` : ''}${\n      stepUses ? `uses: ${stepUses}` : ''\n    }\n${\n  stepWith\n    ? `        with:\n${Object.keys(stepWith)\n  .map(key => `          ${key}: ${stepWith[key]}`)\n  .join('\\n')}`\n    : ''\n}\n        `;\n  })\n  .join('\\n')}`;\n  })}\n    `;\n", "export const getEditorConfigTemplate = () => `\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{js,json,yml}]\ncharset = utf-8\nindent_style = space\nindent_size = 2`;\n", "export const getESLintIgnoreTemplate = ({\n  paths,\n}: {\n  readonly paths: ReadonlyArray<string>;\n}) => paths.join('\\n');\n", "export const getTypescriptTypeDefinitionTemplate = ({\n  fields,\n  name,\n}: {\n  readonly fields: Record<string, unknown>;\n  readonly name: string;\n}) => `\nexport interface ${name} {\n  ${Object.keys(fields).map(fieldName => {\n    return `${fieldName}: ${fields[fieldName]};`;\n  })}\n}\n`;\n", "import { ModelField } from '@srclaunch/types';\n\nexport const getSrcLaunchModelTemplate = ({\n  fields,\n  name,\n}: {\n  readonly fields: Record<string, ModelField>;\n  readonly name: string;\n}) => `\nimport { ModelProps, Primitives } from '@srclaunch/types';\n\nexport const ${name}: ModelProps = {\n  fields: {\n    ${Object.keys(fields).map(fieldName => {\n      const field = fields[fieldName]!;\n\n      return `${fieldName}: {\n      label: '${field.label}',\n      type: Primitives.${field.type},\n    },`;\n    })}\n  },\n  name: '${name}',\n};\n\n`;\n", "import {\n  DeploymentOptions,\n  DeploymentPlatform,\n  ProjectConfig,\n} from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\n\nimport { Command } from '../lib/command';\nimport { deployToGitHubPages } from '../lib/deploy/github-pages';\nimport { InteractiveModeFlag } from '../lib/flags';\n\ntype DeployFlags = TypedFlags<{\n  readonly ci: {\n    readonly alias: 'c';\n    readonly default: true;\n    readonly description: 'Bypasses the CI checks';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly debug: {\n    readonly alias: 'd';\n    readonly default: false;\n    readonly description: 'Runs a dry run of the release process';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly dryRun: {\n    readonly alias: 'dry-run';\n    readonly default: false;\n    readonly description: 'Runs a dry run of the release process';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly push: {\n    readonly alias: 'p';\n    readonly default: false;\n    readonly description: 'Pushes changes to remote repository';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n}>;\nexport default new Command<ProjectConfig, DeployFlags>({\n  description: 'Commands for deploying applications and services',\n  name: 'deploy',\n  run: async ({\n    config,\n  }: // flags,\n  {\n    readonly config: ProjectConfig;\n    readonly flags: DeployFlags;\n  }) => {\n    const deploymentConfig = config.release?.deployment as\n      | DeploymentOptions\n      | DeploymentOptions[];\n\n    if (!deploymentConfig) {\n      throw new Error('Missing deployment configuration');\n    }\n\n    if (\n      typeof deploymentConfig === 'object' &&\n      !Array.isArray(deploymentConfig)\n    ) {\n      const { platform, input, output } = deploymentConfig;\n\n      switch (platform) {\n        case DeploymentPlatform.GitHubPages:\n          await deployToGitHubPages({\n            input,\n            output,\n          });\n          break;\n      }\n    } else if (Array.isArray(deploymentConfig)) {\n      const options = deploymentConfig as DeploymentOptions[];\n      for (const deployment of options) {\n        const { platform, input, output } = deployment;\n\n        switch (platform) {\n          case DeploymentPlatform.GitHubPages:\n            await deployToGitHubPages({\n              input,\n              output,\n            });\n            break;\n        }\n      }\n    }\n  },\n});\n", "import { DeploymentOptions } from '@srclaunch/types';\nimport { publish } from 'gh-pages';\nimport pc from 'picocolors';\n\nexport async function deployToGitHubPages({\n  input,\n  output,\n}: DeploymentOptions): Promise<void> {\n  try {\n    await publish(input?.directory ?? '.', {\n      add: !output?.clean ?? true,\n      branch: output?.branch ?? 'gh-pages',\n      dest: output?.path ?? '.',\n      message:\n        output?.commitMessage ?? 'chore(docs): deploying to github pages',\n      repo: output?.repo,\n    });\n\n    console.log(`${pc.green('\u2714 deployed to GitHub Pages')} `);\n  } catch {\n    console.error(`${pc.red('\u2716 failed to deploy to GitHub Pages')} `);\n  }\n}\n", "/* eslint-disable unicorn/prevent-abbreviations */\nimport { WorkspaceConfig } from '@srclaunch/types';\nimport chokidar from 'chokidar';\nimport fs from 'fs-extra';\nimport { globby } from 'globby';\nimport { render } from 'ink';\nimport { TypedFlags } from 'meow';\nimport { watch } from 'node:fs/promises';\nimport path from 'node:path';\nimport React from 'react';\nimport tsNodeDev from 'ts-node';\nimport { Package } from 'update-notifier';\n\nimport { AppContainer } from '../containers/AppContainer';\nimport { DevelopmentContainer } from '../containers/DevelopmentContainer';\nimport { Command, CommandType } from '../lib/command';\nimport { ComponentLibraryDocsGenerator } from '../lib/docs/generate';\nimport { InteractiveModeFlag, InteractiveModeFlagType } from '../lib/flags';\n\ntype DevelopmentFlags = TypedFlags<InteractiveModeFlagType>;\n\n/*\n           // await runVite({\n            //   environment: Environments.Development,\n            //   project: config,\n            //   ...options,\n            // });\n          \n            */\n\nexport default new Command<\n  WorkspaceConfig & { readonly package: Package },\n  DevelopmentFlags\n>({\n  description: 'Start development mode environment',\n  name: 'dev',\n  run: async ({ config, flags }) => {\n    try {\n      if (flags.interactive) {\n        const { waitUntilExit } = render(\n          <DevelopmentContainer config={config} />,\n        );\n        await waitUntilExit();\n      }\n    } catch (error: unknown) {\n      console.error(error);\n      process.exit(1);\n    }\n  },\n  type: CommandType.Project,\n});\n", "import { ProjectConfig, ProjectType, WorkspaceConfig } from '@srclaunch/types';\nimport { globby } from 'globby';\nimport { Box, Newline, Spacer, Static, Text, useInput } from 'ink';\nimport { Flag, FlagType, TypedFlags } from 'meow';\nimport path from 'node:path/win32';\nimport { Worker } from 'node:worker_threads';\nimport { useEffect, useState } from 'react';\n// import { Tab, Tabs } from './Tabs';\nimport { loadConfig } from 'unconfig';\nimport { Package } from 'update-notifier';\n\nimport Button from '../components/Button';\n// import MultiSelect from 'ink-multi-select';\n// import { getAppLabMetadata } from '../applab';\n// import { startThread } from '../worker-thread';\nimport { FullScreen } from '../components/FullScreen';\nimport { Scrollable } from '../components/Scrollable';\nimport StatusButton from '../components/StatusButton';\nimport { Tab, Tabs } from '../components/Tabs';\nimport { loadSrcLaunchConfig } from '../lib/config';\nimport { runProject } from '../lib/runners';\nimport { Build } from '../pages/Build';\nimport { Changes } from '../pages/Changes';\nimport { Overview } from '../pages/Overview';\nimport { Release } from '../pages/Release';\nimport { Tests } from '../pages/Tests';\nimport { AppContainer } from './AppContainer';\n\ntype AppContainerProps<T = Record<string, Flag<FlagType, unknown>>> =\n  React.PropsWithChildren<{\n    readonly config: WorkspaceConfig & {\n      readonly package: Package;\n    };\n    readonly initialTab?: string;\n  }>;\n\nexport enum RunStatus {\n  Error = 'error',\n  Idle = 'idle',\n  Running = 'running',\n  Starting = 'starting',\n  Stopped = 'stopped',\n}\n\ntype RunnableProject = {\n  readonly config: ProjectConfig;\n  readonly name: string;\n  readonly path: string;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  status?: RunStatus;\n};\nexport const DevelopmentContainer = ({\n  children,\n  config,\n  initialTab = 'Overview',\n}: AppContainerProps) => {\n  const [mainOutput, setMainOutput] = useState<string[]>([]);\n  const [serviceStatus, setServiceStatus] = useState<string | undefined>();\n  const [runnableApps, setRunnableApps] = useState<Array<RunnableProject>>([]);\n  const [runnableServices, setRunnableServices] = useState<\n    Array<RunnableProject>\n  >([]);\n  const coreApiStatus = RunStatus.Idle;\n\n  // useInput(async (input, key) => {\n  //   if (input === 'q') {\n  //     addToLogs('Quitting');\n\n  //     throw new Error('Quitting');\n  //     // Exit program\n  //   }\n\n  //   // if (input === \"r\") {\n  //   //   console.info(\"Restarting\");\n  //   //   await restart();\n  //   //   process.exit(0);\n  //   //   // Exit program\n  //   // }\n\n  //   if (key.leftArrow) {\n  //     // Left arrow key pressed\n  //   }\n  // });\n\n  const addToLogs = (string_: string) => {\n    setMainOutput(currentState => [...currentState, string_]);\n  };\n\n  // useInput(async (input, key) => {\n  //   if (input === 'q') {\n  //     addToLogs('Quitting');\n\n  //     throw new Error('Quitting');\n  //     // Exit program\n  //   }\n\n  //   // if (input === \"r\") {\n  //   //   console.info(\"Restarting\");\n  //   //   await restart();\n  //   //   process.exit(0);\n  //   //   // Exit program\n  //   // }\n\n  //   if (key.leftArrow) {\n  //     // Left arrow key pressed\n  //   }\n  // });\n\n  // useEffect(() => {\n  //   setMainScrollCursor(m => (m += 1));\n  // }, [mainOutput.length]);\n\n  const start = async () => {\n    // if (config.sdk.coreApi) {\n    //   const nodeRunner = new NodeRunner({\n    //     script: `${config.sdk.coreApi.path}/dist/index.esm.js`,\n    //   });\n    //   const result = await nodeRunner.run();\n    //   console.log(result);\n    // }\n\n    const apps = await globby('apps/*/.srclaunchrc.ts', {\n      absolute: true,\n      cwd: process.cwd(),\n    });\n\n    for (const app of apps) {\n      const appConfig = (await loadSrcLaunchConfig(\n        app.replace('/.srclaunchrc.ts', ''),\n      )) as ProjectConfig;\n\n      setRunnableApps(currentState => [\n        ...currentState,\n        {\n          config: appConfig,\n          name: appConfig.name,\n          path: app.replace('/.srclaunchrc.ts', ''),\n          status: RunStatus.Idle,\n        },\n      ]);\n\n      addToLogs(`Loaded ${appConfig.name}`);\n      // if (appConfig.type === 'web-app') {\n      //   setRunnableApps(currentState => [\n      //     ...currentState,\n      //     {\n      //       config: appConfig,\n      //       name: appConfig.name,\n      //       path: path.dirname(app),\n      //     },\n      //   ]);\n      // }\n    }\n    const services = await globby('services/*/.srclaunchrc.ts', {\n      absolute: true,\n      cwd: process.cwd(),\n    });\n\n    for (const service of services) {\n      const serviceConfig = (await loadSrcLaunchConfig(\n        service.replace('/.srclaunchrc.ts', ''),\n      )) as ProjectConfig;\n\n      setRunnableServices(currentState => [\n        ...currentState,\n        {\n          config: serviceConfig,\n          name: serviceConfig.name,\n          path: service.replace('/.srclaunchrc.ts', ''),\n          status: RunStatus.Idle,\n        },\n      ]);\n\n      addToLogs(`Loaded ${serviceConfig.name}`);\n    }\n\n    const packages = await globby('packages/*/.srclaunchrc.ts', {\n      absolute: true,\n      cwd: process.cwd(),\n    });\n\n    // addToLogs('Initializing services...');\n    //\n    // const { name, type } = await getAppLabMetadata();\n    //\n    // setServiceStatus('starting');\n    // addToLogs(`Starting service ${name}...`);\n    //\n    // const thread: Worker = await startThread({\n    //   name,\n    //   type,\n    // });\n    //\n    // thread.on('online', () => {\n    //   addToLogs(`${name} worker online`);\n    // });\n    //\n    // thread.on('message', (message: string) => {\n    //   addToLogs(message);\n    // });\n    //\n    // thread.on('error', async (err: Error) => {\n    //   addToLogs(`ERROR: ${err.name}: ${err.message}`);\n    //\n    //   setServiceStatus('error');\n    // });\n    //\n    // thread.on('exit', async () => {\n    //   setServiceStatus('error');\n    // });\n    //\n    // setServiceStatus('started');\n    // addToLogs(`Service ${name} started`);\n\n    if (serviceStatus) {\n      addToLogs(serviceStatus);\n    }\n  };\n\n  useEffect(() => {\n    addToLogs(`SrcLaunch CLI v${config?.package.version}`);\n\n    start();\n  }, []);\n\n  const run = async (project: RunnableProject) => {\n    const result = await runProject({ config: project.config });\n\n    return true;\n  };\n\n  return (\n    <AppContainer>\n      <Tabs>\n        <Tab initial label=\"Overview\">\n          <Box flexGrow={1} flexDirection=\"column\">\n            <Box marginBottom={1}>\n              <StatusButton\n                label=\"Core API\"\n                status={coreApiStatus}\n                onSelect={() => {}}\n              />\n            </Box>\n\n            <Box flexDirection=\"column\" marginBottom={1}>\n              <Box>\n                <Text>Apps</Text>\n              </Box>\n              <Box>\n                {runnableApps.length > 0 ? (\n                  runnableApps.map((app, index) => (\n                    <StatusButton\n                      key={app.name}\n                      label={app.name}\n                      status={app.status}\n                      onSelect={async () => {\n                        setRunnableApps(currentState => {\n                          const newState = [...currentState];\n                          const appToRun = newState[index];\n\n                          if (!appToRun) {\n                            return currentState;\n                          }\n\n                          switch (appToRun.status) {\n                            case RunStatus.Idle: {\n                              run(app);\n                              appToRun.status = RunStatus.Starting;\n\n                              break;\n                            }\n                            case RunStatus.Starting: {\n                              appToRun.status = RunStatus.Stopped;\n\n                              break;\n                            }\n                            case RunStatus.Running: {\n                              appToRun.status = RunStatus.Stopped;\n\n                              break;\n                            }\n                            case RunStatus.Stopped: {\n                              appToRun.status = RunStatus.Starting;\n\n                              break;\n                            }\n                            // No default\n                          }\n\n                          newState[index] = appToRun;\n\n                          return newState;\n                        });\n                      }}\n                    />\n                  ))\n                ) : (\n                  <Text color=\"blackBright\">No apps found</Text>\n                )}\n              </Box>\n            </Box>\n\n            <Box flexDirection=\"column\">\n              <Box>\n                <Text>Services</Text>\n              </Box>\n              <Box>\n                {runnableServices.length > 0 ? (\n                  runnableServices.map(service => (\n                    <StatusButton\n                      key={service.name}\n                      label={service.name}\n                      status={service.status}\n                    />\n                  ))\n                ) : (\n                  <Text color=\"blackBright\">No services found</Text>\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Tab>\n        <Tab label=\"Logs\">\n          <Box\n            borderStyle=\"round\"\n            borderColor=\"blue\"\n            flexDirection=\"column\"\n            flexGrow={1}\n            // padding={1}\n            paddingLeft={1}\n          >\n            <Scrollable items={mainOutput} />\n            {/* <Box flexDirection=\"column\" flexGrow={1}>\n                <Text>\n                  Logs\n                  {/* items.length: {items.length} - lineCount: {lineCount} }\n                </Text>\n                {\n                mainOutput.map((line, index) => (\n                  <Text key={index}>{line}</Text>\n                ))\n                }\n              </Box> */}\n          </Box>\n        </Tab>\n        <Tab label=\"Settings\"></Tab>\n        {/* <Tab initial={initialTab === 'Build'} label=\"Build\">\n          <Build />\n        </Tab>\n        <Tab initial={initialTab === 'Tests'} label=\"Tests\">\n          <Tests />\n        </Tab>\n        <Tab initial={initialTab === 'Changes'} label=\"Changes\">\n          <Changes />\n        </Tab>\n        <Tab initial={initialTab === 'Release'} label=\"Release\">\n          <Release />\n        </Tab>  */}\n      </Tabs>\n    </AppContainer>\n  );\n};\n", "import { Box, DOMElement, measureElement, Text, useInput } from 'ink';\nimport { createRef, ReactElement, useEffect, useState } from 'react';\n\ntype ScrollableProps = { readonly items: readonly string[] };\n\nexport const Scrollable = ({ items }: ScrollableProps) => {\n  const [cursor, setCursor] = useState(0);\n  const [lineCount, setLineCount] = useState(0);\n  const [lines, setLines] = useState<\n    {\n      key: number;\n      message: string;\n      visible: boolean;\n    }[]\n  >([]);\n  const [isScrollable, setScrollable] = useState(false);\n  const [autoScroll, setAutoScroll] = useState(true);\n  const [scrollbarHeight, setScrollbarHeight] = useState(1);\n  const [scrollbarOffset, setScrollbarOffset] = useState(0);\n\n  useInput((input, key) => {\n    if (key.upArrow) {\n      if (cursor > 0) setCursor(cursor - 1);\n\n      setAutoScroll(cursor >= items.length - 1);\n    } else if (key.downArrow) {\n      if (lines.length > cursor + 1) setCursor(cursor + 1);\n\n      setAutoScroll(cursor >= items.length - 1);\n    }\n  });\n\n  const ref = createRef<DOMElement>();\n\n  useEffect(() => {\n    const height = Math.ceil((lineCount / lines.length) * 100);\n\n    setScrollbarHeight(height);\n\n    setScrollable(lines.length >= lineCount);\n  }, [lines.length, lineCount]);\n\n  useEffect(() => {\n    if (ref.current) {\n      const height = measureElement(ref.current)?.height;\n\n      setLineCount(height ?? 20);\n    }\n  }, [items]);\n\n  useEffect(() => {\n    if (ref.current) {\n      const height = measureElement(ref.current)?.height;\n\n      setLineCount(height ?? 20);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (lineCount) {\n      setLines(\n        items.map((message, k) => {\n          const alwaysVisible = k < lineCount && cursor < lineCount;\n\n          const visible =\n            alwaysVisible || (k <= cursor && k >= cursor - lineCount);\n\n          return {\n            key: k,\n            message,\n            visible,\n          };\n        }),\n      );\n    }\n  }, [items, cursor, lineCount]);\n\n  const getCursor = (index: number) => {\n    if (index === cursor) {\n      return '\u276F\\u00A0';\n    }\n\n    return '\\u00A0\\u00A0';\n  };\n\n  useEffect(() => {\n    if (autoScroll) setCursor(items.length - 1);\n  }, [items.length, autoScroll]);\n\n  useEffect(() => {\n    const offset = Math.floor((cursor / lines.length) * 100);\n\n    setScrollbarOffset(offset);\n  }, [cursor, lines.length]);\n\n  const getFormattedMessage = (message: string) => {\n    if (message.indexOf('src/') === 0) {\n      return <Text color={'magenta'}>{message}</Text>;\n    }\n    return <Text color={'lightGrey'}>{message}</Text>;\n  };\n\n  return (\n    <Box flexDirection={'row'} minHeight={'100%'} minWidth={'100%'}>\n      <Box flexDirection=\"column\" flexGrow={1} ref={ref}>\n        <Box flexDirection={'column'} flexGrow={1}>\n          {lines.map((line, index) => {\n            if (!line.visible) return;\n\n            return (\n              <Box key={index}>\n                <Text>{!line.visible && 'X '}</Text>\n                <Text>{getCursor(index)}</Text>\n                <Text>{getFormattedMessage(line.message.toString())}</Text>\n              </Box>\n            );\n          })}\n        </Box>\n      </Box>\n\n      {isScrollable && (\n        <Box\n          alignItems={'stretch'}\n          borderStyle={'round'}\n          flexGrow={0}\n          width={1}\n          minHeight={'100%'}\n          flexDirection={'column'}\n        >\n          <Box flexGrow={0} height={`${scrollbarOffset}%`} />\n          <Box\n            borderStyle={'round'}\n            flexGrow={0}\n            width={1}\n            height={`${scrollbarHeight}%`}\n            marginLeft={-1}\n          ></Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n", "import { Box, Text, useFocus, useFocusManager, useInput } from 'ink';\nimport { ReactElement, useEffect } from 'react';\n\nimport { RunStatus } from '../containers/DevelopmentContainer';\nimport Button, { ButtonProps } from './Button';\nimport { StatusOrb } from './StatusOrb';\n\ntype StatusButtonProps = ButtonProps & {\n  readonly status?: RunStatus;\n};\n\nconst StatusButton = ({ label, status, ...props }: StatusButtonProps) => {\n  return (\n    <Button\n      label={\n        <>\n          <StatusOrb status={status} /> {label} ({status})\n        </>\n      }\n      {...props}\n    />\n  );\n};\n\nexport default StatusButton;\n", "import { Box, Text, useFocus, useFocusManager, useInput } from 'ink';\nimport { ReactElement, useEffect } from 'react';\n\nimport { RunStatus } from '../containers/DevelopmentContainer';\n\nexport type ButtonProps = {\n  readonly backgroundColor?: string;\n  readonly label: ReactElement | string;\n  readonly onFocus?: () => unknown;\n  readonly onSelect?: () => unknown;\n  readonly textColor?: string;\n};\n\nconst Button = ({\n  backgroundColor,\n  label,\n  onSelect,\n  onFocus,\n  textColor,\n}: ButtonProps) => {\n  const { enableFocus, focusNext } = useFocusManager();\n  const { isFocused } = useFocus({});\n\n  useEffect(() => {\n    if (isFocused && onFocus) onFocus();\n  }, [isFocused, onFocus]);\n\n  useEffect(() => {\n    enableFocus();\n  }, [enableFocus]);\n\n  // useEffect(() => {\n  //   if (isFocused) {\n  //     focusNext();\n  //   }\n  // }, [isFocused, focusNext]);\n\n  useInput(async (input, key) => {\n    if (isFocused && key.return && onSelect) {\n      onSelect();\n    }\n  });\n\n  return (\n    <Box height={1}>\n      <Text\n        backgroundColor={backgroundColor ?? isFocused ? 'yellow' : undefined}\n        color={textColor ?? isFocused ? '#000000' : 'white'}\n        // bold={isFocused}\n      >\n        {label}\n      </Text>\n    </Box>\n  );\n};\n\nexport default Button;\n", "import { Text } from 'ink';\n\nimport { RunStatus } from '../containers/DevelopmentContainer';\n\ntype StatusOrbProps = {\n  readonly status?: RunStatus;\n};\n\nexport const StatusOrb = ({ status }: StatusOrbProps) => {\n  const getStatusOrbColor = () => {\n    switch (status) {\n      case RunStatus.Running:\n        return `#82d800`;\n      case RunStatus.Starting:\n        return `#ffcc00`;\n      case RunStatus.Error:\n      case RunStatus.Stopped:\n        return `#cc5222`;\n      case RunStatus.Idle:\n      default:\n        return `#aaaaaa`;\n    }\n  };\n\n  return <Text color={getStatusOrbColor()}>{'\u25CF '}</Text>;\n};\n", "import { Box, BoxProps, Text, useFocus, useFocusManager, useInput } from 'ink';\nimport {\n  Children,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\n\nimport Button from './Button';\n\ntype TabsProps = PropsWithChildren<BoxProps & { readonly title?: string }>;\n\nexport const Tabs = ({ children, title, ...props }: TabsProps) => {\n  const [activeTab, setActiveTab] = useState(0);\n  useEffect(() => {\n    // @ts-ignore\n    React.Children.forEach(children, (child: typeof Tab, index) => {\n      // @ts-ignore\n      if (child?.props?.initial) {\n        setActiveTab(index);\n      }\n    });\n  }, [children]);\n\n  return (\n    <Box flexGrow={1} flexDirection=\"column\" {...props}>\n      {/* Tab navigation */}\n      <Box flexDirection=\"row\" height={1}>\n        <Box paddingLeft={1} flexGrow={1}>\n          {/* @ts-ignore */}\n          {React.Children.map(children, (child: typeof Tab, index) => {\n            return (\n              <Box marginRight={2}>\n                <Button\n                  onSelect={() => setActiveTab(index)}\n                  // @ts-ignore\n                  label={child?.props?.label}\n                  // @ts-ignore\n                  status={child?.props?.status}\n                />\n              </Box>\n            );\n          })}\n        </Box>\n\n        {title && (\n          <Box alignItems=\"flex-end\" paddingRight={1}>\n            <Text>{title}</Text>\n          </Box>\n        )}\n      </Box>\n\n      {/* Tab content */}\n      <Box flexGrow={1} flexDirection=\"column\" padding={1} width=\"100%\">\n        {/* @ts-ignore */}\n        {React.Children.map(children, (child1: typeof Tab, index) => {\n          return (\n            <Box\n              display={activeTab === index ? 'flex' : 'none'}\n              flexDirection={'column'}\n            >\n              {Children.map(child1, child2 => {\n                return <>{child2}</>;\n              })}\n            </Box>\n          );\n        })}\n      </Box>\n    </Box>\n  );\n};\n\ntype TabProps = PropsWithChildren<{\n  readonly initial?: boolean;\n  readonly label: string;\n  readonly status?: string;\n}>;\n\nexport const Tab = ({ children }: TabProps): ReactElement => {\n  return <>{children}</>;\n};\n", "import {\n  ProjectConfig,\n  ProjectType,\n  SrcLaunchConfig,\n  WorkspaceConfig,\n} from '@srclaunch/types';\nimport { loadConfig } from 'unconfig';\n\nexport const loadSrcLaunchConfig = async <T = SrcLaunchConfig>(\n  basePath: string = process.cwd(),\n): Promise<SrcLaunchConfig> => {\n  const { config } = await loadConfig<SrcLaunchConfig>({\n    // if false, the only the first matched will be loaded\n    // if true, all matched will be loaded and deep merged\n    cwd: basePath,\n    merge: false,\n    sources: [\n      {\n        // default extensions\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n        files: ['.srclaunchrc', 'srclaunch.config'],\n      },\n\n      {\n        extensions: [],\n        files: 'package.json',\n        rewrite(cfg: { srclaunch?: SrcLaunchConfig }) {\n          return cfg?.srclaunch;\n        },\n      },\n    ],\n  });\n\n  const isProject = (config as ProjectConfig)?.type in ProjectType;\n\n  if (!isProject) {\n    return config as WorkspaceConfig;\n  }\n\n  return config as ProjectConfig;\n};\n", "import {\n  ComponentLibraryDocumentationConfig,\n  DevelopmentEnvironmentOptions,\n  EnvironmentType,\n  ProjectConfig,\n  ProjectType,\n  Runner,\n  WebApplicationOptions,\n} from '@srclaunch/types';\nimport chokidar from 'chokidar';\nimport { globby } from 'globby';\nimport path from 'node:path';\n\nimport { ComponentLibraryDocsGenerator } from '../docs/generate';\nimport { WebApplicationRunner } from './web-application/runner';\n\nexport async function runProject({\n  config,\n}: {\n  readonly config: ProjectConfig;\n}) {\n  switch (config.type) {\n    case ProjectType.ComponentLibrary:\n      {\n        const docOptions =\n          config.documentation as ComponentLibraryDocumentationConfig;\n\n        const inputDirectory = docOptions.generate?.input?.directory ?? 'src';\n\n        const componentMatches = await globby('**/*.tsx', {\n          cwd: inputDirectory,\n        });\n        const componentFiles = componentMatches.map(file =>\n          path.resolve(inputDirectory, file),\n        );\n        const markdownMatches = await globby('**/*.md', {\n          cwd: docOptions.generate?.input?.directory,\n        });\n        const markdownFiles = markdownMatches.map(file =>\n          path.resolve(inputDirectory, file),\n        );\n        const readmeFilePath = path.resolve(process.cwd(), 'README.md');\n\n        try {\n          const watcher = chokidar.watch(\n            [readmeFilePath, ...componentFiles, ...markdownFiles],\n            {\n              ignored: /(^|[/\\\\])\\../, // ignore dotfiles\n              persistent: true,\n            },\n          );\n\n          const runOptions = config.environments?.development\n            ?.run as DevelopmentEnvironmentOptions<WebApplicationOptions>;\n\n          const runner = new WebApplicationRunner({\n            environment: EnvironmentType.Development,\n            ...runOptions,\n          });\n\n          const documentGenerator = new ComponentLibraryDocsGenerator({\n            concurrency: 1,\n            ...docOptions.generate,\n            input: {\n              ...docOptions.generate?.input,\n            },\n            output: {\n              clean: false,\n              combined: false,\n              write: true,\n            },\n          });\n\n          // await documentGenerator.generate({});\n\n          await runner.run();\n\n          watcher\n            .on('add', async filePath => {\n              console.log(`File ${filePath} has been added`);\n            })\n            .on('change', async filePath => {\n              console.log(`File ${filePath} has been changed`);\n              await documentGenerator.generate({\n                match: [filePath],\n              });\n            })\n            .on('unlink', filePath =>\n              console.log(`File ${filePath} has been removed`),\n            );\n        } catch (error) {\n          console.error(error);\n          // if (error.name === 'AbortError') return;\n          throw error;\n        }\n\n        // const app = await runWebApplication({\n        //   environment: EnvironmentType.Development,\n        //   ...options,\n        // });\n        // } else {\n        //   await runWebApplication({\n        //     environment: EnvironmentType.Development,\n        //     ...devOptions.run,\n        //   });\n        // }\n      }\n      break;\n    case ProjectType.WebApplication:\n      {\n        const runOptions = config.environments?.development\n          ?.run as DevelopmentEnvironmentOptions<WebApplicationOptions>;\n\n        const runner = new WebApplicationRunner({\n          environment: EnvironmentType.Development,\n          ...runOptions,\n        });\n\n        await runner.run();\n      }\n      break;\n    default: {\n      const options = config.environments?.development?.run;\n\n      switch (options?.runner) {\n        case Runner.Vite:\n          {\n            // await runWebApplication({\n            //   environment: EnvironmentType.Development,\n            //   ...options,\n            // });\n            // const pagesDir = options.pagesDir ?? 'src/pages';\n            // const pagesPathExists = fs.existsSync(pagesDir);\n            // if (options.pagesDir) {\n            //   if (fs.existsSync(pagesDir)) {\n            //     if (pagesPathExists) {\n            //       const files = await fs.promises.readdir(pagesDir);\n            //       console.log(files);\n            //       console.log(`Found ${files.length} pages`);\n            //     }\n            //   } else {\n            //     const dir = prompt('Enter pages directory path');\n            //     if (dir) {\n            //       const files = await fs.promises.readdir(dir);\n            //       console.log(dir);\n            //       console.log(`Found ${dir.length} pages`);\n            //     }\n            //   }\n            // }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n", "import { ParserContext, TSDocParser } from '@microsoft/tsdoc';\nimport {\n  ComponentPropertyDefinition,\n  ComponentSpec,\n  Route,\n} from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport { globby } from 'globby';\nimport os from 'node:os';\nimport path from 'node:path';\nimport pc from 'picocolors';\nimport { parse } from 'react-docgen-typescript';\n\nexport interface DocsGeneratorOptions {\n  readonly concurrency?: number;\n  readonly input?: {\n    readonly directory?: string;\n  };\n  readonly output?: {\n    readonly clean?: boolean;\n    readonly combined?: boolean;\n    readonly directory?: string;\n    readonly write?: boolean;\n  };\n}\n\nexport interface ComponentLibraryDocsGeneratorOptions\n  extends DocsGeneratorOptions {\n  readonly match?: ReadonlyArray<string>;\n}\n\nexport class ComponentLibraryDocsGenerator {\n  private readonly concurrency: number = os.cpus().length;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private components: Array<ComponentSpec> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private componentFileMatch?: ReadonlyArray<string>;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private componentFiles: ReadonlyArray<string> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private componentGroups: Array<Array<string> | null> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private completedComponentGroups: Array<number> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private match?: ReadonlyArray<string>;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private markdownFiles: Array<string> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private routes: ReadonlyArray<Route> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private routeFileMatch?: ReadonlyArray<string>;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private routeGroups: Array<Array<string> | null> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private completedRouteGroups: Array<number> = [];\n  public readonly output: DocsGeneratorOptions['output'];\n  private readonly inputDirectory: string;\n\n  public constructor(options?: ComponentLibraryDocsGeneratorOptions) {\n    this.concurrency = options?.concurrency ?? this.concurrency;\n    this.inputDirectory = options?.input?.directory ?? 'src';\n    this.match = options?.match;\n    this.output = options?.output;\n    this.components = [];\n    this.routes = [];\n  }\n\n  private async init() {\n    const componentLibraryDocsDir = '.srclaunch/docs/component-library';\n    const componentDocsDir = path.join(componentLibraryDocsDir, 'components');\n    const componentDocsPath = path.join(\n      componentLibraryDocsDir,\n      `components.json`,\n    );\n    const routeDocsPath = path.join(componentLibraryDocsDir, 'routes.json');\n\n    this.components = [];\n    this.componentFiles = [];\n    this.markdownFiles = [];\n    this.routes = [];\n\n    if (this.output?.clean) {\n      await fs.emptyDir(componentLibraryDocsDir);\n    }\n\n    if (this.output?.write) {\n      await fs.ensureDir(path.resolve(componentDocsDir));\n      await fs.ensureFile(componentDocsPath);\n      await fs.ensureFile(path.resolve(routeDocsPath));\n    }\n\n    if (this.output?.write && this.output.combined && this.output.clean) {\n      await fs.writeFile(componentDocsPath, JSON.stringify({}, null, 2));\n      await fs.writeFile(routeDocsPath, JSON.stringify({}, null, 2));\n    }\n  }\n\n  private async getTsDoc(documentComment?: string) {\n    if (!documentComment) {\n      return;\n    }\n\n    const tsdocParser: TSDocParser = new TSDocParser();\n\n    // Analyze the input doc comment\n    const parserContext: ParserContext =\n      tsdocParser.parseString(documentComment);\n\n    // Check for any syntax errors\n    if (parserContext.log.messages.length > 0) {\n      throw new Error('Syntax error: ' + parserContext.log.messages[0]?.text);\n    }\n\n    console.log('parserContext', parserContext);\n    // Since \"@internal\" is a standardized tag and a \"modifier\", it is automatically\n    // added to the modifierTagSet:\n    // return parserContext.docComment.modifierTagSet.isInternal();\n  }\n\n  // private async _run(concurrencyGroup = 0) {\n  //   const cwd = process.cwd();\n\n  //   const componentFiles = this.componentGroups[concurrencyGroup] ?? [];\n\n  //   for (const file of componentFiles) {\n  //     // if (!file.includes('buttons/button.tsx')) {\n  //     //   continue;\n  //     // }\n\n  //     const fileName = file.split('/').pop() as string;\n  //     const filePath = file.split('/').slice(0, -1).join('/');\n  //     const hierarchy = path\n  //       .relative(path.join(cwd, this.inputDirectory), filePath)\n  //       .split('/');\n\n  //     console.log('fileName', fileName);\n  //     const docs = await parse(file, {\n  //       savePropValueAsString: true,\n  //       shouldExtractLiteralValuesFromEnum: true,\n  //       shouldExtractValuesFromUnion: true,\n  //     });\n\n  //     for (const document of docs) {\n  //       // console.log('doc.tags?.example', doc.tags?.example);\n  //       // const tsDoc = await this.getTsDoc(doc.tags?.example);\n  //       // console.log('tsDoc', tsDoc);\n\n  //       const markdownFileName = fileName.replace('.tsx', '.md');\n  //       const markdownFilePath = path.join(\n  //         path.join(cwd, this.inputDirectory),\n  //         markdownFileName,\n  //       );\n  //       const hasMarkdownFile = await fs.pathExists(markdownFilePath);\n  //       const markdownFile = hasMarkdownFile\n  //         ? await fs.readFile(markdownFilePath)\n  //         : undefined;\n  //       const markdownFileContent = markdownFile?.toString();\n\n  //       this.components = [\n  //         ...this.components,\n  //         {\n  //           description: document.description,\n  //           file: {\n  //             name: fileName,\n  //             path: filePath,\n  //           },\n  //           hierarchy,\n  //           markdown: markdownFileContent,\n  //           name: document.displayName,\n  //           props: document.props,\n  //           tags: document.tags,\n  //         },\n  //       ];\n\n  //       console.info(\n  //         `${pc.blue('\u2139')} ${pc.dim('Generated')} ${pc.bold(\n  //           hierarchy.join(pc.dim(' / ')),\n  //         )} ${pc.bold(pc.dim('/'))} ${pc.bold(document.displayName)}`,\n  //       );\n  //     }\n  //   }\n\n  //   this.completedComponentGroups = [\n  //     ...this.completedComponentGroups,\n  //     concurrencyGroup,\n  //   ];\n  // }\n\n  // public async getComponentFileGroups() {\n  //   const componentFiles = await globby('**/*.tsx', {\n  //     cwd: this.inputDirectory,\n  //   });\n  //   const filePaths = componentFiles.map(file =>\n  //     path.resolve(this.inputDirectory, file),\n  //   );\n  //   const groupCount = Math.ceil(filePaths.length / this.concurrency);\n\n  //   for (let index = 0; index < this.concurrency; index++) {\n  //     this.componentGroups = [\n  //       ...this.componentGroups,\n  //       filePaths.slice(index * groupCount, (index + 1) * groupCount),\n  //     ];\n  //   }\n  // }\n\n  // private async parallel() {\n  //   if (this.concurrency > 1) {\n  //     if (cluster.isPrimary) {\n  //       for (let index = 0; index < this.concurrency - 1; index++) {\n  //         cluster.fork({\n  //           // eslint-disable-next-line @typescript-eslint/naming-convention\n  //           WORKER_FILE_GROUP_ID: index,\n  //         });\n  //       }\n\n  //       cluster.on('exit', worker => {\n  //         const fileGroupId = process.env.WORKER_FILE_GROUP_ID;\n\n  //         if (fileGroupId) {\n  //           // this.completedFileGroups = [\n  //           //   ...this.completedFileGroups,\n  //           //   Number.parseInt(fileGroupId),\n  //           // ];\n  //         }\n  //       });\n  //     } else {\n  //       const fileGroupId = process.env.WORKER_FILE_GROUP_ID;\n\n  //       await this._run(Number.parseInt(fileGroupId ?? '0'));\n  //     }\n  //   } else {\n  //     await this._run(0);\n  //   }\n  // }\n\n  private async addRoute(route: Route) {\n    this.routes = [...this.routes, route];\n\n    if (this.output?.write) {\n      await this.writeRoutesFile();\n    }\n  }\n\n  private async addComponent(component: ComponentSpec) {\n    this.components = [...this.components, component];\n\n    if (this.output?.write) {\n      await this.writeComponentSpec(component);\n    }\n  }\n\n  private async writeRoutesFile() {\n    const routesFilePath = path.join(\n      process.cwd(),\n      '.srclaunch/docs/component-library',\n      'routes.json',\n    );\n\n    await fs.writeFile(routesFilePath, JSON.stringify(this.routes, null, 2));\n  }\n\n  private async writeComponentSpec(component: ComponentSpec) {\n    const componentFilePath = path.join(\n      process.cwd(),\n      '.srclaunch/docs/component-library/components',\n      component.hierarchy.join('/'),\n    );\n\n    const componentFileNamePath = path.join(\n      componentFilePath,\n      component.file.name.split('.tsx')[0] + '.json',\n    );\n\n    await fs.ensureDir(componentFilePath);\n    await fs.writeFile(\n      componentFileNamePath,\n      JSON.stringify(component, null, 2),\n    );\n  }\n\n  private async run(matchFiles?: ReadonlyArray<string>) {\n    await this.init();\n\n    const cwd = process.cwd();\n\n    if (matchFiles) {\n      for (const match of matchFiles) {\n        if (match.includes('.tsx')) {\n          this.componentFiles = [...this.componentFiles, match];\n        } else if (match.includes('.md')) {\n          this.markdownFiles = [...this.markdownFiles, match];\n        }\n\n        if (match.includes('README.md')) {\n          const readmeFilePath = path.resolve(cwd, 'README.md');\n          const readmeFileContents = await fs.readFile(readmeFilePath);\n\n          this.addRoute({\n            markdown: {\n              content: readmeFileContents.toString(),\n              file: {\n                name: '.README.md',\n                path: readmeFilePath.split('/').slice(0, -1).join('/'),\n              },\n            },\n            path: '/',\n          });\n        }\n      }\n    } else {\n      const componentMatches = await globby('**/*.tsx', {\n        cwd: this.inputDirectory,\n      });\n      this.componentFiles = componentMatches.map(file =>\n        path.resolve(this.inputDirectory, file),\n      );\n      const markdownMatches = await globby('**/*.md', {\n        cwd: this.inputDirectory,\n      });\n      this.markdownFiles = markdownMatches.map(file =>\n        path.resolve(this.inputDirectory, file),\n      );\n\n      const readmeFilePath = path.resolve(cwd, 'README.md');\n      const readmeFileContents = await fs.readFile(readmeFilePath);\n\n      this.addRoute({\n        markdown: {\n          content: readmeFileContents.toString(),\n          file: {\n            name: '.README.md',\n            path: readmeFilePath.split('/').slice(0, -1).join('/'),\n          },\n        },\n        path: '/',\n      });\n    }\n\n    for (const file of this.componentFiles) {\n      const fileName = file.split('/').pop() as string;\n      const filePath = file.split('/').slice(0, -1).join('/');\n      const hierarchy = path\n        .relative(path.join(cwd, this.inputDirectory), filePath)\n        .split('/');\n\n      const docs = await parse(file, {\n        propFilter: {\n          skipPropsWithName: ['parentProps'],\n          // skipPropsWithoutDoc: true,\n        },\n        savePropValueAsString: true,\n        shouldExtractLiteralValuesFromEnum: true,\n        shouldExtractValuesFromUnion: true,\n        skipChildrenPropWithoutDoc: false,\n      });\n\n      for (const document of docs) {\n        const markdownFileName = fileName.replace('.tsx', '.md');\n        const markdownFilePath = path.join(\n          path.join(cwd, this.inputDirectory),\n          markdownFileName,\n        );\n        const hasMarkdownFile = await fs.pathExists(markdownFilePath);\n        const markdownContent = hasMarkdownFile\n          ? await fs.readFile(markdownFilePath)\n          : undefined;\n\n        const componentDocument = {\n          description: document.description,\n          file: {\n            name: fileName,\n            path: filePath,\n          },\n          hierarchy,\n          markdown: hasMarkdownFile\n            ? {\n                content: markdownContent?.toString(),\n                file: {\n                  name: markdownFileName,\n                  path: markdownFilePath,\n                },\n              }\n            : undefined,\n          name: document.displayName,\n          props: document.props as {\n            [key: string]: ComponentPropertyDefinition;\n          },\n          tags: document.tags,\n        };\n\n        this.addComponent(componentDocument);\n\n        console.info(\n          `${pc.blue('\u2139')} ${pc.dim('Generated')} ${pc.bold(\n            hierarchy.join(pc.dim(' / ')),\n          )} ${pc.bold(pc.dim('/'))} ${pc.bold(document.displayName)}`,\n        );\n      }\n    }\n\n    const nonComponentRoutes = this.markdownFiles.filter(file => {\n      return !this.componentFiles.includes(file.split('.md')[0] + '.tsx');\n    });\n\n    for (const filePath of nonComponentRoutes) {\n      const fileName = filePath.split('/').pop() as string;\n      const hierarchy = path\n        .relative(path.join(cwd, this.inputDirectory), filePath)\n        .split('/')\n        .slice(0, -1);\n\n      const markdownContent = await fs.readFile(filePath);\n\n      this.addRoute({\n        hierarchy,\n        markdown: {\n          content: markdownContent.toString(),\n          file: {\n            name: fileName,\n            path: filePath.split('/').slice(0, -1).join('/'),\n          },\n        },\n        path: hierarchy.join('/'),\n      });\n    }\n  }\n\n  public async generate({\n    match,\n  }: {\n    readonly match?: ReadonlyArray<string>;\n  }): Promise<{\n    readonly components: readonly ComponentSpec[];\n    readonly routes: readonly Route[];\n  }> {\n    console.info(\n      `${pc.blue('\u2139')} Finding React components in ${pc.bold(\n        this.inputDirectory,\n      )} and generating documentation...`,\n    );\n\n    // await this.getComponentFileGroups();\n\n    // console.log('oroutes', this.routes);\n    // // await this.parallel();\n    // await this._run();\n    await this.run(match ?? this.match);\n\n    console.log(\n      `${pc.green('\u2714')} Documentation generated for ${pc.bold(\n        this.components.length,\n      )} components`,\n    );\n\n    if (this.output?.combined) {\n      await fs.writeFile(\n        '.srclaunch/docs/component-library/components.json',\n        JSON.stringify(\n          this.components.map(c => {\n            return {\n              docPath: path.resolve(\n                path.join(\n                  '.srclaunch/docs/component-library/components',\n                  c.hierarchy.join('/'),\n                  c.file.name.split('.tsx')[0] + '.json',\n                ),\n              ),\n              file: c.file,\n              hierarchy: c.hierarchy,\n              name: c.name,\n              path: `${c.hierarchy.join('/')}/${c.file.name.split('.tsx')[0]}`,\n            };\n          }),\n          undefined,\n          2,\n        ),\n      );\n    }\n\n    // if (this.completedComponentGroups.length === this.componentGroups.length) {\n    return {\n      components: this.components,\n      routes: this.routes,\n    };\n    // }\n\n    // return undefined;\n  }\n}\n", "// import { Box, Newline, Spacer, Static, Text, useInput } from 'ink';\nimport { Flag, FlagType, TypedFlags } from 'meow';\nimport { Worker } from 'node:worker_threads';\nimport { PropsWithChildren, useEffect, useState } from 'react';\n\n// import MultiSelect from 'ink-multi-select';\n// import { getAppLabMetadata } from '../applab';\n// import { startThread } from '../worker-thread';\nimport { FullScreen } from '../components/FullScreen';\nimport { Scrollable } from '../components/Scrollable';\nimport { Tab, Tabs } from '../components/Tabs';\nimport { Build } from '../pages/Build';\nimport { Changes } from '../pages/Changes';\nimport { Overview } from '../pages/Overview';\nimport { Release } from '../pages/Release';\nimport { Tests } from '../pages/Tests';\n// import { Tab, Tabs } from './Tabs';\n\ntype AppContainerProps<T = Record<string, Flag<FlagType, unknown>>> =\n  PropsWithChildren<{\n    readonly cliVersion?: string;\n  }>;\n\nexport const AppContainer = ({ children, cliVersion }: AppContainerProps) => {\n  const [mainOutput, setMainOutput] = useState<string[]>([]);\n  const [serviceStatus, setServiceStatus] = useState<string | undefined>();\n\n  const addToLogs = (string_: string) => {\n    setMainOutput(currentState => [...currentState, string_]);\n  };\n\n  // useEffect(() => {\n  //   setMainScrollCursor(m => (m += 1));\n  // }, [mainOutput.length]);\n\n  useEffect(() => {\n    const handleFlags = async () => {\n      addToLogs(``);\n      // addToLogs('Initializing services...');\n      //\n      // const { name, type } = await getAppLabMetadata();\n      //\n      // setServiceStatus('starting');\n      // addToLogs(`Starting service ${name}...`);\n      //\n      // const thread: Worker = await startThread({\n      //   name,\n      //   type,\n      // });\n      //\n      // thread.on('online', () => {\n      //   addToLogs(`${name} worker online`);\n      // });\n      //\n      // thread.on('message', (message: string) => {\n      //   addToLogs(message);\n      // });\n      //\n      // thread.on('error', async (err: Error) => {\n      //   addToLogs(`ERROR: ${err.name}: ${err.message}`);\n      //\n      //   setServiceStatus('error');\n      // });\n      //\n      // thread.on('exit', async () => {\n      //   setServiceStatus('error');\n      // });\n      //\n      // setServiceStatus('started');\n      // addToLogs(`Service ${name} started`);\n\n      if (serviceStatus) {\n        addToLogs(serviceStatus);\n      }\n    };\n\n    handleFlags();\n  }, []);\n\n  return (\n    <FullScreen\n      borderStyle=\"round\"\n      borderColor=\"lightgrey\"\n      flexDirection=\"column\"\n    >\n      {/* \n      <Tabs>\n       <Tab initial={initialTab === 'Overview'} label=\"Overview\">\n          <Overview />\n        </Tab>\n        <Tab initial={initialTab === 'Build'} label=\"Build\">\n          <Build />\n        </Tab>\n        <Tab initial={initialTab === 'Tests'} label=\"Tests\">\n          <Tests />\n        </Tab>\n        <Tab initial={initialTab === 'Changes'} label=\"Changes\">\n          <Changes />\n        </Tab>\n        <Tab initial={initialTab === 'Release'} label=\"Release\">\n          <Release />\n        </Tab> \n      </Tabs>\n      */}\n      {/* <Box flexDirection=\"row\">\n        <Spacer />\n        <Box alignItems=\"flex-end\" paddingRight={1}>\n          <Text>{cliVersion}</Text>\n        </Box>\n      </Box> */}\n      {children}\n    </FullScreen>\n  );\n};\n", "import { Box, BoxProps } from 'ink';\nimport { PropsWithChildren, ReactElement, useEffect, useState } from 'react';\n\ntype FullScreenProps = PropsWithChildren<BoxProps>;\n\nexport const FullScreen = ({ children, ...props }: FullScreenProps) => {\n  const [size, setSize] = useState({\n    columns: process.stdout.columns,\n    rows: process.stdout.rows,\n  });\n\n  useEffect(() => {\n    function onResize() {\n      setSize({\n        columns: process.stdout.columns,\n        rows: process.stdout.rows,\n      });\n    }\n\n    process.stdout.on('resize', onResize);\n    process.stdout.write('\\u001B[?1049h');\n\n    return () => {\n      process.stdout.off('resize', onResize);\n      process.stdout.write('\\u001B[?1049l');\n    };\n  }, []);\n\n  return (\n    <Box width={size.columns} height={size.rows} {...props}>\n      {children}\n    </Box>\n  );\n};\n", "/* eslint-disable sort-keys */\n/* eslint-disable-next-line unicorn/prevent-abbreviations */\nimport {\n  DocumentationConfig,\n  DocumentationType,\n  FileType,\n  ProjectConfig,\n} from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport { globby } from 'globby';\nimport JsYaml from 'js-yaml';\nimport { AnyFlags, TypedFlags } from 'meow';\nimport path from 'node:path';\nimport pc from 'picocolors';\n\nimport { Command, CommandType } from '../lib/command';\nimport { ComponentLibraryDocsGenerator } from '../lib/docs/generate';\n\ntype DocsFlags = TypedFlags<AnyFlags>;\n\nexport default new Command<ProjectConfig, DocsFlags>({\n  commands: [\n    new Command<ProjectConfig, DocsFlags>({\n      description: 'Generate documentation metadata',\n      name: 'generate',\n      run: async ({\n        config,\n      }: {\n        readonly config: ProjectConfig;\n        readonly flags: DocsFlags;\n      }) => {\n        const options = config.documentation as DocumentationConfig;\n\n        if (!options) {\n          throw new Error('Missing documentation configuration');\n        }\n\n        if (options.generate) {\n          switch (options.type) {\n            case DocumentationType.ComponentLibrary:\n              {\n                const inputDirectory =\n                  options.generate?.input?.directory ?? 'src';\n                const componentMatches = await globby('**/*.tsx', {\n                  cwd: inputDirectory,\n                });\n                const componentFiles = componentMatches.map(file =>\n                  path.resolve(inputDirectory, file),\n                );\n                const markdownMatches = await globby('**/*.md', {\n                  cwd: options.generate?.input?.directory,\n                });\n                const markdownFiles = markdownMatches.map(file =>\n                  path.resolve(inputDirectory, file),\n                );\n                const readmeFilePath = path.resolve(process.cwd(), 'README.md');\n\n                const documentGenerator = new ComponentLibraryDocsGenerator({\n                  concurrency: 1,\n                  ...options.generate,\n                  match: [readmeFilePath, ...componentFiles, ...markdownFiles],\n                  output: {\n                    clean: true,\n                    combined: true,\n                    write: true,\n                  },\n                });\n                await documentGenerator.generate({});\n\n                console.log(\n                  pc.green(`\u2714 Wrote generated component library documentation`),\n                );\n                //       const output = {\n                //         name: options.name,\n                //         // eslint-disable-next-line sort-keys-fix/sort-keys-fix\n                //         description: options.description,\n                //         // eslint-disable-next-line sort-keys-fix/sort-keys-fix\n                //         type: options.type,\n                //         // eslint-disable-next-line sort-keys-fix/sort-keys-fix\n                //         components,\n                //         // eslint-disable-next-line sort-keys-fix/sort-keys-fix\n                //         routes,\n                //       };\n                //       const outputDirectory =\n                //         options.output?.directory ?? '.srclaunch/docs';\n                //       const outputFileName =\n                //         options.output?.file?.name ?? 'component-library';\n                //       const outputFileType =\n                //         options.output?.file?.type ?? FileType.JSON;\n\n                //       const outputFilePath = path.join(\n                //         outputDirectory,\n                //         `${outputFileName}.${outputFileType}`,\n                //       );\n\n                //       await fs.writeFile(\n                //         path.resolve(outputFilePath),\n                //         outputFileType === FileType.JSON\n                //           ? JSON.stringify(output, null, 2)\n                //           : JsYaml.dump(output),\n                //       );\n              }\n              break;\n\n            case DocumentationType.IconLibrary:\n              break;\n          }\n        }\n      },\n\n      // console.log('program', program.getSourceFiles());\n\n      // const transpiledCode = ts.transpileModule(\n      //   exportFileContents,\n      //   {},\n      // ).outputText;\n      // console.log('transpiled', transpiledCode);\n      // const exportsFile = await import(importPath);\n\n      // await esbuild(options as ESBuildOptions);\n    }),\n\n    new Command({\n      description: 'Shows help for \"docs\" commands',\n      name: 'help',\n      run: async () => {\n        console.info('Available build commands are: build and help');\n      },\n      type: CommandType.Project,\n    }),\n  ],\n  description: \"Commands for managing a project's documentation\",\n  name: 'docs',\n  run: async ({\n    config,\n    flags,\n  }: {\n    readonly config: ProjectConfig;\n    readonly flags: DocsFlags;\n  }) => {\n    // Show help?\n  },\n});\n\n/*\nimport { ComponentSpec } from '@srclaunch/types';\nimport async from 'async';\nimport { globby } from 'globby';\nimport cluster from 'node:cluster';\nimport os from 'node:os';\nimport path from 'node:path';\nimport pc from 'picocolors';\nimport { parse } from 'react-docgen-typescript';\n\nexport interface DocsGeneratorOptions {\n  readonly concurrency?: number;\n  readonly input?: {\n    readonly directory?: string;\n  };\n}\n\nexport class ComponentLibraryDocsGenerator {\n  private readonly concurrency: number = os.cpus().length;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private components: Array<ComponentSpec> = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private fileGroups: Array<Array<string> | null> = [];\n  private readonly files: readonly string[] = [];\n  public readonly output: readonly ComponentSpec[] = [];\n  // eslint-disable-next-line functional/prefer-readonly-type\n  private tasks: ReadonlyArray<\n    (callback: (err?: Error) => void) => Promise<void>\n  >;\n  private readonly inputDirectory: string = 'src';\n\n  public constructor(options?: DocsGeneratorOptions) {\n    this.concurrency = options?.concurrency ?? this.concurrency;\n    this.inputDirectory = options?.input?.directory ?? this.inputDirectory;\n    this.components = [];\n    this.tasks = [];\n  }\n\n  private async _run(concurrencyGroup = 0) {\n    const cwd = process.cwd();\n\n    const files = this.fileGroups[concurrencyGroup] ?? [];\n\n    for (const file of files) {\n      const fileName = file.split('/').pop() as string;\n      const filePath = file.split('/').slice(0, -1).join('/');\n      const hierarchy = path\n        .relative(path.join(cwd, this.inputDirectory), filePath)\n        .split('/');\n      // ${pc.green('\u2714')}\n\n      const docs = await parse(file, {\n        savePropValueAsString: true,\n        shouldExtractLiteralValuesFromEnum: true,\n        shouldExtractValuesFromUnion: true,\n      });\n\n      for (const doc of docs) {\n        this.components.push({\n          description: doc.description,\n          file: {\n            name: fileName,\n            path: filePath,\n          },\n          hierarchy,\n          name: doc.displayName,\n          props: doc.props,\n          tags: doc.tags,\n        });\n\n        console.info(\n          `${pc.blue('\u2139')} ${pc.dim('Generated')} ${pc.bold(\n            hierarchy.join(pc.dim(' / ')),\n          )} ${pc.bold(pc.dim('/'))} ${pc.bold(doc.displayName)}`,\n        );\n      }\n    }\n  }\n\n  public async getComponentFileGroups() {\n    console.info(\n      `${pc.blue('\u2139')} Finding React components in ${pc.bold(\n        this.inputDirectory,\n      )} and generating documentation`,\n    );\n\n    const componentFiles = await globby('* * /*.tsx', {\n      cwd: this.inputDirectory,\n    });\n\n    this.fileGroups = componentFiles\n      .map(file => path.resolve(this.inputDirectory, file))\n      .sort()\n      .map((file, index) => {\n        return index % this.concurrency === 0\n          ? this.files.slice(index, index + this.concurrency)\n          : null;\n      })\n      .filter(Boolean);\n  }\n\n  public async generate() {\n    await this.getComponentFileGroups();\n\n    if (this.concurrency > 1) {\n      if (cluster.isPrimary) {\n        for (let i = 0; i < this.concurrency; i++) {\n          cluster.fork({\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            WORKER_FILE_GROUP_ID: i,\n          });\n        }\n\n        cluster.on('exit', function (worker) {\n          const fileGroupId = process.env.WORKER_FILE_GROUP_ID;\n\n          console.log(`FileGroupWorker \"${fileGroupId}\" has exited.`);\n        });\n      } else {\n        const fileGroupId = process.env.WORKER_FILE_GROUP_ID;\n\n        this._run(Number.parseInt(fileGroupId ?? '0'));\n      }\n    } else {\n      this._run(0);\n    }\n\n    console.log(\n      `${pc.green('\u2714')} Documentation generated for ${pc.bold(\n        this.components.length,\n      )} components`,\n    );\n\n    return this.components;\n  }\n}\n*/\n", "import { ProjectConfig, WorkspaceConfig } from '@srclaunch/types';\nimport { writeFile } from 'fs-extra';\nimport { TypedFlags } from 'meow';\nimport path from 'node:path';\n\n// import { transformObjectToYAML } from '@srclaunch/logic';\nimport { Command } from '../lib/command';\nimport { generateSDKs } from '../lib/generate';\nimport { createNewProjectInteractive } from '../lib/project/create';\n\nexport type GenerateSrcLaunchProjectFlags = TypedFlags<{\n  readonly description: {\n    readonly required: true;\n    readonly type: 'string';\n  };\n  readonly name: {\n    readonly required: true;\n    readonly type: 'string';\n  };\n  readonly type: {\n    readonly required: true;\n    readonly type: 'string';\n  };\n}>;\n\nexport default new Command<ProjectConfig & WorkspaceConfig>({\n  commands: [\n    new Command<ProjectConfig>({\n      description:\n        'Generate GitHub Actions workflows from the SrcLaunch config file.',\n      name: 'github-actions',\n      async run({ config }): Promise<void> {\n        const repositoryWorkflows = config?.repository?.workflows;\n        if (repositoryWorkflows) {\n          for (const _workflow of Object.entries(repositoryWorkflows)) {\n            const [name, workflow] = _workflow;\n\n            // const workflowPath = path.join(\n            //   process.cwd(),\n            //   'github-actions',\n            //   `${name}.yml`,\n            // );\n\n            // if (workflow.tasks) {\n            //   for (const _task of Object.entries(workflow.tasks)) {\n            //     const [taskName, task] = _task;\n            //     // const taskPath = path.join(\n            //     //   process.cwd(),\n            //     //   'github-actions',\n            //     //   `${name}.yml`,\n            //     // );\n            //     console.log(taskName);\n\n            //     if (task.steps) {\n            //       let stepOutput = {};\n\n            //       for (const _step of Object.entries(task.steps)) {\n            //         const [stepName, step] = _step;\n\n            //         if (step.run) {\n            //           const output = await step.run();\n\n            //           console.log('output', output);\n            //           if (output) {\n            //             stepOutput = {\n            //               ...stepOutput,\n            //               [stepName]: output,\n            //             };\n            //           }\n            //         }\n\n            //         if (step.shell) {\n            //           for (const output of Object.entries(step.shell)) {\n            //             const [key, shell] = output;\n\n            //             console.log('o', key);\n            //           }\n\n            //           console.log('shell', step.shell);\n            //           stepOutput = {\n            //             ...stepOutput,\n            //             [stepName]: step.shell,\n            //           };\n            //         }\n\n            //         console.log(' -- ' + stepName);\n            //         console.log(' ---- ' + JSON.stringify(stepOutput, null, 2));\n            //       }\n            //     }\n            //   }\n            // }\n          }\n        }\n      },\n    }),\n    new Command<WorkspaceConfig, GenerateSrcLaunchProjectFlags>({\n      description:\n        \"Generates a SrcLaunch project config file if one doesn't exist already.\",\n      name: 'srclaunch-project-config',\n      async run({ flags }): Promise<void> {\n        await createNewProjectInteractive({\n          description: flags.description,\n          name: flags.name,\n          type: flags.type,\n        });\n      },\n    }),\n    new Command<WorkspaceConfig>({\n      description:\n        'Generates a package.yml file that can be used as a replacement for packageon',\n      name: 'package-yml',\n      async run(): Promise<void> {\n        // await shellExec(\n        //   'yarn plugin import https://raw.githubusercontent.com/\n        // lyleunderwood/yarn-plugin-yaml-manifest/master/bundles/\n        // %40yarnpkg/plugin-yaml-manifest',\n        // );\n        // const yml = Yaml.dump({\n        //   ...updatedPackageJsonContents,\n        //   version: updatedPackageJsonContents.version,\n        // });\n        // await writeFile(path.resolve('./package.yml'), yml.toString());\n        // const existingPackageYml = (await fileExists('./package.yml'))\n        //   ? await readFile('./package.yml')\n        //   : null;\n        // const parsedPackageYml: { version: string } | null = existingPackageYml\n        //   ? (Yaml.load(existingPackageYml.toString()) as {\n        //       version: string;\n        //     })\n        //   : null;\n        // /*\n        //     Write package.yml which will be used by the `yarn-plugin-yaml-manifest`\n        //     plugin to generate a packageon manifest.\n        //   */\n        // const packageYml = Yaml.dump(newPackageMetadata);\n        // await writeFile(path.resolve('./package.yml'), packageYml.toString());\n        // console.info(`${chalk.green('\u2714')} created package.yml`);\n        // console.info('resulttt', result);\n        // await createChangeset({\n        //   files: ['package.yml'],\n        //   type: ChangeType.Release,\n        //   message: `Release ${updatedPackageJsonContents.version}`,\n        // });\n      },\n    }),\n    new Command<WorkspaceConfig>({\n      description: 'Generate SDKs from SrcLaunch models',\n      name: 'sdks',\n      async run(): Promise<void> {\n        await generateSDKs();\n      },\n    }),\n  ],\n  description: `Generate code, configuration, and files for various patterns and libraries.`,\n  name: 'generate',\n});\n", "import { generateModelsSDK } from './sdk/models';\n\nexport async function generateSDKs() {\n  await generateModelsSDK();\n  // await generateSDK('core-api');\n  // await generateSDK('data-client');\n  // await generateSDK('exceptions');\n  // await generateSDK('http-client');\n\n  // await generateSDK('redux-store');\n  // await generateSDK('rtk-query-services');\n  // await generateSDK('rtk-slices');\n  // await generateSDK('sequelize-models');\n  // await generateSDK('types');\n}\n", "export const generateModelsSDK = () => {\n  return;\n};\n", "import { ProjectType } from '@srclaunch/types';\nimport pc from 'picocolors';\n\nimport {\n  promptForProjectCreate,\n  promptForProjectDescription,\n  promptForProjectName,\n  promptForProjectType,\n} from '../../prompts/generators/srclaunch/project';\n\nexport async function createNewProjectInteractive({\n  name,\n  description,\n  type,\n}: {\n  readonly description?: string;\n  readonly name?: string;\n  readonly type?: ProjectType | string;\n}) {\n  const createProject = await promptForProjectCreate();\n\n  if (createProject) {\n    const projectName = name ?? (await promptForProjectName());\n    const projectDescription =\n      description ?? (await promptForProjectDescription());\n\n    if (type && !Object.values(ProjectType).includes(type as ProjectType)) {\n      console.error(\n        `${pc.red('\u2716')} ${pc.red('Invalid project type')} ${pc.red(type)}`,\n      );\n\n      process.exit(1);\n    }\n\n    const projectType = type ?? (await promptForProjectType());\n  }\n}\n", "import { ProjectConfig, ProjectType } from '@srclaunch/types';\nimport prompts from 'prompts';\n\nexport async function promptForProjectOptions(): Promise<ProjectConfig> {\n  const [name, description, type] = await Promise.all([\n    promptForProjectName(),\n    promptForProjectDescription(),\n    promptForProjectType(),\n  ]);\n\n  return { description, name, type };\n}\n\nexport async function promptForProjectCreate(): Promise<boolean> {\n  return (\n    await prompts({\n      active: 'Yes',\n      inactive: 'No',\n      initial: true,\n      message: 'Would you like to create a new SrcLaunch configuration file?',\n      name: 'value',\n      type: 'toggle',\n    })\n  ).value;\n}\n\nexport async function promptForProjectName(): Promise<string> {\n  return (\n    await prompts({\n      message: 'What do you want to name your project?',\n      name: 'value',\n      type: 'text',\n      validate: value =>\n        typeof value === 'string' &&\n        value.length > 0 &&\n        Boolean(\n          /^(@[\\da-z~-][\\d._a-z~-]*\\/)?[\\da-z~-][\\d._a-z~-]*$/.test(value),\n        ),\n    })\n  ).value;\n}\n\nexport async function promptForProjectDescription(): Promise<string> {\n  return (\n    await prompts({\n      message: 'Write a brief description of your project.',\n      name: 'value',\n      type: 'text',\n      validate: value => typeof value === 'string' && value.length > 0,\n    })\n  ).value;\n}\n\nexport async function promptForProjectType(): Promise<ProjectType> {\n  return (\n    await prompts({\n      choices: Object.values(ProjectType).map(type => ({\n        title: type.replace('-', ' '),\n        value: type as ProjectType,\n      })),\n      initial: 1,\n      message: 'Choose a project type.',\n      name: 'value',\n      type: 'select',\n    })\n  ).value;\n}\n", "import { Command } from '../lib/command.js';\n\nexport default new Command({\n  description: 'Shows help for commands',\n  name: 'help',\n  run: async ({ cli }) => {\n    cli.showHelp();\n  },\n});\n", "import { WorkspaceConfig } from '@srclaunch/types';\n\nimport { Command, CommandType } from '../lib/command.js';\n\nexport default new Command({\n  commands: [\n    new Command<WorkspaceConfig>({\n      description: 'Deploy infrastructure',\n      name: 'deploy',\n      run: async ({ config, flags }) => {},\n      type: CommandType.Workspace,\n    }),\n    new Command<WorkspaceConfig>({\n      description: 'Shows help for infrastructure commands',\n      name: 'help',\n      run: async () => {\n        console.info('Available infrastructure commands are: deploy, help');\n      },\n      type: CommandType.Workspace,\n    }),\n  ],\n  description: 'Manage infrastructure',\n  name: 'infrastructure',\n});\n", "import { ProjectConfig } from '@srclaunch/types';\n\n// import { render } from 'ink';\n// import { AppContainer } from '../components/AppContainer.js';\nimport { Command, CommandType } from '../lib/command.js';\n\nexport default new Command<ProjectConfig>({\n  commands: [\n    new Command<ProjectConfig>({\n      description: 'Shows help for install commands',\n      name: 'help',\n      run: async () => {\n        console.info('Available install commands are:  help');\n      },\n      type: CommandType.Project,\n    }),\n  ],\n  description: 'Install project dependencies from .srclaunch/config.js',\n  name: 'install',\n  run: async ({ cli, flags }) => {\n    // const { waitUntilExit } = render(\n    //   <AppContainer cliVersion={cli.pkg.version} flags={flags} />,\n    // );\n    // await waitUntilExit();\n  },\n});\n", "import { WorkspaceConfig } from '@srclaunch/types';\nimport path from 'node:path';\n\nimport { Command, CommandType } from '../lib/command.js';\nimport { cleanModels } from '../lib/models/build/clean.js';\nimport { buildModels } from '../lib/models/build/index.js';\nimport { listModels } from '../lib/models/list.js';\n\nexport default new Command({\n  commands: [\n    new Command<WorkspaceConfig>({\n      description: '',\n      name: 'clean',\n      run: async ({ config, flags }) => {\n        await cleanModels();\n      },\n      type: CommandType.Workspace,\n    }),\n    new Command<WorkspaceConfig>({\n      description: '',\n      name: 'create',\n      run: async ({ config, flags }) => {},\n      type: CommandType.Workspace,\n    }),\n    new Command<WorkspaceConfig>({\n      description: '',\n      name: 'build',\n      run: async ({ config, flags }) => {\n        await buildModels(config);\n      },\n      type: CommandType.Workspace,\n    }),\n    new Command<WorkspaceConfig>({\n      description: '',\n      name: 'list',\n      run: async ({ config, flags }) => {\n        await listModels();\n      },\n      type: CommandType.Workspace,\n    }),\n    new Command<WorkspaceConfig>({\n      description: 'Shows help for model commands',\n      name: 'help',\n      run: async () => {\n        console.info(\n          'Available model commands are: clean, build, list, and help.',\n        );\n      },\n      type: CommandType.Workspace,\n    }),\n  ],\n  description: 'Commands for managing models',\n  name: 'models',\n});\n", "// import { emptyDirectory } from \"@srclaunch/logic\";\nimport path from 'node:path';\n\nexport async function cleanModels() {\n  try {\n    const MODEL_DEPS_PATH = path.join(path.resolve(), 'dependencies/models');\n\n    // await emptyDirectory(path.join(MODEL_DEPS_PATH, 'src'));\n\n    // const TYPES_DEPS_PATH = path.join(\n    //   path.resolve(),\n    //   APPLAB_DIRECTORY,\n    //   'dependencies/types',\n    // );\n    // const SEQUELIZE_DEPS_PATH = path.join(\n    //   path.resolve(),\n    //   APPLAB_DIRECTORY,\n    //   'dependencies/sequelize-models',\n    // );\n\n    // await fs.emptyDir(path.join(MODEL_DEPS_PATH, 'src', 'applab'));\n    // await fs.emptyDir(path.join(MODEL_DEPS_PATH, 'src', 'json'));\n    // await fs.emptyDir(path.join(TYPES_DEPS_PATH, 'src'));\n    // await fs.emptyDir(path.join(SEQUELIZE_DEPS_PATH, 'src'));\n  } catch (error: any) {\n    console.error(error);\n  }\n}\n", "// import fs from 'fs-extra';\n// import path from 'node:path';\n// import { Exception } from '@srclaunch/exceptions';\nimport { BuildFormat, Platform, WorkspaceConfig } from '@srclaunch/types';\nimport path from 'node:path';\nimport ora from 'ora';\n\nimport { build } from '../../build/esbuild';\n// import { build as vite, ViteBuildOptions } from '../../build/vite';\nimport { build as buildTypes, TypesBuildOptions } from '../../build/types';\nimport { buildCoreAPI } from './outputs/core-api';\n// import { cleanModels } from './clean';\nimport { buildHttpClient } from './outputs/http-client';\n// // import { buildJSONModels } from './outputs/json';\nimport { buildRtkSlices } from './outputs/redux';\nimport { buildSequelizeModels } from './outputs/sequelize';\nimport { buildModelTypes } from './outputs/types';\nimport { copyStubModels } from './stubs/index';\n\nexport async function buildModels(config: WorkspaceConfig) {\n  const spinner = ora();\n  // console.info('Building Core Object dependencies...');\n\n  console.info('Building Core Object SDKs...');\n\n  spinner.start('Copying stub models');\n  await copyStubModels();\n\n  spinner.succeed('Stub models copied');\n\n  spinner.start('Building `models` SDK');\n  await build({\n    clean: true,\n    format: BuildFormat.ESM,\n    input: {\n      directory: 'sdk/models/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/models/dist',\n      file: 'index.js',\n    },\n  });\n  await buildTypes({\n    input: {\n      directory: 'sdk/models/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/models/dist',\n    },\n    types: {\n      configPath: 'sdk/models/tsconfig.json',\n    },\n  });\n\n  spinner.succeed('Built `models` SDK');\n\n  // console.info('Creating model type definitions...');\n  spinner.start('Building `types` SDK');\n  await buildModelTypes();\n  await build({\n    clean: true,\n    format: BuildFormat.ESM,\n    input: {\n      directory: 'sdk/types/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/types/dist',\n      file: 'index.js',\n    },\n    platform: Platform.Browser,\n  });\n  await buildTypes({\n    input: {\n      directory: 'sdk/types/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/types/dist',\n    },\n    types: {\n      configPath: 'sdk/types/tsconfig.json',\n    },\n  });\n  spinner.succeed('Built `types` SDK');\n\n  spinner.start('Creating `sequelize-models` SDK...');\n  await buildSequelizeModels();\n  await build({\n    clean: true,\n    format: BuildFormat.ESM,\n    input: {\n      directory: 'sdk/sequelize-models/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/sequelize-models/dist',\n      file: 'index.js',\n    },\n    platform: Platform.Node,\n  });\n  await buildTypes({\n    input: {\n      directory: 'sdk/sequelize-models/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/sequelize-models/dist',\n    },\n    types: {\n      configPath: 'sdk/sequelize-models/tsconfig.json',\n    },\n  });\n  spinner.succeed('Created `sequelize-models` SDK');\n\n  spinner.start('Building `http-client` SDK...');\n  await buildHttpClient(config);\n  await build({\n    clean: true,\n    format: BuildFormat.ESM,\n    input: {\n      directory: 'sdk/http-client/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/http-client/dist',\n      file: 'index.js',\n    },\n    platform: Platform.Browser,\n  });\n  await buildTypes({\n    input: {\n      directory: 'sdk/http-client/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/http-client/dist',\n    },\n    types: {\n      configPath: 'sdk/http-client/tsconfig.json',\n    },\n  });\n  spinner.succeed('Built `http-client` SDK');\n\n  // console.info('Building Redux state...');\n  spinner.start('Generating `rtk-slices` SDK...');\n  await buildRtkSlices(config);\n  await build({\n    clean: true,\n    format: BuildFormat.ESM,\n    input: {\n      directory: 'sdk/rtk-slices/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/rtk-slices/dist',\n      file: 'index.js',\n    },\n    platform: Platform.Browser,\n  });\n  await buildTypes({\n    input: {\n      directory: 'sdk/rtk-slices/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/rtk-slices/dist',\n    },\n    types: {\n      configPath: 'sdk/rtk-slices/tsconfig.json',\n    },\n  });\n  spinner.succeed('Generated `rtk-slices` SDK');\n\n  spinner.start('Building `core-api` SDK');\n  await buildCoreAPI({\n    sequelizeModelsProject: config.sdk.sequelizeModels.name,\n  });\n  await build({\n    bundle: {\n      exclude: ['@srclaunch/core-api-server'],\n    },\n    clean: true,\n    format: BuildFormat.ESM,\n    input: {\n      directory: 'sdk/core-api/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/core-api/dist',\n      file: 'index.js',\n    },\n    platform: Platform.Node,\n  });\n  await buildTypes({\n    input: {\n      directory: 'sdk/core-api/src',\n      file: 'index.ts',\n    },\n    output: {\n      directory: 'sdk/core-api/dist',\n    },\n    types: {\n      configPath: 'sdk/core-api/tsconfig.json',\n    },\n  });\n  spinner.succeed('Built `core-api` SDK');\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\n\nexport async function buildCoreAPI({\n  sequelizeModelsProject,\n}: {\n  readonly sequelizeModelsProject: string;\n}) {\n  const BUILD_PATH = path.join(path.resolve(), 'sdk/core-api/src');\n  const DIST_PATH = path.join(path.resolve(), 'sdk/core-api/dist');\n\n  await fs.emptyDir(BUILD_PATH);\n  await fs.emptyDir(DIST_PATH);\n\n  const indexFileString = `import { CaughtException } from '@srclaunch/exceptions';\nimport { CoreAPIServer } from '@srclaunch/core-api-server';\nimport SequelizeModels from '${sequelizeModelsProject}';\nimport { Logger } from '@srclaunch/logger';\nimport { getEnvironment } from '@srclaunch/node-environment';\n\nconst dbConfig = {\n  alter: false,\n  database: process.env.CORE_DB_NAME,\n  force: false,\n  host: process.env.CORE_DB_HOST,\n  password: process.env.CORE_DB_PASSWORD,\n  port: Number.parseInt(\n    process.env.CORE_DB_PORT ? process.env.CORE_DB_PORT.toString() : '3306',\n  ),\n  username: process.env.CORE_DB_USERNAME,\n};\n\nconst environment = getEnvironment();\nconst logger = new Logger({\n  environment,\n});\n\nconst init = async () => {\n  try {\n    // @ts-ignore\n    const server = new CoreAPIServer({\n      aws: {\n        accessKeyId: process.env.AWS_ACCESS_KEY,\n        secretAccessKey: process.env.AWS_SECRET_KEY,\n        region: process.env.AWS_REGION,\n        cognito: {\n          identityPoolId: process.env.IDENTITY_POOL_ID,\n        },\n        s3: {\n          bucket: process.env.AWS_S3_BUCKET_NAME,\n          region: process.env.AWS_REGION,\n        },\n      },\n      db: {\n        connection: dbConfig,\n        environment,\n\n        // @ts-ignore\n        models: SequelizeModels,\n      },\n      environment,\n      logger,\n      security: {\n        trustedOrigins: {\n          dev: ['http://localhost:3000'],\n          test: ['https://app.test.azorak.com'],\n          preview: ['https://app.preview.azorak.com'],\n          production: ['http://localhost:3000', 'https://app.azorak.com'],\n        },\n      },\n    });\n\n    await server.start();\n  } catch (err: any) {\n    console.log('err', err);\n    const exception = new CaughtException('Failed to start Core API', {\n      cause: err,\n      origin: {\n        file: 'index.ts',\n        function: 'init()',\n      },\n    });\n\n    logger.exception(exception.toJSON());\n  }\n};\n\nexport default init();\n`;\n\n  await fs.writeFile(\n    path.join(BUILD_PATH, `index.ts`),\n    indexFileString,\n    'utf8',\n  );\n}\n", "import { ProjectConfig, WorkspaceConfig } from '@srclaunch/types';\nimport { paramCase } from 'change-case';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport pluralize from 'pluralize';\n\nfunction constructHttpClientIndexScript({\n  environments,\n  models,\n}: {\n  readonly environments?: WorkspaceConfig['sdk']['coreApi']['environments'];\n  readonly models: readonly string[];\n}) {\n  let imports = `import { HttpClient } from '@srclaunch/http-client';\nimport { Environment } from '@srclaunch/types';\nimport { getEnvironment } from '@srclaunch/web-environment';\n`;\n\n  for (const name of models) {\n    imports += `import ${name.toLowerCase()}Endpoints from './${name}Endpoints';\\n`;\n  }\n\n  let hosts = '';\n  if (environments && environments.development) {\n    hosts += `development: '${\n      environments?.development?.https ? 'https' : 'http'\n    }://${environments?.development?.host ?? 'localhost'}${\n      environments?.development?.port !== 80\n        ? `:${(environments?.development?.port ?? 3000).toString()}`\n        : ''\n    }',\\n`;\n  }\n\n  if (environments && environments.preview) {\n    hosts += `preview: '${environments?.preview?.https ? 'https' : 'http'}://${\n      environments?.preview?.host\n    }${\n      environments?.preview?.port !== 80\n        ? `:${(environments?.preview?.port ?? 8080).toString()}`\n        : ''\n    }',\\n`;\n  }\n\n  if (environments && environments.qa) {\n    hosts += `qa: '${environments?.qa?.https ? 'https' : 'http'}://${\n      environments?.qa?.host\n    }${\n      environments?.qa?.port !== 80\n        ? `:${(environments?.qa?.port ?? 8080).toString()}`\n        : ''\n    }',\\n`;\n  }\n\n  if (environments && environments.production) {\n    hosts += `production: '${\n      environments?.production?.https ? 'https' : 'http'\n    }://${environments?.production?.host}${\n      environments?.production?.port !== 80\n        ? `:${(environments?.production?.port ?? 8080).toString()}`\n        : ''\n    }',\\n`;\n  }\n\n  return `${imports}\n\nconst environment: Environment = getEnvironment();\n\nconst hosts = {\n  ${hosts}\n}\n\nexport const httpClient = new HttpClient({\n  basePath: 'core-api',\n  // @ts-ignore\n  host: hosts[environment.id],\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    // headers: { 'X-Requested-With': 'XMLHttpRequest' },\n  },\n  retry: {\n    condition: error => !error.response,\n    count: 2,\n    delay: 5000,\n  },\n  preAuthResourceIncludes: '/auth',\n  responseType: 'json',\n  withCredentials: true,\n});\n\nexport default {\n  ${models.map(name => {\n    return `...${name}Endpoints\\n`;\n  })}\n};`;\n}\n\nfunction getHttpClientEndpoints({\n  modelName,\n  typesProjectName,\n}: {\n  readonly modelName: string;\n  readonly typesProjectName: string;\n}): string {\n  const lowercase = modelName.toLowerCase();\n  const lowercasePlural = pluralize(modelName.toLowerCase());\n  const capitalizedPlural = pluralize(modelName);\n  const urlParameter = paramCase(pluralize(modelName));\n\n  return `import { Condition, HttpResponse } from '@srclaunch/types';\n  import { stringify } from 'query-string';\n  import { httpClient } from './index';\n  import { ${modelName} } from '${typesProjectName}';\n\n  function getFormData(props: object) {\n    try {\n      const formData = new FormData();\n      const keys =  Object.keys(props);\n     \n      for (const key of keys) {\n        // @ts-ignore\n        const value = props[key];\n        if (Array.isArray(value) && value.length > 0) {\n          for (let i = 0; i < value.length; i++) {\n            const item = value[i];\n            console.log('item', item);\n            \n            if ('size' in item) {\n              if (item) formData.append(\\`\\${key}[\\${i}]\\`, item);\n            } else {\n              if (item) formData.append(\\`\\${key}[\\${i}]\\`, JSON.stringify(item));\n            }\n          }\n        } else {\n          if (value) formData.append(key, value);\n        }\n      }\n    \n      return formData;\n    } catch (err: any) {\n      console.error(err);\n    }\n }\n\n  export default {\n    create${modelName}: (props: ${modelName}): Promise<HttpResponse<${modelName}> | void> => {\n      const formData = getFormData(props);\n      return httpClient.post('/${urlParameter}', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    },\n    create${capitalizedPlural}: ({\n      ...props\n    }: ${modelName}[]): Promise<HttpResponse<${modelName}> | void> =>\n      httpClient.post('/${urlParameter}', props),\n    delete${modelName}: (id: ${modelName}['id']): Promise<HttpResponse<void> | void> =>\n      httpClient.delete(\\`/${urlParameter}/\\${id}\\`),\n    delete${capitalizedPlural}: (ids: ${modelName}['id'][]): Promise<HttpResponse<void> | void> =>\n      httpClient.delete(\\`/${urlParameter}/\\${ids.join(',')}\\`),\n    get${modelName}: (id: ${modelName}['id']): Promise<HttpResponse<${modelName}> | void> =>\n      httpClient.get(\\`/${urlParameter}/\\${id}\\`),\n    get${capitalizedPlural}: ({\n      conditions,\n      filters,\n      limit,\n      offset\n    }: {\n      conditions?: Condition[],\n      filters?: Record<string, string>,\n      limit?: number;\n      offset?: number\n    }): Promise<HttpResponse<${modelName}> | void> => \n      httpClient.get(\\`/${urlParameter}?\\${filters ? stringify(filters) : ''}limit=\\${limit}&offset=\\${offset}\\`),\n    update${modelName}: (\n      id: ${modelName}['id'],\n      props: ${modelName},\n    ): Promise<HttpResponse<${modelName}> | void> => {\n      const formData = getFormData(props);\n      return httpClient.put(\\`/${urlParameter}\\/\\${id}\\`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n    },\n    update${capitalizedPlural}: (\n      {\n        ...props\n      }: ${modelName}[],\n    ): Promise<HttpResponse<${modelName}> | void> =>\n      httpClient.put(\\`/${urlParameter}\\`, props),\n  };  \n  `;\n}\n\nexport async function buildHttpClient(\n  workspaceConfig: WorkspaceConfig,\n): Promise<void> {\n  try {\n    // const projectConfigContents = await fs.readFile(projectConfigPath);\n    // const projectConfig = await JSON.parse(projectConfigContents.toString());\n    const MODELS_PATH = path.join(path.resolve(), `sdk/models/src/srclaunch`);\n    const BUILD_PATH = path.join(path.resolve(), `sdk/http-client/src`);\n    const DIST_PATH = path.join(path.resolve(), `sdk/http-client/dist`);\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const files = await fs.readdir(MODELS_PATH);\n\n    for (const file of files) {\n      if (file !== 'index.ts') {\n        const name = `${file.toLowerCase().replace('.ts', '')}Endpoints.ts`;\n\n        const modelHttpClientEndpoints = getHttpClientEndpoints({\n          modelName: file.replace('.ts', ''),\n          typesProjectName: '@srclaunch/types-sdk',\n        });\n\n        // logger.info(`Writing ${name} HTTP client endpoints`);\n\n        await fs.writeFile(\n          path.join(BUILD_PATH, name),\n          modelHttpClientEndpoints,\n          'utf8',\n        );\n      }\n    }\n\n    const indexFileContent = constructHttpClientIndexScript({\n      environments: workspaceConfig.sdk.coreApi?.environments,\n      models: files\n        .filter(f => f !== 'index.ts')\n        .map(file => pluralize(file.toLowerCase()).replace('.ts', '')),\n    });\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "import { WorkspaceConfig } from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport pluralize from 'pluralize';\n\nfunction constructReduxReducersIndexScript(models: readonly string[]) {\n  const imports = models\n    .map(name => {\n      const pluralizedCamel = pluralize(name[0]?.toLowerCase() + name.slice(1));\n\n      return `import ${pluralizedCamel} from './${pluralizedCamel}';`;\n    })\n    .join('\\n');\n  const exports = models\n    .map(name => {\n      const pluralizedCamel = pluralize(name[0]?.toLowerCase() + name.slice(1));\n\n      return `export { \n        create${name}, \n        create${pluralize(name)}, \n        delete${name}, \n        delete${pluralize(name)}, \n        get${name}, \n        get${pluralize(name)}, \n        update${name},\n        update${pluralize(name)},\n        ${name}Selectors, \n      } from './${pluralizedCamel}.js';`;\n    })\n    .join('\\n');\n\n  return `${imports}\nexport default {\n  ${models\n    .map(name => pluralize(name[0]?.toLowerCase() + name.slice(1)))\n    .join(',\\n  ')},\n};\n\n${exports}\n`;\n}\n\nfunction getModelSlice({\n  httpClientProjectName,\n  modelName,\n  typesProjectName,\n}: {\n  readonly httpClientProjectName?: string;\n  readonly modelName: string;\n  readonly typesProjectName?: string;\n}): string {\n  const lowercase = modelName.toLowerCase();\n  const lowercasePlural = pluralize(modelName.toLowerCase());\n  const pluralCamel = pluralize(\n    modelName?.[0]?.toLowerCase() + modelName.slice(1),\n  );\n  const capitalizedPlural = pluralize(modelName);\n  const singularCamel = modelName?.[0]?.toLowerCase() + modelName.slice(1);\n  const pluralizedCamel = pluralize(\n    modelName[0]?.toLowerCase() + modelName.slice(1),\n  );\n\n  return `import { ${modelName} } from '${typesProjectName}';\n  import * as httpClient from '${httpClientProjectName}';\n  \nimport { createEntityAdapter, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Exception } from '@srclaunch/exceptions';\nimport { AppDispatch, AppThunk, RootState } from '@srclaunch/web-app-state';\nimport { Condition, ISO8601String, ExceptionObject } from '@srclaunch/types';\n\nconst adapter = createEntityAdapter<${modelName}>();\n\nexport const ${modelName}Selectors = adapter.getSelectors<RootState>(\n  (state: RootState) => state.${pluralCamel},\n);\n\ntype ${modelName}State = {\n  action: {\n    create${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    create${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    delete${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    delete${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    get${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    get${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    update${modelName}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n    update${capitalizedPlural}: {\n      error?: ExceptionObject;\n      inProgress: boolean;\n      lastUpdated?: ISO8601String;\n    },\n  },\n  inProgress?: boolean;\n  lastUpdated?: ISO8601String;\n};\n\nconst initialState = {\n  action: {\n    create${modelName}: {\n      inProgress: false,\n    },\n    create${capitalizedPlural}: {\n      inProgress: false,\n    },\n    delete${modelName}: {\n      inProgress: false,\n    },\n    delete${capitalizedPlural}: {\n      inProgress: false,\n    },\n    get${modelName}: {\n      inProgress: false,\n    },\n    get${capitalizedPlural}: {\n      inProgress: false,\n    },\n    update${modelName}: {\n      inProgress: false,\n    },\n    update${capitalizedPlural}: {\n      inProgress: false,\n    },\n  },\n  inProgress: false,\n}\n\nconst slice = createSlice({\n  initialState: adapter.getInitialState<${modelName}State>(initialState),\n  name: '${pluralCamel}',\n  reducers: {\n    add${modelName}: (state, action) => {\n      adapter.upsertOne(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    add${capitalizedPlural}: (state, action) => {\n      adapter.upsertMany(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    remove${modelName}: (state, action) => {\n      adapter.removeOne(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    remove${capitalizedPlural}: (state, action) => {\n      adapter.removeMany(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    update${modelName}: (state, action) => {\n      console.log('action.payload', action.payload);\n      adapter.updateOne(state, action);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    update${capitalizedPlural}: (state, action) => {\n      adapter.updateMany(state, action.payload);\n\n      state.lastUpdated = new Date().toISOString();\n    },\n    setActionError: (state, action: PayloadAction<{\n      type: |\n        'create${modelName}' | 'create${capitalizedPlural}' |\n        'delete${modelName}' | 'delete${capitalizedPlural}' |\n        'get${modelName}' | 'get${capitalizedPlural}' |\n        'update${modelName}' | 'update${capitalizedPlural}';\n      error: ExceptionObject;\n    }>) => {\n      const { type, error } = action.payload;\n\n      state.action[type].error = error;\n      state.lastUpdated = new Date().toISOString();\n    },\n    setActionInProgress: (state, action: PayloadAction<{\n      type: |\n        'create${modelName}' | 'create${capitalizedPlural}' |\n        'delete${modelName}' | 'delete${capitalizedPlural}' |\n        'get${modelName}' | 'get${capitalizedPlural}' |\n        'update${modelName}' | 'update${capitalizedPlural}';\n      inProgress: boolean;\n    }>) => {\n      const { type, inProgress } = action.payload;\n\n      state.inProgress = inProgress;\n      state.action[type].inProgress = inProgress;\n      state.lastUpdated = new Date().toISOString();\n    },\n  },\n});\n\nexport const create${modelName} = (${singularCamel}: ${modelName}): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.create${modelName}(${singularCamel});\n  \n      dispatch(slice.actions.add${modelName}(response?.body));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${modelName}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error creating ${modelName}', { cause: err });\n      \n      dispatch(slice.actions.setActionError({\n        type: 'create${modelName}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const create${capitalizedPlural} = (${pluralizedCamel}: ${modelName}[]): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${capitalizedPlural}',\n        inProgress: true,\n      }));\n\n      const response = await httpClient.default.create${capitalizedPlural}(${pluralizedCamel});\n      \n      dispatch(slice.actions.add${capitalizedPlural}(response?.body));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${capitalizedPlural}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error creating ${capitalizedPlural}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'create${capitalizedPlural}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'create${capitalizedPlural}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const delete${modelName} = (${singularCamel}: ${modelName}['id']): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.delete${modelName}(${singularCamel});\n      \n      dispatch(slice.actions.remove${modelName}(${singularCamel}));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${modelName}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error deleting ${modelName}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'delete${modelName}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const delete${capitalizedPlural} = (${pluralizedCamel}: ${modelName}['id'][]): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${capitalizedPlural}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.delete${capitalizedPlural}(${pluralizedCamel});\n  \n      dispatch(slice.actions.remove${capitalizedPlural}(response?.body));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${capitalizedPlural}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error deleting ${capitalizedPlural}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'delete${capitalizedPlural}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'delete${capitalizedPlural}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const get${modelName} = (${singularCamel}: ${modelName}['id']): AppThunk => \n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'get${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.get${modelName}(${singularCamel});\n  \n      if (response?.body) {\n        dispatch(slice.actions.add${modelName}(response?.body));\n      }\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'get${modelName}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error getting ${modelName}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'get${modelName}',\n        error: exception.toJSON(),\n      }));\n\n      dispatch(slice.actions.setActionInProgress({\n        type: 'get${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n\nexport const get${capitalizedPlural} = ({\n  conditions = [],\n  filters = {},\n  limit = 100,\n  offset = 0\n}: { \n  conditions?: Condition[],\n  filters?: Record<string, string>,\n  limit?: number;\n  offset?: number\n}): AppThunk =>  async (dispatch: AppDispatch, getState: () => RootState) => {\n  try {\n    dispatch(slice.actions.setActionInProgress({\n      type: 'get${capitalizedPlural}',\n      inProgress: true,\n    }));\n\n    const response = await httpClient.default.get${capitalizedPlural}({\n      conditions,\n      filters,\n      limit,\n      offset\n    });\n\n    dispatch(slice.actions.add${capitalizedPlural}(response?.body));\n\n    dispatch(slice.actions.setActionInProgress({\n      type: 'get${capitalizedPlural}',\n      inProgress: false,\n    }));\n  } catch (err: any) {\n    const exception = new Exception('Error getting ${capitalizedPlural}', { cause: err });\n\n    dispatch(slice.actions.setActionError({\n      type: 'get${capitalizedPlural}',\n      error: exception.toJSON(),\n    }));\n\n    dispatch(slice.actions.setActionInProgress({\n      type: 'get${capitalizedPlural}',\n      inProgress: false,\n    }));\n  }\n};\n\n\nexport const update${modelName} = (${singularCamel}: ${modelName}): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${modelName}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.update${modelName}(${singularCamel}.id, ${singularCamel});\n  \n      if (response?.body) {\n        dispatch(slice.actions.update${modelName}({ id: ${singularCamel}.id, changes: response.body }));\n    \n        dispatch(slice.actions.setActionInProgress({\n          type: 'update${modelName}',\n          inProgress: false,\n        }));\n      }\n    } catch (err: any) {\n      const exception = new Exception('Error updating ${modelName}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'update${modelName}',\n        error: exception.toJSON(),\n      }));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${modelName}',\n        inProgress: false,\n      }));\n    }\n  };\n  \n\nexport const update${capitalizedPlural} = (${pluralizedCamel}: ${modelName}[]): AppThunk =>\n  async (dispatch: AppDispatch, getState: () => RootState) => {\n    try {\n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${capitalizedPlural}',\n        inProgress: true,\n      }));\n  \n      const response = await httpClient.default.update${capitalizedPlural}(${pluralizedCamel});\n      \n      dispatch(slice.actions.update${capitalizedPlural}(response?.body));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${capitalizedPlural}',\n        inProgress: false,\n      }));\n    } catch (err: any) {\n      const exception = new Exception('Error updating ${capitalizedPlural}', { cause: err });\n\n      dispatch(slice.actions.setActionError({\n        type: 'update${capitalizedPlural}',\n        error: exception.toJSON(),\n      }));\n  \n      dispatch(slice.actions.setActionInProgress({\n        type: 'update${capitalizedPlural}',\n        inProgress: false,\n      }));\n    }\n  };\n\n\nexport default slice.reducer;\n  `;\n}\n\nexport async function buildRtkSlices(config: WorkspaceConfig): Promise<void> {\n  try {\n    const MODELS_PATH = path.join(path.resolve(), 'sdk/models/src/srclaunch');\n    const BUILD_PATH = path.join(path.resolve(), 'sdk/rtk-slices/src');\n    const DIST_PATH = path.join(path.resolve(), 'sdk/rtk-slices/dist');\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const files = await fs.readdir(MODELS_PATH);\n\n    for (const file of files) {\n      if (file !== 'index.ts') {\n        const name = pluralize(\n          file[0]?.toLowerCase() + file.slice(1).replace('.ts', ''),\n        );\n\n        const reduxSlice = getModelSlice({\n          httpClientProjectName: config.sdk?.httpClient.name,\n          modelName: file.replace('.ts', ''),\n          typesProjectName: config.sdk?.types.name,\n        });\n\n        // logger.info(`Writing ${name} Redux slice`);\n\n        await fs.writeFile(\n          path.join(BUILD_PATH, `${name}.ts`),\n          reduxSlice,\n          'utf8',\n        );\n      }\n    }\n\n    const indexFileContent = constructReduxReducersIndexScript(\n      files\n        .filter(f => f !== 'index.ts')\n        .map(file => pluralize(file).replace('.ts', '')),\n    );\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "import {\n  MenuField,\n  Model,\n  ModelField,\n  Primitives,\n  Relationship,\n} from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { constructModelExportIndexScript } from '../exports.js';\nimport { getTypescriptTypeFromPrimitive } from '../types.js';\nimport { getPrimitiveImports } from './types.js';\n\nexport function getSequelizeTypeFromPrimitive(type: Primitives) {\n  switch (type) {\n    case Primitives.Boolean:\n      return 'DataTypes.BOOLEAN';\n    case Primitives.DayOfMonth:\n      return 'DataTypes.INTEGER';\n    case Primitives.Weekday:\n      return 'DataTypes.STRING';\n    case Primitives.Float:\n      return 'DataTypes.FLOAT';\n    case Primitives.CurrencyCode:\n      return 'DataTypes.STRING';\n    case Primitives.DateTime:\n      return 'DataTypes.DATE';\n    case Primitives.Image:\n      return 'DataTypes.JSONB';\n    case Primitives.JSON:\n      return 'DataTypes.JSONB';\n    case Primitives.LongText:\n      return 'DataTypes.STRING';\n    case Primitives.Markdown:\n      return 'DataTypes.TEXT';\n    case Primitives.Menu:\n      return 'DataTypes.ENUM';\n    case Primitives.Month:\n      return 'DataTypes.INTEGER';\n    case Primitives.Number:\n      return 'DataTypes.INTEGER';\n    case Primitives.Tags:\n      return 'DataTypes.ARRAY(DataTypes.STRING)';\n    case Primitives.String:\n      return 'DataTypes.STRING';\n    case Primitives.UUID:\n      return 'DataTypes.UUID';\n    // case Primitives.UnofficialCurrencyCode:\n    //   return 'string';\n    default:\n      return 'DataTypes.STRING';\n  }\n}\n\n// function getSequelizePrimitives(type: Primitives) {\n//   switch (type) {\n//     case Primitives.Boolean:\n//       return 'DataTypes.BOOLEAN';\n//     case Primitives.DayOfMonth:\n//       return 'DataTypes.INTEGER';\n//     case Primitives.Weekday:\n//       return 'DataTypes.STRING';\n//     case Primitives.Float:\n//       return 'DataTypes.FLOAT';\n//     case Primitives.Currency:\n//       return 'DataTypes.STRING';\n//     case Primitives.DateTime:\n//       return 'DataTypes.DATE';\n//     case Primitives.JSON:\n//       return 'DataTypes.JSONB';\n//     case Primitives.LongText:\n//       return 'DataTypes.TEXT';\n//     case Primitives.Markdown:\n//       return 'DataTypes.TEXT';\n//     case Primitives.Menu:\n//       return 'DataTypes.ENUM';\n//     case Primitives.Month:\n//       return 'DataTypes.INTEGER';\n//     case Primitives.Number:\n//       return 'DataTypes.INTEGER';\n//     case Primitives.Tags:\n//       return 'DataTypes.JSONB';\n//     case Primitives.String:\n//       return 'DataTypes.STRING';\n//     case Primitives.UUID:\n//       return 'DataTypes.UUIDV4';\n//     // case Primitives.UnofficialCurrencyCode:\n//     //   return 'DataTypes.STRING';\n//     default:\n//       return 'string';\n//   }\n// }\n\nexport function constructSequelizeModelClassStr(model: Model): string {\n  const typePropertiesString = constructTypePropsFromFields(model.fields, true);\n  const classPropertiesString = constructSequelizeClassPropsWithTypes(model);\n\n  return `export type ${model.name}Attributes = {\n  ${typePropertiesString}\n};\n\nexport type ${model.name}CreationAttributes = Optional<${model.name}Attributes, 'id'>;\nexport class ${model.name} extends Model<\n  ${model.name}Attributes,\n  ${model.name}CreationAttributes\n> implements ${model.name}Attributes {\n${classPropertiesString}\n}\n`;\n}\n\nexport function constructTypePropsFromFields(\n  fields: Model['fields'],\n  sequelize = false,\n): string {\n  let fieldsString = ` id: string;\n  `;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsString += `  ${field[0]}${\n      field[1].required ? '' : '?'\n    }: ${getTypescriptTypeFromPrimitive(field[1].type)} ${\n      field[1].required ? '' : '| null'\n    };\\n`;\n  }\n\n  return fieldsString;\n}\n\nfunction constructSequelizeClassPropsWithTypes(model: Model): string {\n  let fieldsString = ` declare readonly id: string;\n\n  public static associate: (models: Record<string, ModelStatic<Model>>) => void;\n`;\n\n  for (const field of [...Object.entries(model.fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsString += `  declare ${field[0]}: ${getTypescriptTypeFromPrimitive(\n      field[1].type,\n    )}${!field[1].required ? ' | null' : ''};\\n`;\n  }\n\n  // if (model.relationships) {\n  //   const { belongsTo, hasOne, hasMany } = model.relationships;\n\n  //   let belongsToStr = '';\n\n  //   if (Array.isArray(belongsTo) && belongsTo.length > 0) {\n  //     belongsTo.forEach(m => {\n  //       belongsToStr += `    public ${m}Id!: string;`;\n  //     });\n  //   }\n\n  //   let hasOneStr = '';\n\n  //   if (Array.isArray(hasOne) && hasOne.length > 0) {\n  //     hasOne.forEach(m => {\n  //       belongsToStr += `    public ${m}Id!: string;`;\n  //     });\n  //   }\n\n  //   fieldsStr += belongsToStr + hasOneStr;\n  // }\n\n  return fieldsString;\n}\n\nfunction constructSequelizeFieldString(\n  fieldName: string,\n  field: ModelField,\n): string {\n  const fieldType = getSequelizeTypeFromPrimitive(field.type);\n\n  if (fieldName) {\n    return `\\n  ${fieldName}: {\n        allowNull: ${field?.required ? 'false' : 'true'},\n        type: ${\n          fieldType === 'DataTypes.ENUM' && field.menu\n            ? `DataTypes.ENUM(${field.menu\n                .map((index: MenuField) => `'${index.value}'`)\n                .join(',')})`\n            : fieldType\n        }\n      },`;\n  }\n\n  return '';\n}\n\nfunction getSequelizeFieldsString(fields: Model['fields']): string {\n  let fieldsString = ` id: {\n        allowNull: false,\n        defaultValue: DataTypes.UUIDV4,\n        primaryKey: true,\n        type: DataTypes.UUID,\n      },`;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsString += constructSequelizeFieldString(field[0], field[1]);\n  }\n\n  return fieldsString;\n}\n\nexport function constructSequelizeModelRelationships(\n  modelName: string,\n  relationships?: Relationship,\n): string {\n  if (relationships) {\n    const { belongsTo, hasOne, hasMany } = relationships;\n\n    let belongsToString = '';\n\n    if (Array.isArray(belongsTo) && belongsTo.length > 0) {\n      for (const model of belongsTo) {\n        belongsToString += `\n          if (${model}) ${modelName}.belongsTo(${model});`;\n      }\n    }\n\n    let hasOneString = '';\n\n    if (Array.isArray(hasOne) && hasOne.length > 0) {\n      for (const model of hasOne) {\n        hasOneString += `     \n        if (${model}) ${modelName}.hasOne(${model});`;\n      }\n    }\n\n    let hasManyString = '';\n\n    if (Array.isArray(hasMany) && hasMany.length > 0) {\n      for (const model of hasMany) {\n        hasManyString += `\n        if (${model}) ${modelName}.hasMany(${model});`;\n      }\n    }\n\n    return belongsToString + hasOneString + hasManyString;\n  }\n\n  return '';\n}\n\nexport function constructSequelizeModelDependencies(\n  modelName: string,\n  relationships?: Relationship,\n): readonly string[] {\n  if (!relationships) {\n    return [];\n  }\n\n  const { belongsTo, hasOne, hasMany } = relationships;\n\n  return [\n    ...new Set([\n      ...(belongsTo && belongsTo.length > 0 ? belongsTo : []),\n      ...(hasOne && hasOne.length > 0 ? hasOne : []),\n      ...(hasMany && hasMany.length > 0 ? hasMany : []),\n    ]),\n  ];\n\n  // console.log('modelName', modelName);\n  // console.log('relationships', relationships);\n  // console.log('allRelationshipModels', allRelationshipModels);\n\n  // return allRelationshipModels;\n  // return (\n\n  // ).slice(0, -1);\n}\n\nexport function constructSequelizeModelFromModel(model: Model): string {\n  const classString = constructSequelizeModelClassStr(model);\n  const fieldsString = getSequelizeFieldsString(model.fields);\n  const dependentModels = constructSequelizeModelDependencies(\n    model.name,\n    model.relationships,\n  );\n\n  let modelImports = '';\n\n  for (const m of dependentModels) {\n    modelImports += `import { ${m} as ${m}Type } from './${m}';\\n`;\n  }\n\n  const dependentModelsString =\n    Array.isArray(dependentModels) && dependentModels.length > 0\n      ? `${dependentModels.filter(m => m !== model.name).join(', ')},`\n      : '';\n  // const dependentModelsTypesStr =\n  //   Array.isArray(dependentModels) && dependentModels.length > 0\n  //     ? `{ ${dependentModels\n  //         .map((m: string) => {\n  //           return `${m}: ModelStatic<${m}Type> `;\n  //         })\n  //         .join(',')\n  //         .slice(0, -1)} }`\n  //     : `{}`;\n\n  // console.log('dependentModelsTypesStr', dependentModelsTypesStr);\n  return `import { DataTypes, Sequelize, Model, ModelStatic, Optional } from 'sequelize';\n\n\n  ${getPrimitiveImports(model.fields)}\n  \n${classString}\n\nexport default (sequelize: Sequelize) => {\n    ${model.name}.init(\n      {${fieldsString}},\n      {\n        createdAt: 'created_date',\n        indexes: [{ fields: ['id'], unique: true }],\n        modelName: '${model.name}',\n        sequelize,\n        updatedAt: 'updated_date',\n      },\n    );\n  \n  ${\n    dependentModels.length === 0\n      ? ''\n      : `  ${\n          model.name\n        }.associate =  ({ ${dependentModelsString} }: Record<string, ModelStatic<Model>>) => {${constructSequelizeModelRelationships(\n          model.name,\n          model.relationships,\n        )}\n    };`\n  }\n  \n    return ${model.name};\n  };`;\n}\n\nexport async function buildSequelizeModels() {\n  try {\n    const MODELS_BUILD_PATH = path.join(\n      path.resolve(),\n      'sdk/models/dist/index.esm.js',\n    );\n    const BUILD_PATH = path.join(path.resolve(), 'sdk/sequelize-models/src');\n    const DIST_PATH = path.join(path.resolve(), 'sdk/sequelize-models/dist');\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    // console.log('MODELS_BUILD_PATH', MODELS_BUILD_PATH);\n    const Models = await import(MODELS_BUILD_PATH);\n\n    // console.log('Models', Models);\n    for (const model of Object.entries(Models as Record<string, Model>)) {\n      const modelName =\n        typeof model[1] === 'object' ? model[1].name : undefined;\n\n      if (!modelName) {\n        continue;\n      }\n\n      const sequelizeModel = constructSequelizeModelFromModel(model[1]);\n      const fileName = `${modelName}.ts`;\n      const filePath = path.join(BUILD_PATH, fileName);\n\n      // logger.info(`Writing ${modelName}.ts Sequelize model`);\n\n      await fs.writeFile(filePath, sequelizeModel, 'utf8');\n    }\n\n    const indexFileContent = constructModelExportIndexScript(\n      Object.keys(Models).filter(model => typeof model[1] === 'object'),\n      'sequelize',\n    );\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    await fs.writeFile(\n      path.join(BUILD_PATH, 'index.ts'),\n      indexFileContent,\n      'utf8',\n    );\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "export function constructModelExportIndexScript(\n  models: readonly string[],\n  modelFormat: 'json' | 'sequelize' | 'srclaunch' | 'ts' = 'srclaunch',\n): string | void {\n  try {\n    let indexFileExports = '';\n    let indexFileImports = '';\n    let sequelizeDefaultExports = 'export default {';\n\n    const fileExtension = `.${\n      modelFormat === 'srclaunch' || modelFormat === 'sequelize' ? 'ts' : 'json'\n    }`;\n\n    for (const model of models) {\n      const modelName = model.split(fileExtension)[0];\n\n      if (modelFormat === 'json') {\n        indexFileImports += `import ${modelName} from './${modelName}.json';\\n`;\n      } else if (modelFormat === 'sequelize') {\n        indexFileImports += `import ${modelName}Init, { ${modelName} } from './${modelName}';\\n`;\n        sequelizeDefaultExports += `${modelName}: ${modelName}Init,`;\n      } else {\n        indexFileImports += `import { default as ${modelName} } from './${modelName}';\\n`;\n      }\n\n      indexFileExports += `  ${modelName},\\n`;\n    }\n\n    if (modelFormat === 'sequelize') {\n      sequelizeDefaultExports += '};';\n    }\n\n    return `${indexFileImports}\\nexport {\\n${indexFileExports}};\\n${\n      modelFormat === 'sequelize' ? sequelizeDefaultExports : ''\n    }\\n`;\n  } catch (error: any) {\n    console.error(error);\n  }\n}\n\nexport async function constructSrcLaunchModelExports() {\n  return `import { Model } from '@srclaunch/types';\nexport * from \"./srclaunch/index\";\n\nimport * as Models from \"./srclaunch/index\";\n\nexport function getModels(): Record<string, Model> {\n  return Models as Record<string, Model>;\n}`;\n}\n", "import { Model, Primitives } from '@srclaunch/types';\n\nexport function getTypescriptTypeFromPrimitive(type: Primitives) {\n  switch (type) {\n    case Primitives.Boolean:\n      return 'boolean';\n    case Primitives.DayOfMonth:\n      return 'number';\n    case Primitives.Weekday:\n      return 'string';\n    case Primitives.Float:\n      return 'number';\n    case Primitives.CurrencyCode:\n      return 'string';\n    case Primitives.DateTime:\n      return 'Date';\n    case Primitives.Image:\n        return 'Image[]';\n    case Primitives.JSON:\n      return 'Record<string, any>';\n    case Primitives.LongText:\n      return 'string';\n    case Primitives.Markdown:\n      return 'string';\n    case Primitives.Menu:\n      return 'Menu';\n    case Primitives.Month:\n      return 'number';\n    case Primitives.Number:\n      return 'number';\n    case Primitives.Tags:\n      return 'string[]';\n    case Primitives.String:\n      return 'string';\n    case Primitives.UUID:\n      return 'string';\n    // case Primitives.UnofficialCurrencyCode:\n    //   return 'string';\n    default:\n      return 'unknown';\n  }\n}\n\nfunction constructClassPropsWithTypes(fields: Model['fields']): string {\n  let fieldsStr = ` public readonly id!: string;\n  public readonly created_date!: Date;\n  public readonly updated_date!: Date;\n  `;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += `public ${field[0]}!: ${getTypescriptTypeFromPrimitive(\n      field[1].type,\n    )} ${!field[1].required ? '| null' : ''};\\n`;\n  }\n\n  return fieldsStr;\n}\n\nexport function constructTypesStr(model: Model): string {\n  const typePropertiesStr = constructTypePropsFromFields(model.fields);\n  const classPropertiesStr = constructClassPropsWithTypes(model.fields);\n\n  return `import { Menu } from '@srclaunch/types';\n  \nexport type ${model.name}Attributes = {\n  ${typePropertiesStr}\n};\n\nexport default class ${model.name} implements ${model.name}Attributes {\n${classPropertiesStr}\n}\n`;\n}\n\nexport function constructTypePropsFromFields(fields: Model['fields']): string {\n  let fieldsStr = `  id: string;\n  created_date: DateTime;\n  updated_date: DateTime;\n`;\n\n  for (const field of [...Object.entries(fields)].sort((a, b) =>\n    a[0].localeCompare(b[0]),\n  )) {\n    fieldsStr += `  ${field[0]}${\n      !field[1].required ? '?' : ''\n    }: ${getTypescriptTypeFromPrimitive(field[1].type)} ${\n      !field[1].required ? '| null' : ''\n    };\\n`;\n  }\n\n  return fieldsStr;\n}\n", "import { Model, ModelField, Primitives } from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport pluralize from 'pluralize';\n\nimport { getTypescriptTypeFromPrimitive } from '../types';\n\nconst snakeToPascal = (string_: string) => {\n  return string_\n    .split('/')\n    .map(snake =>\n      snake\n        .split('_')\n        .map(substr => substr.charAt(0).toUpperCase() + substr.slice(1))\n        .join(''),\n    )\n    .join('/');\n};\n\nexport function getPrimitiveImports(\n  fields: Record<string, ModelField>,\n): string {\n  let imports = 'import { ';\n\n  for (const f of Object.values(fields)) {\n    switch (f.type) {\n      case Primitives.Image:\n        if (!imports.includes(' Image,')) {\n          imports += 'Image, ';\n        }\n\n        break;\n      case Primitives.Menu:\n        if (!imports.includes(' Menu,')) {\n          imports += 'Menu, ';\n        }\n\n        break;\n      default:\n        break;\n    }\n  }\n\n  imports += \"} from '@srclaunch/types';\";\n\n  return imports;\n}\n\nexport function constructModelTypeFromModel(model: Model): string {\n  const fieldStrs = Object.entries(model.fields)\n    .map(([fieldName, field]) => {\n      return `\\n${fieldName}${field.required ? '' : '?'}: ${\n        field.type === Primitives.Menu\n          ? model.name + pluralize(snakeToPascal(fieldName))\n          : getTypescriptTypeFromPrimitive(field.type)\n      }${field.required ? ';' : ' | null;'}`;\n    })\n    .join('');\n\n  // if (model.relationships) {\n  //   const belongsTo = model.relationships.belongsTo;\n\n  //   if (belongsTo) {\n  //     for (const belong of belongsTo) {\n  //       fieldStrs += `\\n${belong}Id: string;`;\n  //     }\n  //   }\n  // }\n\n  let string_ = `${getPrimitiveImports(model.fields)}\\n`;\n\n  for (const [fieldName, field] of Object.entries(model.fields)) {\n    let enumString = '';\n\n    if (field.type === Primitives.Menu && field.menu) {\n      enumString += `export enum ${\n        model.name + pluralize(snakeToPascal(fieldName))\n      } {`;\n      const regex = /[^\\dA-Za-z]/g;\n\n      for (const item of field.menu) {\n        if (item.label) {\n          enumString += `\\n  ${snakeToPascal(item.label)\n            .replace(/ /g, '')\n            .replace(/0/g, 'Zero')\n            .replace(/1/g, 'One')\n            .replace(/2/g, 'Two')\n            .replace(/3/g, 'Three')\n            .replace(/4/g, 'Four')\n            .replace(/5/g, 'Five')\n            .replace(/6/g, 'Six')\n            .replace(/7/g, 'Seven')\n            .replace(/8/g, 'Eight')\n            .replace(/9/g, 'Nine')\n            .replace(regex, '')} = \"${item.value}\",`;\n        }\n      }\n\n      enumString += '};\\n\\n';\n    }\n\n    string_ += `\\n${enumString}`;\n  }\n\n  string_ += `export type ${model.name} = {\n    id?: string;${fieldStrs}\n  };`;\n\n  return string_;\n}\n\nexport function getModelExports(model: Model): string {\n  let string_ = `export { ${model.name} } from './${model.name}';\\n`;\n\n  let enumString = '';\n\n  for (const [fieldName, field] of Object.entries(model.fields)) {\n    if (field.type === Primitives.Menu && field.menu) {\n      enumString += `${model.name + pluralize(snakeToPascal(fieldName))},`;\n    }\n  }\n\n  if (enumString.length > 0) {\n    string_ += `export {${enumString}} from './${model.name}';\\n`;\n  }\n\n  return string_;\n}\n\nexport async function buildModelTypes() {\n  try {\n    const MODELS_BUILD_PATH = path.join(\n      path.resolve(),\n      'sdk/models/dist/index.esm.js',\n    );\n    const BUILD_PATH = path.join(path.resolve(), 'sdk/types', 'src');\n    const DIST_PATH = path.join(path.resolve(), 'sdk/types', 'dist');\n    const TYPES_DIR_PATH = path.join(path.resolve(), 'types');\n\n    await fs.emptyDir(BUILD_PATH);\n    await fs.emptyDir(DIST_PATH);\n\n    const files = await fs.readdir(TYPES_DIR_PATH);\n\n    for (const file of files) {\n      const fileContents = await fs.readFile(\n        path.join(TYPES_DIR_PATH, file),\n        'utf8',\n      );\n\n      await fs.writeFile(path.join(BUILD_PATH, file), fileContents, 'utf8');\n    }\n\n    const Models = await import(MODELS_BUILD_PATH);\n\n    let exportString = '';\n\n    for (const model of Object.entries(Models as Record<string, Model>)) {\n      const modelName =\n        typeof model[1] === 'object' ? model[1].name : undefined;\n\n      if (!modelName) {\n        continue;\n      }\n\n      const types = constructModelTypeFromModel(model[1]);\n      const fileName = `${modelName}.ts`;\n      const filePath = path.join(BUILD_PATH, fileName);\n\n      // logger.info(`Writing model types to ${modelName}.ts`);\n\n      await fs.writeFile(filePath, types, 'utf8');\n\n      exportString += getModelExports(model[1]);\n    }\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    await fs.writeFile(path.join(BUILD_PATH, 'index.ts'), exportString, 'utf8');\n  } catch (error: any) {\n    console.error('err', error);\n    throw error;\n  }\n}\n", "import fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { constructSrcLaunchModelExports } from '../exports';\nimport { buildSrcLaunchModels } from '../outputs/srclaunch';\nimport {\n  getDocumentModel,\n  getInvoiceModel,\n  getMessageModel,\n  getOrganizationModel,\n  getPaymentMethodModel,\n  getPaymentModel,\n  getPersonModel,\n  getSubscriptionModel,\n  getTeamModel,\n  getUserGroupModel,\n  getUserModel,\n  getUserRoleModel,\n} from './models';\n\nexport async function copyStubModels() {\n  try {\n    const BUILD_PATH = path.join(path.resolve(), 'sdk/models/src');\n\n    await fs.ensureDir(BUILD_PATH);\n\n    const modelsPath = path.join(BUILD_PATH, 'srclaunch');\n    await fs.ensureDir(modelsPath);\n\n    const modelExportsIndexFile = await constructSrcLaunchModelExports();\n\n    await Promise.all([\n      await fs.writeFile(\n        path.join(modelsPath, 'Message.ts'),\n        getMessageModel(),\n        'utf8',\n      ),\n      await fs.writeFile(\n        path.join(modelsPath, 'Organization.ts'),\n        getOrganizationModel(),\n      ),\n      await fs.writeFile(path.join(modelsPath, 'Team.ts'), getTeamModel()),\n      await fs.writeFile(\n        path.join(modelsPath, 'Document.ts'),\n        getDocumentModel(),\n      ),\n      await fs.writeFile(\n        path.join(modelsPath, 'Payment.ts'),\n        getPaymentModel(),\n      ),\n      await fs.writeFile(\n        path.join(modelsPath, 'Invoice.ts'),\n        getInvoiceModel(),\n      ),\n      await fs.writeFile(\n        path.join(modelsPath, 'PaymentMethod.ts'),\n        getPaymentMethodModel(),\n      ),\n      await fs.writeFile(path.join(modelsPath, 'Person.ts'), getPersonModel()),\n      await fs.writeFile(\n        path.join(modelsPath, 'Subscription.ts'),\n        getSubscriptionModel(),\n      ),\n      await fs.writeFile(path.join(modelsPath, 'User.ts'), getUserModel()),\n      await fs.writeFile(\n        path.join(modelsPath, 'UserGroup.ts'),\n        getUserGroupModel(),\n      ),\n      await fs.writeFile(\n        path.join(modelsPath, 'UserRole.ts'),\n        getUserRoleModel(),\n      ),\n      await buildSrcLaunchModels('srclaunch', 'sdk/models'),\n      await fs.writeFile(\n        path.join(BUILD_PATH, 'index.ts'),\n        modelExportsIndexFile,\n        'utf8',\n      ),\n    ]).catch(error => {\n      console.error(error);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\n", "// import { emptyDirectory, readFile, writeFile } from '@srclaunch/logic';\nimport fs from 'fs-extra';\nimport path from 'node:path';\nimport { create, register, Transpiler } from 'ts-node';\nimport ts from 'typescript';\n\nimport { constructModelExportIndexScript } from '../exports.js';\n\nexport async function buildSrcLaunchModels(\n  modelsPath: string,\n  projectPath: string,\n): Promise<void> {\n  try {\n    const BUILD_PATH = path.join(path.resolve(), projectPath, 'src');\n    const MODELS_PATH = path.join(BUILD_PATH, modelsPath);\n    // await emptyDirectory(BUILD_PATH);\n\n    const files = await fs.readdir(MODELS_PATH);\n    // const files: string[] = [];\n    for (const file of files) {\n      if (file === 'index.ts') {\n        continue;\n      }\n      const fileContentsBuffer = await fs.readFile(\n        path.join(MODELS_PATH, file),\n      );\n      const fileContents = fileContentsBuffer.toString();\n\n      // register();\n      // const defaultExport = await import(path.join(MODELS_PATH, file));\n\n      // console.log('defaultExport', defaultExport);\n      // const sourceFile = ts.createSourceFile(\n      //   file,\n      //   fileContents,\n      //   ts.ScriptTarget.ES2022,\n      //   true,\n      // );\n      // const program = ts.createProgram([sourceFile.], {});\n\n      // const result = program.emit(sourceFile);\n      // const transpile = ts.transpileModule(fileContents, {\n      //   compilerOptions: {\n      //     module: ts.ModuleKind.ES2022,\n      //   },\n      //   fileName: file,\n      // });\n\n      // console.log(transpile);\n      // const program: ts.Program = ts.createProgram(\n      //   [path.join(MODELS_PATH, file)],\n      //   {\n      //     noEmit: true,\n      //   },\n      // );\n      // const emitResult = program.emit();\n      // console.log('emitResult', emitResult);\n      // const allDiagnostics = ts\n      //   .getPreEmitDiagnostics(program)\n      //   .concat(emitResult.diagnostics);\n\n      // const namePropertyExists = fileContents.includes('name:');\n\n      // if (namePropertyExists) {\n      //   const namePropertyIndex = fileContents.indexOf('name:');\n      //   const namePropertyEndIndex = fileContents.indexOf(\n      //     ',',\n      //     namePropertyIndex,\n      //   );\n\n      //   const nameProperty = fileContents.slice(\n      //     namePropertyIndex,\n      //     namePropertyEndIndex,\n      //   );\n\n      //   // const namePropertyKey = nameProperty.split(':')[0];\n      //   // const namePropertyValue = nameProperty.split(':')[1];\n\n      //   console.log('nameProperty', nameProperty);\n      // }\n\n      const fieldsPropertyExists = fileContents.includes('fields: {');\n\n      if (!fieldsPropertyExists) {\n        throw new Error(`${file} is missing the fields property.`);\n      }\n\n      let entityFields = `\n      created_date: {\n        label: 'Created Date',\n        required: false,\n        type: Primitives.DateTime,\n      },\n      updated_date: {\n        label: 'Updated Date',\n        required: false,\n        type: Primitives.DateTime,\n      },\n    `;\n\n      const relationshipsStart = fileContents.indexOf('relationships:') + 15;\n      const relationshipsEnd =\n        fileContents.indexOf('}', relationshipsStart) + 1;\n      const relationships = fileContents.slice(\n        relationshipsStart,\n        relationshipsEnd,\n      );\n\n      if (relationships) {\n        const belongsToStart = relationships.indexOf('belongsTo:');\n\n        if (belongsToStart > -1) {\n          const belongsToEnd =\n            relationships.indexOf(']', belongsToStart + 10) + 1;\n          const belongsTo = relationships.slice(\n            belongsToStart + 10,\n            belongsToEnd,\n          );\n\n          if (belongsTo) {\n            const transformed = belongsTo\n              .replace(/'/g, '\"')\n              .replace(/ {2}|\\r\\n|\\n|\\r/g, '')\n              .replace(/\\s/g, '')\n              .replace(',]', ']');\n\n            const belongsToFields = JSON.parse(transformed);\n\n            for (const relationship of belongsToFields) {\n              entityFields += `\n          ${relationship}Id: {\n            label: '${relationship}',\n            required: false,\n            type: Primitives.UUID\n          },\n          `;\n            }\n          }\n        }\n      }\n\n      const updatedFileContents = fileContents.replace(\n        'fields: {',\n        `fields: {\n          ${entityFields}`,\n      );\n\n      // logger.info(`Writing ${file} model`);\n\n      await fs.writeFile(path.join(MODELS_PATH, file), updatedFileContents);\n    }\n\n    // logger.info(`Writing ${BUILD_PATH}/index.ts`);\n\n    const buildModels = await fs.readdir(MODELS_PATH);\n    // const buildModels: string[] = [];\n    const models = buildModels.filter(file => {\n      return file.slice(-3) === '.ts' && file.split('.ts')[0] !== 'index';\n    });\n\n    const indexFileContent = constructModelExportIndexScript(\n      models,\n      'srclaunch',\n    );\n\n    if (indexFileContent) {\n      await fs.writeFile(path.join(MODELS_PATH, 'index.ts'), indexFileContent);\n    }\n  } catch (error: any) {\n    console.error(error);\n    throw error;\n  }\n}\n", "export function getDocumentModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export default <ModelProps>{\n    fields: {\n      name: {\n        label: \"Name\",\n        type: Primitives.String,\n        required: true,\n      },\n      description: {\n        label: \"Description\",\n        type: Primitives.String,\n        required: true,\n      }\n    },\n    name: \"Document\",\n    relationships: {\n      belongsTo: [\"Organization\", \"Invoice\", \"User\"],\n    },\n  };\n  `;\n}\n\nexport function getMessageModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n    fields: {\n      message: {\n        label: \"Message\",\n        type: Primitives.String,\n        required: true,\n      },\n      recipient: {\n        label: \"Recipient\",\n        type: Primitives.String,\n        required: false,\n      }\n    },\n    name: \"Message\",\n    relationships: {\n      belongsTo: [\"Organization\", \"User\"],\n    },\n  };`;\n}\n\nexport function getInvoiceModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export default <ModelProps>{\n    fields: {\n      amount: {\n        label: \"Amount\",\n        type: Primitives.Number,\n        required: true,\n      },\n      currency: {\n        label: \"Currency\",\n        type: Primitives.CurrencyCode,\n        required: true,\n      },\n      date: {\n        label: \"Date\",\n        type: Primitives.Date,\n        required: true,\n      },\n      due_date: {\n        label: \"Due Date\",\n        type: Primitives.Date,\n        required: true,\n      },\n      notes: {\n        label: \"Notes\",\n        type: Primitives.String,\n      },\n      status: {\n        label: \"Status\",\n        type: Primitives.String,\n        required: true,\n      },\n    },\n    name: \"Invoice\",\n    relationships: {\n      belongsTo: [\"Organization\", \"Payment\", \"User\"],\n    },\n  };`;\n}\n\nexport function getOrganizationModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"Organization\",\n  relationships: {},\n};`;\n}\n\nexport function getPaymentModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\n  export default <ModelProps>{\n    fields: {\n      amount: {\n        label: \"Amount\",\n        type: Primitives.Number,\n        required: true,\n      },\n      currency: {\n        label: \"Currency\",\n        type: Primitives.CurrencyCode,\n        required: true,\n      },\n      date: {\n        label: \"Date\",\n        type: Primitives.Date,\n        required: true,\n      },\n      failure_reason: {\n        label: \"Failure Reason\",\n        type: Primitives.Menu,\n        menu: [\n          {\n            label: 'Insufficient Funds',\n            value: 'insufficient-funds',\n          },\n          {\n            label: 'Invalid Amount',\n            value: 'invalid-amount',\n          },\n          {\n            label: 'Invalid Currency',\n            value: 'invalid-currency',\n          },\n          {\n            label: 'Invalid Card',\n            value: 'invalid-card',\n          },\n          {\n            label: 'Invalid Card Expiry',\n            value: 'invalid-card-expiry',\n          },\n          {\n            label: 'Invalid Card Number',\n            value: 'invalid-card-number',\n          },\n          {\n            label: 'Invalid Card Security Code',\n            value: 'invalid-card-security-code',\n          },\n          {\n            label: 'Invalid Card Holder',\n            value: 'invalid-card-holder',\n          },\n          {\n            label: 'Invalid Card Address',\n            value: 'invalid-card-address',\n          },\n        ]\n      },\n      notes: {\n        label: \"Notes\",\n        type: Primitives.String,\n        required: true,\n      },\n      status: {\n        label: \"Status\",\n        type: Primitives.Menu,\n        required: true,\n        menu: [\n          {\n            label: \"Paid\",\n            value: \"paid\",\n          },\n          {\n            label: \"Failure\",\n            value: \"failure\",\n          },\n          {\n            label: \"Pending\",\n            value: \"pending\",\n          },\n        ],\n      }\n    },\n    name: \"Payment\",\n    relationships: {\n      belongsTo: [\"Organization\", \"User\"],\n    },\n  };`;\n}\n\nexport function getPaymentMethodModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    default: {\n      label: \"Default\",\n      type: Primitives.Boolean,\n    },\n    masked_number: {\n      label: \"Number\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n    type: {\n      label: \"Type\",\n      menu: [\n        {\n          label: \"Bank Transfer\",\n          value: \"bank-transfer\",\n        },\n        {\n          label: \"Credit Card\",\n          value: \"credit-card\",\n        },\n        {\n          label: \"Crypto\",\n          value: \"crypto\",\n        },\n      ],\n      type: Primitives.Menu,\n    },\n  },\n  name: \"PaymentMethod\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Payment\", \"Team\", \"User\"],\n  },\n};`;\n}\n\nexport function getPersonModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    analytics: {\n      label: \"Analytics\",\n      type: Primitives.JSON,\n    },\n    billing: {\n      label: \"Billing Details\",\n      type: Primitives.JSON,\n    },\n  },\n  name: \"Person\",\n  relationships: {\n    hasMany: [\"Event\"],\n    hasOne: [\"User\"],\n  },\n};`;\n}\n\nexport function getSubscriptionModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    status: {\n      label: \"Status\",\n      menu: [\n        {\n          label: \"Active\",\n          value: \"active\",\n        },\n        {\n          label: \"Expired\",\n          value: \"expired\",\n        },\n        {\n          label: \"Canceled\",\n          value: \"canceled\",\n        },\n      ],\n      type: Primitives.Menu,\n    },\n    cancel_date: {\n      label: \"Cancel date\",\n      type: Primitives.DateTime,\n    },\n    expiration_date: {\n      label: \"Expiration date\",\n      type: Primitives.DateTime,\n    },\n    renewal_date: {\n      label: \"Renewal date\",\n      type: Primitives.DateTime,\n    },\n    start_date: {\n      label: \"Start date\",\n      type: Primitives.DateTime,\n    },\n  },\n  name: \"Subscription\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Product\", \"Team\", \"User\"],\n  },\n};`;\n}\n\nexport function getTeamModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"Team\",\n  relationships: {\n    belongsTo: [\"Organization\"],\n  },\n};`;\n}\n\nexport function getUserModel() {\n  return `import {\n  CurrencyCode,\n  LanguageCode,\n  LocaleCode,\n  ModelProps,\n  Primitives,\n} from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  description: \"A user that signs into the application\",\n  fields: {\n    access: {\n      label: \"Access Details\",\n      type: Primitives.JSON,\n    },\n    cognito_id: {\n      label: \"Cognito ID\",\n      type: Primitives.String,\n    },\n    membership: {\n      label: \"Membership\",\n      type: Primitives.JSON,\n    },\n    onboarding: {\n      label: \"Onboarding\",\n      type: Primitives.JSON,\n    },\n    preferences: {\n      defaultValue: {\n        accessibility: {\n          outlines: false,\n        },\n        localization: {\n          currency: CurrencyCode.UnitedStatesDollar,\n          language: LanguageCode.English,\n          locale: LocaleCode.EnglishUnitedStates,\n        },\n        look_and_feel: {\n          theme: \"light\",\n        },\n      },\n      label: \"Preferences\",\n      type: Primitives.JSON,\n    },\n  },\n  name: \"User\",\n  relationships: {\n    belongsTo: [\"Person\", \"Team\"]\n  },\n};`;\n}\n\nexport function getUserGroupModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"UserGroup\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Team\"],\n  },\n};`;\n}\n\nexport function getUserRoleModel() {\n  return `import { ModelProps, Primitives } from \"@srclaunch/types\";\n\nexport default <ModelProps>{\n  fields: {\n    description: {\n      label: \"Description\",\n      type: Primitives.String,\n    },\n    name: {\n      label: \"Name\",\n      type: Primitives.String,\n    },\n  },\n  name: \"UserRole\",\n  relationships: {\n    belongsTo: [\"Organization\", \"Team\"],\n  },\n};`;\n}\n", "// import { listDirectoryContents } from \"@srclaunch/logic\";\n\nimport path from \"node:path\";\n\nexport async function listModels() {\n  const modelsPath = path.join(\"models\");\n\n  // const files = (await listDirectoryContents(modelsPath)).filter((file) => {\n  //   return file.slice(-3) === \".ts\" && file.split(\".ts\")[0] !== \"index\";\n  // });\n\n  // console.info(files.map((file) => file.split(\".ts\")[0]).toString());\n}\n", "import {\n  ChangeType,\n  CodeFormatter,\n  CodeLinter,\n  ProjectConfig,\n  ProjectType,\n  StaticTyping,\n  TestTool,\n  WorkspaceConfig,\n} from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\nimport pc from 'picocolors';\n\nimport { createChangeset } from '../lib/changesets';\nimport { shellExec } from '../lib/cli';\n// import { ensureDirectoryExists, readFile } from '../lib/file-system';\n// import ora from 'ora';\n// import {\n//   generateGitIgnoreConfig,\n//   generateNodePackageManifest,\n//   generateYarnConfig,\n//   ensureDirectoryExists,\n//   readFile,\n//   writeFile,\n//   YarnNodeLinker,\n// } from \"@srclaunch/logic\";\nimport { Command, CommandType } from '../lib/command';\nimport { push } from '../lib/git';\nimport {\n  cleanBuild,\n  cleanDependencies,\n  cleanTestCoverage,\n} from '../lib/project/clean';\nimport {\n  getDependencies,\n  getDevDependencies,\n} from '../lib/project/dependencies';\nimport { writeToolingConfiguration } from '../lib/project/tooling';\n\ntype ProjectSetupFlags = TypedFlags<{\n  readonly build: {\n    readonly alias: 'b';\n    readonly default: false;\n    readonly description: 'The library will only be built, and not tested.';\n    readonly type: 'boolean';\n  };\n  readonly push: {\n    readonly alias: 'p';\n    readonly default: false;\n    readonly description: 'Pushes changes to remote repository';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly react: {\n    readonly default: false;\n    readonly description: 'The library includes React components.';\n    readonly type: 'boolean';\n  };\n  readonly reactRouter: {\n    readonly default: false;\n    readonly description: 'The library uses React Router.';\n    readonly type: 'boolean';\n  };\n  readonly release: {\n    readonly default: false;\n    readonly description: 'Add scripts and dependencies for creating project releases.';\n    readonly type: 'boolean';\n  };\n  readonly styledComponents: {\n    readonly default: false;\n    readonly description: 'The library includes Styled Components.';\n    readonly type: 'boolean';\n  };\n  readonly test: {\n    readonly default: false;\n    readonly description: 'The library includes build and test scripts.';\n    readonly type: 'boolean';\n  };\n}>;\n\nexport default new Command<WorkspaceConfig & ProjectConfig>({\n  commands: [\n    new Command<WorkspaceConfig>({\n      description: 'Create a new SrcLaunch project',\n      name: 'create',\n      run: async () => {\n        // const projectName = await prompt('Project name:');\n      },\n      type: CommandType.Workspace,\n    }),\n    new Command<ProjectConfig>({\n      description: 'Sync SrcLaunch configuration with project',\n      name: 'sync',\n      run: async () => {\n        // const projectName = await prompt('Project name:');\n      },\n      type: CommandType.Workspace,\n    }),\n\n    new Command<ProjectConfig, ProjectSetupFlags>({\n      description: 'Setup a project for use with SrcLaunch',\n      name: 'setup',\n      run: async ({ config, flags }) => {\n        if (!config) {\n          console.log(pc.red('No project configuration found'));\n        }\n\n        const build = Boolean(config.build) ?? Boolean(flags['build']);\n        const test = Boolean(config.test) ?? Boolean(flags['test']);\n        // const spinner = ora({\n        //   discardStdin: true,\n        //   spinner: 'dots',\n        //   text: pc.cyan(\n        //     `Setting up ${pc.bold(config.name)} from SrcLaunch config...`,\n        //   ),\n        // });\n\n        try {\n          // spinner.start('Updating dependencies...');\n\n          // const existingPackageManifest = await JSON.parse(\n          //   (await readFile(\"package.json\")).toString()\n          //   '{}'\n          // );\n          const coreDevDependencies = await getDevDependencies({\n            ava: config.test?.tool === TestTool.Ava,\n            eslint: config?.environments?.development?.linters?.includes(\n              CodeLinter.ESLint,\n            ),\n            github: config.type === ProjectType.GitHubAction,\n            jest: config.test?.tool === TestTool.Jest,\n            jestReact:\n              config.test?.tool === TestTool.Jest ||\n              (flags.react && test) ||\n              (config.type === ProjectType.WebApplication && test) ||\n              (config.type === ProjectType.ComponentLibrary && test) ||\n              (config.type === ProjectType.IconLibrary && test) ||\n              (config.type === ProjectType.ThemeLibrary && test),\n            prettier: config?.environments?.development?.formatters?.includes(\n              CodeFormatter.Prettier,\n            ),\n            react:\n              config?.type === ProjectType.WebApplication ||\n              config?.type === ProjectType.ComponentLibrary ||\n              config.type === ProjectType.IconLibrary ||\n              config.type === ProjectType.ThemeLibrary ||\n              flags.react,\n            reactRouter: flags.reactRouter,\n            srclaunch: config?.requirements?.srclaunch,\n            styledComponents: flags.styledComponents,\n            stylelint: config?.environments?.development?.linters?.includes(\n              CodeLinter.Stylelint,\n            ),\n            testCoverage: Boolean(config.test?.coverage),\n            typescript:\n              config?.environments?.development?.staticTyping?.includes(\n                StaticTyping.TypeScript,\n              ),\n          });\n          // const devDependencies = await getDependencies({\n          //   dev: true,\n          //   packages: [\n          //     ...(config.requirements?.devPackages ?? []),\n          //     ...(config.requirements?.packages ?? []),\n          //     ...(config.requirements?.peerPackages ?? []),\n          //   ],\n          // });\n\n          // const dependencies = await getDependencies({\n          //   packages: config.requirements?.packages ?? [],\n          // });\n\n          // const peerDependencies = await getDependencies({\n          //   packages: config.requirements?.peerPackages ?? [],\n          // });\n\n          // const packageJSON = await generateNodePackageManifest({\n          //   name: config.name,\n          //   description: config.description,\n          //   author: \"Steven Bennett <steven@srclaunch.com>\",\n          //   // version: existingPackageManifest.version ?? \"0.0.0\",\n          //   engines: {\n          //     node: config.requirements?.node,\n          //     npm: config.requirements?.npm,\n          //     yarn: config.requirements?.yarn,\n          //   },\n          //   license:\n          //     config.release?.publish?.license ?? PROJECT_PACKAGE_JSON_LICENSE,\n          //   publishConfig: {\n          //     access: config?.release?.publish?.access ?? \"private\",\n          //     registry:\n          //       config.release?.publish?.registry ??\n          //       \"https://registry.npmjs.org/\",\n          //   },\n          //   type: config.package?.type ?? PROJECT_PACKAGE_JSON_TYPE,\n          //   main:\n          //     typeof config?.package?.main === \"undefined\"\n          //       ? PROJECT_PACKAGE_JSON_MAIN\n          //       : config.package.main,\n          //   types:\n          //     typeof config?.package?.types === \"undefined\"\n          //       ? PROJECT_PACKAGE_JSON_TYPES\n          //       : config.package.types !== null\n          //       ? config.package.types\n          //       : undefined,\n          //   files:\n          //     typeof config.package?.files === \"undefined\"\n          //       ? PROJECT_PACKAGE_JSON_FILES\n          //       : config.package.files,\n          //   module:\n          //     typeof config?.package?.module === \"undefined\"\n          //       ? PROJECT_PACKAGE_JSON_MODULE\n          //       : config.package.module,\n          //   exports:\n          //     typeof config.package?.exports === \"undefined\"\n          //       ? [\n          //           {\n          //             path: \".\",\n          //             import: `./${\n          //               // @ts-ignore // TODO: fix this\n          //               config.build?.output?.directory ?? BUILD_DIR\n          //               // @ts-ignore // TODO: fix this\n          //             }/${config.build?.output?.file ?? BUILD_FILE_NAME}.mjs`,\n          //             require: `./${\n          //               // @ts-ignore // TODO: fix this\n          //               config.build?.output?.directory ?? BUILD_DIR\n          //             }/${\n          //               // @ts-ignore // TODO: fix this\n          //               config.build?.output?.file ?? BUILD_FILE_NAME\n          //             }.umd.cjs`,\n          //           },\n          //         ]\n          //       : config.package?.exports,\n          //   scripts: {\n          //     ...getPackageScripts({\n          //       build: Boolean(config.build) || flags[\"build\"],\n          //       release: Boolean(config.release) || flags[\"release\"],\n          //       run: config.environments?.development?.run,\n          //       test: Boolean(config.test),\n          //     }),\n          //     ...config?.package?.scripts,\n          //   },\n          //   dependencies,\n          //   devDependencies: {\n          //     ...coreDevDependencies,\n          //     ...devDependencies,\n          //   },\n          //   peerDependencies,\n          // });\n\n          // await writeFile(\"package.json\", packageJSON);\n          // spinner.succeed('Dependencies updated');\n\n          // spinner.start('Cleaning project cache...');\n          await cleanDependencies();\n          await cleanBuild();\n          await cleanTestCoverage();\n          await createChangeset({\n            files: '.',\n            message: 'Clean installation cache',\n            type: ChangeType.Chore,\n          });\n\n          if (flags.push) {\n            // spinner.start('Pushing changes to remote...');\n            // const pushResult = await push({ followTags: false });\n            // spinner.succeed(\n            //   `Changes pushed to ${pc.bold(\n            //     pushResult.repo,\n            //   )} on branch ${pc.bold(pushResult.branch)}`,\n            // );\n          }\n\n          // await writeFile(\".gitignore\", generateGitIgnoreConfig());\n          await createChangeset({\n            files: ['./.gitignore'],\n            message: 'Update .gitignore',\n            type: ChangeType.Chore,\n          });\n          // spinner.succeed('Project cache cleaned');\n\n          // spinner.start('Initializing Yarn...');\n          // await writeFile(\n          //   \".yarnrc.yml\",\n          //   await generateYarnConfig({\n          //     nodeLinker: YarnNodeLinker.NodeModules,\n          //   })\n          // );\n          await shellExec('corepack enable yarn');\n          await shellExec('yarn set version stable');\n          await shellExec('yarn plugin import interactive-tools');\n\n          if (\n            config.environments?.development?.staticTyping?.includes(\n              StaticTyping.TypeScript,\n            )\n          ) {\n            await shellExec('yarn plugin import typescript');\n          }\n          // spinner.succeed('Initialized Yarn');\n\n          // spinner.start('Installing dependencies...');\n          await shellExec('yarn install');\n          // spinner.succeed('Installed project dependencies');\n\n          // const updatedPackageManifest = await JSON.parse(\n          //   (await readFile(\"packageon\")).toString()\n          // );\n          // const diff = diffJson(\n          //   existingPackageManifest,\n          //   updatedPackageManifest\n          // );\n          // if (diff.length > 1) {\n          //   console.info(pc.bold(\"> Changes to packageon:\"));\n          //   for (const change of diff) {\n          //     if (change.added) {\n          //       console.log(pc.bold(pc.green(`+ Added: ${change.count}`)));\n          //       console.log(pc.green(`+ ${change.value.toString().trim()}`));\n          //     }\n\n          //     if (change.removed) {\n          //       console.log(pc.bold(pc.red(`- Removed: ${change.count}`)));\n          //       console.log(pc.red(`- ${change.value.toString().trim()}`));\n          //     }\n          //   }\n          // }\n\n          /* \n            Create a GitHub Action workflow file based on the project\n            configuration.\n          */\n          // spinner.start('Creating GitHub Actions public workflow...');\n          // await ensureDirectoryExists(\".github/workflows\");\n          // await writeFile(\n          //   \".github/workflows/publish.yml\",\n          //   getPublishYml({ build, test })\n          // );\n          // spinner.succeed('Added GitHub Actions publish workflow');\n\n          /*\n            Create configuration files for linters, formatters and static typing\n            tools.\n          */\n          // spinner.start('Creating DX tooling configurations...');\n          await writeToolingConfiguration({\n            formatters: config.environments?.development?.formatters,\n            linters: config.environments?.development?.linters,\n            project: config,\n            staticTyping: config.environments?.development?.staticTyping,\n          });\n          // spinner.succeed('Created DX tooling configurations');\n\n          if (build) {\n            // spinner.start('Building project bundle...');\n            await shellExec('yarn build');\n            // spinner.succeed('Project compiled and bundled');\n          }\n\n          if (test) {\n            // spinner.start('Running test suite...');\n            await shellExec('yarn test');\n            // spinner.succeed('Test run complete');\n          }\n\n          // spinner.start('Creating release...');\n          await createChangeset({\n            files: '.',\n            message: 'Project setup',\n            type: ChangeType.Chore,\n          });\n\n          // const { branch, version } = await createRelease({\n          //   changesets: config.changesets,\n          // });\n          // spinner.succeed(`Created release ${version}`);\n\n          if (flags.push) {\n            // spinner.start(`Pushing release to branch ${pc.bold(branch)}...`);\n            // const result = await push({ followTags: true });\n            // spinner.succeed(\n            //   `Pushed release ${pc.bold(version)} to ${pc.bold(\n            //     result.repo,\n            //   )} on branch ${pc.bold(result.branch)}`,\n            // );\n          }\n        } catch (error: any) {\n          console.error(error);\n          // spinner.fail(pc.red(err));\n          process.exit(1);\n        }\n      },\n      type: CommandType.Project,\n    }),\n    new Command<WorkspaceConfig>({\n      description: 'Shows help for projects commands',\n      name: 'help',\n      run: async () => {\n        console.info('Available projects commands are: create, help');\n      },\n      type: CommandType.Workspace,\n    }),\n  ],\n  description: 'Manage project',\n  name: 'project',\n});\n", "import { exec } from 'child_process';\n\nexport async function shellExec(command: string): Promise<string> {\n  return new Promise(async (resolve, reject) => {\n    await exec(command, (error, stdout, stderr) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(stdout);\n      }\n    });\n  });\n}\n", "import path from 'node:path';\n// import { deleteDirectory, deleteFile, writeFile } from '@srclaunch/logic';\n\nexport async function cleanDependencies() {\n  // await deleteDirectory(path.resolve('node_modules'));\n  // await deleteDirectory(path.resolve('.yarn'));\n  // await deleteFile(path.resolve('yarn.lock'));\n  // await writeFile(path.resolve('yarn.lock'), '');\n}\n\nexport async function cleanBuild() {\n  // await deleteDirectory(path.resolve('dist'));\n}\n\nexport async function cleanTestCoverage() {\n  // await deleteDirectory(path.resolve('coverage'));\n}\n", "import {\n  BrowserPackage,\n  Dependencies,\n  NodePackage,\n  Package,\n  ProjectType,\n  UniversalPackage,\n} from '@srclaunch/types';\nimport latestVersion from 'latest-version';\nimport SemVer from 'semver';\n\nimport {\n  AMAZON_COGNITO_IDENTITY_JS_DEPENDENCIES,\n  ASYNC_EXIT_HOOK_DEPENDENCIES,\n  AWS_SDK_DEPENDENCIES,\n  AXIOS_DEPENDENCIES,\n  CHANGE_CASE_DEPEENDENCIES,\n  COLOR_NAMER_DEPEENDENCIES,\n  COMPRESSION_DEPENDENCIES,\n  CONFIG_DEPENDENCIES,\n  CORS_DEPENDENCIES,\n  CRYPTO_JS_DEPENDENCIES,\n  CURRENCY_CODES_DEPEENDENCIES,\n  EMAIL_VALIDATOR_DEPENDENCIES,\n  EXPRESS_DEPENDENCIES,\n  FS_EXTRA_DEPENDENCIES,\n  HEX_RGB_DEPENDENCIES,\n  HISTORY_DEPENDENCIES,\n  JS_FILE_DOWNLOAD_DEPENDENCIES,\n  JS_YAML_DEPENDENCIES,\n  KEYGRIP_DEPENDENCIES,\n  LUXON_DEPENDENCIES,\n  MULTER_DEPENDENCIES,\n  NANOID_DEPENDENCIES,\n  PASSWORD_VALIDATOR_DEPENDENCIES,\n  PICO_COLORS_DEPENDENCIES,\n  PLAID_DEPENDENCIES,\n  PLURALIZE_DEPENDENCIES,\n  QUERY_STRING_DEPENDENCIES,\n  REACT_COLORFUL_DEPENDENCIES,\n  REACT_COUNTRY_FLAG_DEPENDENCIES,\n  REACT_DATE_PICKER_DEPENDENCIES,\n  REACT_DEPENDENCIES,\n  REACT_DOM_DEPENDENCIES,\n  REACT_DROPZONE_DEPENDENCIES,\n  REACT_HOOKS_DEPENDENCIES,\n  REACT_REDUX_DEPENDENCIES,\n  REACT_ROUTER_DEPENDENCIES,\n  REACT_SYNTAX_HIGHLIGHTER_DEPENDENCIES,\n  REDUX_DEPENDENCIES,\n  REDUX_TOOLKIT_DEPENDENCIES,\n  RGB_HEX_DEPENDENCIES,\n  SERIALIZE_ERROR_DEPENDENCIES,\n  SRCLAUNCH_DATA_CLIENT_DEPENDENCIES,\n  SRCLAUNCH_EXCEPTIONS_DEPENDENCIES,\n  SRCLAUNCH_HTTP_CLIENT_DEPENDENCIES,\n  SRCLAUNCH_HTTP_SERVER_DEPENDENCIES,\n  SRCLAUNCH_I18N_DEPENDENCIES,\n  SRCLAUNCH_ICONS_DEPENDENCIES,\n  SRCLAUNCH_LOGGER_DEPENDENCIES,\n  SRCLAUNCH_NODE_ENVIRONMENT_DEPENDENCIES,\n  SRCLAUNCH_THEMES_DEPENDENCIES,\n  SRCLAUNCH_TRANSFORM_DEPENDENCIES,\n  SRCLAUNCH_VALIDATION_DEPENDENCIES,\n  SRCLAUNCH_WEB_APPLICATION_STATE_DEPENDENCIES,\n  SRCLAUNCH_WEB_ENVIRONMENT_DEPENDENCIES,\n  STYLED_COMPONENTS_DEPENDENCIES,\n  UUID_DEPENDENCIES,\n  ZXCVBN_DEPENDENCIES,\n} from '../../constants/dependencies';\nimport {\n  ASYNC_EXIT_HOOK_DEV_DEPENDENCIES,\n  AVA_TESTING_DEV_DEPENDENCIES,\n  COMMON_NODE_PLATFORM_DEV_DEPENDENCIES,\n  ESLINT_DEV_DEPENDENCIES,\n  EXPRESS_DEV_DEPENDENCIES,\n  FS_EXTRA_DEV_DEPENDENCIES,\n  GITHUB_DEV_DEPENDENCIES,\n  JEST_REACT_TESTING_DEV_DEPENDENCIES,\n  JEST_TESTING_DEV_DEPENDENCIES,\n  KEYGRIP_DEV_DEPENDENCIES,\n  LUXON_DEV_DEPENDENCIES,\n  MULTER_DEV_DEPENDENCIES,\n  PRETTIER_DEV_DEPENDENCIES,\n  QUERY_STRING_DEV_DEPENDENCIES,\n  REACT_DEV_DEPENDENCIES,\n  REACT_ROUTER_DEV_DEPENDENCIES,\n  SEQUELIZE_DEV_DEPENDENCIES,\n  SRCLAUNCH_CLI_DEV_DEPENDENCIES,\n  SRCLAUNCH_DX_DEV_DEPENDENCIES,\n  SRCLAUNCH_TYPES_DEV_DEPENDENCIES,\n  STYLED_COMPONENTS_DEV_DEPENDENCIES,\n  STYLELINT_DEV_DEPEENDENCIES,\n  TEST_COVERAGE_DEV_DEPENDENCIES,\n  TYPESCRIPT_DEV_DEPENDENCIES,\n} from '../../constants/dev-dependencies';\nimport { shellExec } from '../cli';\n\nconst emoji = {\n  error: '\\uD83D\\uDD34',\n  info: '\\uD83D\\uDD35',\n  log: '\\u26AA\\uFE0F',\n  success: '\\u2705',\n  warn: '\\u26A0\\uFE0F',\n  warning: '\\uD83D\\uDFE1',\n};\n\n// export function getPlatformDependencies(platform?: Platform) {\n//   switch (platform) {\n//     case Platform.Desktop:\n//       return {};\n//     case Platform.Mobile:\n//       return {};\n//     case Platform.NodeJS:\n//       return {};\n//     case Platform.TV:\n//       return {};\n//     case Platform.Universal:\n//       return {};\n//     case Platform.Watch:\n//       return {};\n//     case Platform.Web:\n//       return {};\n//   }\n// }\n\nexport function getProjectTypeDependencies(type: ProjectType) {\n  switch (type) {\n    case ProjectType.APIService:\n      return {};\n    case ProjectType.CLIApplication:\n      return {};\n    case ProjectType.ComponentLibrary:\n      return {};\n    case ProjectType.CoreAPI:\n      return {};\n    case ProjectType.DesktopApplication:\n      return {};\n    case ProjectType.FiniteStateMachine:\n      return {};\n    case ProjectType.Function:\n      return {};\n    case ProjectType.GitHubApp:\n      return {};\n    case ProjectType.GitHubAction:\n      return {};\n    case ProjectType.IconLibrary:\n      return {};\n    case ProjectType.NodeApplication:\n      return {};\n    case ProjectType.TaskQueue:\n      return {};\n    case ProjectType.ThemeLibrary:\n      return {};\n    case ProjectType.UniversalApplication:\n      return {};\n    case ProjectType.WebApplication:\n      return {};\n    case ProjectType.WebHook:\n      return {};\n    case ProjectType.WebService:\n      return {};\n    case ProjectType.WebSocketService:\n      return {};\n    default:\n      return {};\n  }\n}\n\nexport function getProjectTypeDevDependencies(type?: ProjectType) {\n  switch (type) {\n    case ProjectType.APIService:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.CLIApplication:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.ComponentLibrary:\n      return {};\n    case ProjectType.CoreAPI:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.DesktopApplication:\n      return {};\n    case ProjectType.FiniteStateMachine:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.Function:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.GitHubApp:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.GitHubAction:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.IconLibrary:\n      return {};\n    case ProjectType.Library:\n      return {};\n    case ProjectType.NodeApplication:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.TaskQueue:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.ThemeLibrary:\n      return {};\n    case ProjectType.UniversalApplication:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.WebApplication:\n      return {};\n    case ProjectType.WebHook:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.WebService:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n    case ProjectType.WebSocketService:\n      return { ...COMMON_NODE_PLATFORM_DEV_DEPENDENCIES };\n  }\n\n  return {};\n}\n\nexport function getPackageDependencies(package_: Package) {\n  switch (package_) {\n    case BrowserPackage.AmazonCognitoIdentityJS:\n      return AMAZON_COGNITO_IDENTITY_JS_DEPENDENCIES;\n    case BrowserPackage.History:\n      return HISTORY_DEPENDENCIES;\n    case BrowserPackage.JSFileDownload:\n      return JS_FILE_DOWNLOAD_DEPENDENCIES;\n    case BrowserPackage.React:\n      return REACT_DEPENDENCIES;\n    case BrowserPackage.ReactColorful:\n      return REACT_COLORFUL_DEPENDENCIES;\n    case BrowserPackage.ReactCountryFlag:\n      return REACT_COUNTRY_FLAG_DEPENDENCIES;\n    case BrowserPackage.ReactDOM:\n      return REACT_DOM_DEPENDENCIES;\n    case BrowserPackage.ReactDatePicker:\n      return REACT_DATE_PICKER_DEPENDENCIES;\n    case BrowserPackage.ReactDropzone:\n      return REACT_DROPZONE_DEPENDENCIES;\n    case BrowserPackage.ReactSyntaxHighlighter:\n      return REACT_SYNTAX_HIGHLIGHTER_DEPENDENCIES;\n    case BrowserPackage.ReactRedux:\n      return REACT_REDUX_DEPENDENCIES;\n    case BrowserPackage.ReactRouter:\n      return REACT_ROUTER_DEPENDENCIES;\n    case BrowserPackage.SrcLaunchIcons:\n      return SRCLAUNCH_ICONS_DEPENDENCIES;\n    case BrowserPackage.SrcLaunchWebEnvironment:\n      return SRCLAUNCH_WEB_ENVIRONMENT_DEPENDENCIES;\n    case BrowserPackage.SrcLaunchReactHooks:\n      return REACT_HOOKS_DEPENDENCIES;\n    case BrowserPackage.SrcLaunchThemes:\n      return SRCLAUNCH_THEMES_DEPENDENCIES;\n    case BrowserPackage.SrcLaunchWebApplicationState:\n      return SRCLAUNCH_WEB_APPLICATION_STATE_DEPENDENCIES;\n    case BrowserPackage.StyledComponents:\n      return STYLED_COMPONENTS_DEPENDENCIES;\n\n    case NodePackage.AsyncExitHook:\n      return ASYNC_EXIT_HOOK_DEPENDENCIES;\n    case NodePackage.AwsSDK:\n      return AWS_SDK_DEPENDENCIES;\n    case NodePackage.Compression:\n      return COMPRESSION_DEPENDENCIES;\n    case NodePackage.CORS:\n      return CORS_DEPENDENCIES;\n    case NodePackage.Config:\n      return CONFIG_DEPENDENCIES;\n    case NodePackage.Express:\n      return EXPRESS_DEPENDENCIES;\n    case NodePackage.FSExtra:\n      return FS_EXTRA_DEPENDENCIES;\n    case NodePackage.SrcLaunchHttpServer:\n      return SRCLAUNCH_HTTP_SERVER_DEPENDENCIES;\n    case NodePackage.SrcLaunchDataClient:\n      return SRCLAUNCH_DATA_CLIENT_DEPENDENCIES;\n    case NodePackage.SrcLaunchNodeEnvironment:\n      return SRCLAUNCH_NODE_ENVIRONMENT_DEPENDENCIES;\n    case NodePackage.Keygrip:\n      return KEYGRIP_DEPENDENCIES;\n    case NodePackage.Multer:\n      return MULTER_DEPENDENCIES;\n    case NodePackage.Plaid:\n      return PLAID_DEPENDENCIES;\n\n    case UniversalPackage.Axios:\n      return AXIOS_DEPENDENCIES;\n    case UniversalPackage.ChangeCase:\n      return CHANGE_CASE_DEPEENDENCIES;\n    case UniversalPackage.ColorNamer:\n      return COLOR_NAMER_DEPEENDENCIES;\n    case UniversalPackage.CryptoJS:\n      return CRYPTO_JS_DEPENDENCIES;\n    case UniversalPackage.CurrencyCodes:\n      return CURRENCY_CODES_DEPEENDENCIES;\n    case UniversalPackage.EmailValidator:\n      return EMAIL_VALIDATOR_DEPENDENCIES;\n    case UniversalPackage.HexRGB:\n      return HEX_RGB_DEPENDENCIES;\n    case UniversalPackage.JSYaml:\n      return JS_YAML_DEPENDENCIES;\n    case UniversalPackage.Luxon:\n      return LUXON_DEPENDENCIES;\n    case UniversalPackage.NanoID:\n      return NANOID_DEPENDENCIES;\n    case UniversalPackage.PasswordValidator:\n      return PASSWORD_VALIDATOR_DEPENDENCIES;\n    case UniversalPackage.PicoColors:\n      return PICO_COLORS_DEPENDENCIES;\n    case UniversalPackage.Pluralize:\n      return PLURALIZE_DEPENDENCIES;\n    case UniversalPackage.QueryString:\n      return QUERY_STRING_DEPENDENCIES;\n    case UniversalPackage.RGBHex:\n      return RGB_HEX_DEPENDENCIES;\n    case UniversalPackage.Redux:\n      return REDUX_DEPENDENCIES;\n    case UniversalPackage.ReduxToolkit:\n      return REDUX_TOOLKIT_DEPENDENCIES;\n    case UniversalPackage.SerializeError:\n      return SERIALIZE_ERROR_DEPENDENCIES;\n    case UniversalPackage.SrcLaunchExceptions:\n      return SRCLAUNCH_EXCEPTIONS_DEPENDENCIES;\n    case UniversalPackage.SrcLaunchHttpClient:\n      return SRCLAUNCH_HTTP_CLIENT_DEPENDENCIES;\n    case UniversalPackage.SrcLaunchI18n:\n      return SRCLAUNCH_I18N_DEPENDENCIES;\n    case UniversalPackage.SrcLaunchLogger:\n      return SRCLAUNCH_LOGGER_DEPENDENCIES;\n    case UniversalPackage.SrcLaunchTransform:\n      return SRCLAUNCH_TRANSFORM_DEPENDENCIES;\n    case UniversalPackage.SrcLaunchValidation:\n      return SRCLAUNCH_VALIDATION_DEPENDENCIES;\n    case UniversalPackage.Uuid:\n      return UUID_DEPENDENCIES;\n    case UniversalPackage.Zxcvbn:\n      return ZXCVBN_DEPENDENCIES;\n    default:\n      return {};\n  }\n}\n\nexport function getPackageDevDependencies(package_: Package) {\n  switch (package_) {\n    case BrowserPackage.React:\n      return REACT_DEV_DEPENDENCIES;\n    case BrowserPackage.ReactRouter:\n      return REACT_ROUTER_DEV_DEPENDENCIES;\n    case BrowserPackage.StyledComponents:\n      return STYLED_COMPONENTS_DEV_DEPENDENCIES;\n\n    case NodePackage.AsyncExitHook:\n      return ASYNC_EXIT_HOOK_DEV_DEPENDENCIES;\n    case NodePackage.Express:\n      return EXPRESS_DEV_DEPENDENCIES;\n    case NodePackage.FSExtra:\n      return FS_EXTRA_DEV_DEPENDENCIES;\n    case NodePackage.Keygrip:\n      return KEYGRIP_DEV_DEPENDENCIES;\n    case NodePackage.Multer:\n      return MULTER_DEV_DEPENDENCIES;\n    case NodePackage.Sequelize:\n      return SEQUELIZE_DEV_DEPENDENCIES;\n\n    case UniversalPackage.Luxon:\n      return LUXON_DEV_DEPENDENCIES;\n    case UniversalPackage.QueryString:\n      return QUERY_STRING_DEV_DEPENDENCIES;\n\n    default:\n      return {};\n  }\n}\n\nexport function sortDependencies(dependencies: Dependencies): Dependencies {\n  if (\n    dependencies === undefined ||\n    !dependencies ||\n    Object.keys(dependencies).length === 0\n  ) {\n    return dependencies;\n  }\n\n  let sortedDependencies: Dependencies = {};\n  for (const dependency of Object.keys(dependencies).sort()) {\n    sortedDependencies = {\n      ...sortedDependencies,\n      [dependency]: dependencies[dependency] as string,\n    };\n  }\n\n  return sortedDependencies;\n}\n\nexport async function getDependencyLatestVersion(\n  dependency: string,\n  version?: string,\n) {\n  const versions = await shellExec(\n    `yarn npm info ${dependency} --fields versions --json`,\n  );\n  const parsedVersions = await JSON.parse(versions);\n\n  if (parsedVersions && parsedVersions.length > 0 && version) {\n    const maxVersion = await SemVer.maxSatisfying(parsedVersions, version);\n\n    if (maxVersion) {\n      return typeof maxVersion === 'object'\n        ? `^${maxVersion?.version}`\n        : `^${maxVersion}`;\n    }\n  }\n\n  return `^${await latestVersion(dependency)}`;\n}\n\nexport async function getDependenciesLatestVersions(\n  dependencies: Dependencies,\n): Promise<Dependencies> {\n  try {\n    const depsArray = [...Object.entries(dependencies)].map(([k, v]) => ({\n      name: k as string,\n      version: v as string,\n    }));\n\n    const getDeps = async (deps: { name: string; version: string }[]) => {\n      return Promise.all(\n        deps.map(async dep => ({\n          [dep.name]:\n            (await getDependencyLatestVersion(dep.name)) ?? dep.version,\n        })),\n      );\n    };\n\n    let depsDict: Dependencies = {};\n    for (const dep of await getDeps(depsArray)) {\n      depsDict = { ...depsDict, ...dep };\n    }\n\n    return depsDict;\n  } catch (error) {\n    console.error(error);\n    return dependencies;\n  }\n}\n\nexport async function getDependencies({\n  dev: development = false,\n  packages = [],\n}: {\n  readonly dev?: boolean;\n  readonly packages?: readonly Package[];\n}): Promise<Dependencies> {\n  if (!packages) {\n    return {};\n  }\n\n  let dependencies: Dependencies = {};\n\n  for (const package_ of packages) {\n    const deps: Dependencies = development\n      ? getPackageDevDependencies(package_)\n      : getPackageDependencies(package_);\n\n    dependencies = {\n      ...dependencies,\n      ...deps,\n    };\n  }\n\n  const dependenciesLatestVersions = await getDependenciesLatestVersions(\n    dependencies,\n  );\n\n  return sortDependencies(dependenciesLatestVersions);\n}\n\nexport async function getDevDependencies({\n  ava,\n  eslint,\n  github,\n  jest,\n  jestReact,\n  prettier,\n  react,\n  reactRouter,\n  srclaunch,\n  styledComponents,\n  stylelint,\n  testCoverage,\n  typescript,\n}: {\n  readonly ava?: boolean;\n  readonly eslint?: boolean;\n  readonly github?: boolean;\n  readonly jest?: boolean;\n  readonly jestReact?: boolean;\n  readonly packages?: readonly Package[];\n  readonly prettier?: boolean;\n  readonly react?: boolean;\n  readonly reactRouter?: boolean;\n  readonly srclaunch?: {\n    readonly cli?: boolean;\n    readonly dx?: boolean;\n    readonly types?: boolean;\n  };\n  readonly styledComponents?: boolean;\n  readonly stylelint?: boolean;\n  readonly testCoverage?: boolean;\n  readonly typescript?: boolean;\n}): Promise<Dependencies> {\n  return await getDependenciesLatestVersions({\n    ...(ava ? AVA_TESTING_DEV_DEPENDENCIES : {}),\n    ...(eslint ? ESLINT_DEV_DEPENDENCIES : {}),\n    ...(github ? GITHUB_DEV_DEPENDENCIES : {}),\n    ...(jest ? JEST_TESTING_DEV_DEPENDENCIES : {}),\n    ...(jestReact ? JEST_REACT_TESTING_DEV_DEPENDENCIES : {}),\n    ...(prettier ? PRETTIER_DEV_DEPENDENCIES : {}),\n    ...(react ? REACT_DEV_DEPENDENCIES : {}),\n    ...(reactRouter ? REACT_ROUTER_DEV_DEPENDENCIES : {}),\n    ...(srclaunch?.cli ? SRCLAUNCH_CLI_DEV_DEPENDENCIES : {}),\n    ...(srclaunch?.dx ? SRCLAUNCH_DX_DEV_DEPENDENCIES : {}),\n    ...(srclaunch?.types ? SRCLAUNCH_TYPES_DEV_DEPENDENCIES : {}),\n    ...(styledComponents ? STYLED_COMPONENTS_DEV_DEPENDENCIES : {}),\n    ...(stylelint ? STYLELINT_DEV_DEPEENDENCIES : {}),\n    ...(testCoverage ? TEST_COVERAGE_DEV_DEPENDENCIES : {}),\n    ...(typescript ? TYPESCRIPT_DEV_DEPENDENCIES : {}),\n  });\n}\n", "export const AMAZON_COGNITO_IDENTITY_JS_DEPENDENCIES = {\n  'amazon-cognito-identity-js': '^5.2.8',\n};\n\nexport const ASYNC_EXIT_HOOK_DEPENDENCIES = {\n  'async-exit-hook': '^2.0.1',\n};\n\nexport const AWS_SDK_DEPENDENCIES = {\n  'aws-sdk': '^2.1110.0',\n};\n\nexport const AXIOS_DEPENDENCIES = {\n  axios: '^0.27.2',\n  'axios-retry': '^3.2.5',\n};\n\nexport const CHANGE_CASE_DEPEENDENCIES = {\n  'change-case': '^4.1.2',\n};\n\nexport const COLOR_NAMER_DEPEENDENCIES = {\n  'color-namer': '^1.4.0',\n};\n\nexport const COMPRESSION_DEPENDENCIES = {\n  compression: '^1.7.4',\n};\n\nexport const CONFIG_DEPENDENCIES = {\n  config: '^3.3.7',\n};\n\nexport const CORS_DEPENDENCIES = {\n  cors: '^2.8.5',\n};\n\nexport const CURRENCY_CODES_DEPEENDENCIES = {\n  'currency-codes': '^2.1.0',\n};\n\nexport const CRYPTO_JS_DEPENDENCIES = {\n  'crypto-js': '^4.1.1',\n};\n\nexport const EMAIL_VALIDATOR_DEPENDENCIES = {\n  'email-validator': '^2.0.4',\n};\n\nexport const EXPRESS_DEPENDENCIES = {\n  express: '^4.17.3',\n};\n\nexport const FS_EXTRA_DEPENDENCIES = {\n  'fs-extra': '^10.1.0',\n};\n\nexport const HEX_RGB_DEPENDENCIES = {\n  'hex-rgb': '^5.0.0',\n};\n\nexport const HISTORY_DEPENDENCIES = {\n  history: '5.3.0',\n};\n\nexport const JS_FILE_DOWNLOAD_DEPENDENCIES = {\n  'js-file-download': '^0.4.12',\n  'password-validator': '^5.2.1',\n  zxcvbn: '^4.4.2',\n};\n\nexport const JS_YAML_DEPENDENCIES = {\n  'js-yaml': '^4.1.0',\n};\n\nexport const KEYGRIP_DEPENDENCIES = {\n  keygrip: '^1.0.1',\n};\n\nexport const LUXON_DEPENDENCIES = {\n  luxon: '^2.3.2',\n};\n\nexport const MULTER_DEPENDENCIES = {\n  multer: '^1.4.4',\n};\n\nexport const NANOID_DEPENDENCIES = {\n  nanoid: '^3.3.3',\n};\n\nexport const PASSWORD_VALIDATOR_DEPENDENCIES = {\n  'password-validator': '^5.2.1',\n};\n\nexport const PICO_COLORS_DEPENDENCIES = {\n  picocolors: '^1.0.0',\n};\n\nexport const PLAID_DEPENDENCIES = {\n  plaid: '^9.12.0',\n};\n\nexport const PLURALIZE_DEPENDENCIES = {\n  pluralize: '^8.0.0',\n};\n\nexport const QUERY_STRING_DEPENDENCIES = {\n  'query-string': '^7.1.1',\n};\n\nexport const RGB_HEX_DEPENDENCIES = {\n  'rgb-hex': '^4.0.0',\n};\n\nexport const REACT_COLORFUL_DEPENDENCIES = {\n  'react-colorful': '^5.5.1',\n};\n\nexport const REACT_COUNTRY_FLAG_DEPENDENCIES = {\n  'react-country-flag': '^3.0.2',\n};\n\nexport const REACT_DATE_PICKER_DEPENDENCIES = {\n  'react-date-picker': '^8.4.0',\n};\n\nexport const REACT_DEPENDENCIES = {\n  react: '^18.1.0',\n};\n\nexport const REACT_DOM_DEPENDENCIES = {\n  'react-dom': '^18.1.0',\n};\n\nexport const REACT_DROPZONE_DEPENDENCIES = {\n  'react-dropzone': '^12.1.0',\n};\n\nexport const REACT_HOOKS_DEPENDENCIES = {\n  '@srclaunch/react-hooks': '^0.1.24',\n};\n\nexport const REACT_REDUX_DEPENDENCIES = {\n  '@reduxjs/toolkit': '^1.8.1',\n  'react-redux': '^8.0.1',\n};\n\nexport const REACT_ROUTER_DEPENDENCIES = {\n  history: '5.3.0',\n  'react-router': '^6.3.0',\n  'react-router-dom': '^6.3.0',\n};\n\nexport const REACT_SYNTAX_HIGHLIGHTER_DEPENDENCIES = {\n  'react-syntax-highlighter': '^15.5.0',\n};\n\nexport const REDUX_DEPENDENCIES = {\n  redux: '^4.2.0',\n};\n\nexport const REDUX_TOOLKIT_DEPENDENCIES = {\n  '@reduxjs/toolkit': '^1.8.1',\n};\n\nexport const SEQUELIZE_DEPENDENCIES = {\n  sequelize: '^6.18.0',\n  pg: '^8.7.3',\n  'pg-hstore': '^2.3.4',\n};\n\nexport const SERIALIZE_ERROR_DEPENDENCIES = {\n  'serialize-error': '^10.0.0',\n};\n\nexport const STRIPE_DEPENDENCIES = {\n  stripe: '^8.215.0',\n};\n\nexport const STYLED_COMPONENTS_DEPENDENCIES = {\n  'styled-components': '^5.3.5',\n};\n\nexport const SRCLAUNCH_A11Y_DEPENDENCIES = {\n  '@srclaunch/a11y': '^0.1.12',\n};\n\nexport const SRCLAUNCH_ACTIONS_DEPEENDENCIES = {\n  '@srclaunch/actions': '^0.1.11',\n};\n\nexport const SRCLAUNCH_AUTHENTICATION_DEPENDENCIES = {\n  'amazon-cognito-identity-js': '^5.2.8',\n};\n\nexport const SRCLAUNCH_DATA_CLIENT_DEPENDENCIES = {\n  '@srclaunch/data-client': '^0.1.38',\n};\n\nexport const SRCLAUNCH_EXCEPTIONS_DEPENDENCIES = {\n  '@srclaunch/exceptions': '^0.1.71',\n};\n\nexport const SRCLAUNCH_HTTP_CLIENT_DEPENDENCIES = {\n  '@srclaunch/http-client': '^0.1.22',\n};\n\nexport const SRCLAUNCH_HTTP_SERVER_DEPENDENCIES = {\n  '@srclaunch/http-server': '^0.1.75',\n};\n\nexport const SRCLAUNCH_I18N_DEPENDENCIES = {\n  '@srclaunch/i18n': '^0.1.6',\n};\n\nexport const SRCLAUNCH_ICONS_DEPENDENCIES = {\n  '@srclaunch/icons': '^0.1.47',\n};\n\nexport const SRCLAUNCH_LOGGER_DEPENDENCIES = {\n  '@srclaunch/logger': '^0.1.83',\n};\n\nexport const SRCLAUNCH_NODE_ENVIRONMENT_DEPENDENCIES = {\n  '@srclaunch/node-environment': '^0.1.17',\n};\n\nexport const SRCLAUNCH_THEMES_DEPENDENCIES = {\n  '@srclaunch/themes': '^0.1.35',\n};\n\nexport const SRCLAUNCH_TRANSFORM_DEPENDENCIES = {\n  '@srclaunch/transform': '^0.1.7',\n};\n\nexport const SRCLAUNCH_TYPES_DEPENDENCIES = {\n  '@srclaunch/types': '^0.1.28',\n};\n\nexport const SRCLAUNCH_VALIDATION_DEPENDENCIES = {\n  '@srclaunch/validation': '^0.1.28',\n};\n\nexport const SRCLAUNCH_WEB_APPLICATION_STATE_DEPENDENCIES = {\n  '@srclaunch/web-app-state': '^0.1.74',\n};\n\nexport const SRCLAUNCH_WEB_ENVIRONMENT_DEPENDENCIES = {\n  '@srclaunch/web-environment': '^0.1.21',\n};\n\nexport const UUID_DEPENDENCIES = {\n  uuid: '^8.3.2',\n};\n\nexport const ZXCVBN_DEPENDENCIES = {\n  zxcvbn: '^4.4.2',\n};\n", "export const ASYNC_EXIT_HOOK_DEV_DEPENDENCIES = {\n  '@types/async-exit-hook': '^2.0.0',\n};\n\nexport const AVA_TESTING_DEV_DEPENDENCIES = {\n  ava: '^4.2.0',\n};\n\nexport const COMMON_NODE_PLATFORM_DEV_DEPENDENCIES = {\n  '@types/node': '^17.0.30',\n};\n\nexport const ESLINT_DEV_DEPENDENCIES = {\n  '@microsoft/eslint-plugin-sdl': '^0.2.0',\n  eslint: '^8.14.0',\n  'eslint-import-resolver-typescript': '^2.7.1',\n  'eslint-plugin-eslint-comments': '^3.2.0',\n  'eslint-plugin-functional': '^4.2.1',\n  'eslint-plugin-import': '^2.26.0',\n  'eslint-plugin-node': '^11.1.0',\n  'eslint-plugin-only-warn': '^1.0.3',\n  'eslint-plugin-regexp': '^1.7.0',\n  'eslint-plugin-simple-import-sort': '^7.0.0',\n  'eslint-plugin-sort-keys-fix': '^1.1.2',\n  'eslint-plugin-sort-requires': '^2.1.0',\n  'eslint-plugin-unicorn': '^42.0.0',\n};\n\nexport const EXPRESS_DEV_DEPENDENCIES = {\n  '@types/express': '^4.17.13',\n};\n\nexport const FS_EXTRA_DEV_DEPENDENCIES = {\n  '@types/fs-extra': '^9.0.13',\n};\n\nexport const GITHUB_DEV_DEPENDENCIES = {\n  'eslint-plugin-github': '^4.3.6',\n};\n\nexport const JEST_TESTING_DEV_DEPENDENCIES = {\n  '@types/jest': '^27.4.1',\n  'eslint-plugin-jest': '^26.1.5',\n  'ts-jest': '^27.1.4',\n};\n\nexport const JEST_REACT_TESTING_DEV_DEPENDENCIES = {\n  ...JEST_TESTING_DEV_DEPENDENCIES,\n  '@testing-library/jest-dom': '^5.16.4',\n  '@testing-library/react': '^13.1.1',\n  '@testing-library/user-event': '^14.1.1',\n  'eslint-plugin-testing-library': '^5.3.1',\n};\n\nexport const KEYGRIP_DEV_DEPENDENCIES = {\n  '@types/keygrip': '^1.0.2',\n};\n\nexport const LUXON_DEV_DEPENDENCIES = {\n  '@types/luxon': '^2.3.1',\n};\n\nexport const MULTER_DEV_DEPENDENCIES = {\n  '@types/multer': '^1.4.7',\n};\n\nexport const PRETTIER_DEV_DEPENDENCIES = {\n  'eslint-config-prettier': '^8.5.0',\n  'eslint-plugin-prettier': '^4.0.0',\n  prettier: '^2.6.2',\n};\n\nexport const QUERY_STRING_DEV_DEPENDENCIES = {\n  '@types/query-string': '^6.3.0',\n};\n\nexport const REACT_DEV_DEPENDENCIES = {\n  '@types/react': '^18.0.8',\n  '@types/react-dom': '^18.0.3',\n  '@types/react-is': '^17.0.3',\n  'eslint-config-react-app': '^7.0.1',\n  'eslint-plugin-jsx-a11y': '^6.5.1',\n  'eslint-plugin-react': '^7.29.4',\n  'eslint-plugin-react-hooks': '^4.5.0',\n};\n\nexport const REACT_ROUTER_DEV_DEPENDENCIES = {\n  '@types/react-router': '^5.1.18',\n  '@types/react-router-dom': '^5.3.3',\n};\n\nexport const SEQUELIZE_DEV_DEPENDENCIES = {\n  '@types/pg': '^8.6.5',\n  '@types/pluralize': '^0.0.29',\n};\n\nexport const STYLED_COMPONENTS_DEV_DEPENDENCIES = {\n  '@types/styled-components': '^5.1.25',\n  'eslint-plugin-better-styled-components': '^1.1.2',\n  'stylelint-config-styled-components': '^0.1.1',\n};\n\nexport const SRCLAUNCH_CLI_DEV_DEPENDENCIES = {\n  '@srclaunch/cli': '^0.1.346',\n};\n\nexport const SRCLAUNCH_DX_DEV_DEPENDENCIES = {\n  '@srclaunch/dx': '^0.1.52',\n};\n\nexport const SRCLAUNCH_TYPES_DEV_DEPENDENCIES = {\n  '@srclaunch/types': '^0.1.117',\n};\n\nexport const STYLELINT_DEV_DEPEENDENCIES = {\n  'eslint-config-stylelint': '^15.0.0',\n  stylelint: '^14.8.1',\n  'stylelint-config-idiomatic-order': '^8.1.0',\n  'stylelint-config-prettier': '^9.0.3',\n  'stylelint-config-recommended': '^7.0.0',\n  'stylelint-order': '^5.0.0',\n};\n\nexport const TEST_COVERAGE_DEV_DEPENDENCIES = {\n  c8: '^7.11.2',\n};\n\nexport const TYPESCRIPT_DEV_DEPENDENCIES = {\n  '@typescript-eslint/eslint-plugin': '^5.21.0',\n  '@typescript-eslint/parser': '^5.21.0',\n  typescript: '^4.6.4',\n};\n", "import {\n  CodeFormatter,\n  CodeLinter,\n  ProjectConfig,\n  ProjectType,\n  StaticTyping,\n} from '@srclaunch/types';\nimport fs from 'fs-extra';\nimport path from 'node:path';\n\nimport { PRETTIER_CONFIG_CONTENT } from '../../constants/formatters';\nimport {\n  ESLINT_CONFIG_CONTENT,\n  ESLINT_UI_CONFIG_CONTENT,\n  STYLELINT_CONFIG_CONTENT,\n  STYLELINT_UI_CONFIG_CONTENT,\n} from '../../constants/linters';\nimport {\n  TYPESCRIPT_CONFIG_CONTENT,\n  TYPESCRIPT_UI_CONFIG_CONTENT,\n} from '../../constants/static-typing';\n// import { writeFile } from '@srclaunch/logic';\n\nexport async function writeToolingConfiguration({\n  formatters = [],\n  linters = [],\n  project,\n  staticTyping = [],\n}: {\n  readonly formatters?: readonly CodeFormatter[];\n  readonly linters?: readonly CodeLinter[];\n  readonly project: ProjectConfig;\n  readonly staticTyping?: readonly StaticTyping[];\n}) {\n  if (staticTyping) {\n    for (const tool of staticTyping) {\n      switch (tool) {\n        case StaticTyping.TypeScript:\n          const uiConfig =\n            project.type === ProjectType.WebApplication ||\n            project.type === ProjectType.ComponentLibrary ||\n            ProjectType.IconLibrary ||\n            ProjectType.ThemeLibrary;\n\n          await fs.writeFile(\n            path.resolve('./tsconfig.json'),\n            uiConfig ? TYPESCRIPT_UI_CONFIG_CONTENT : TYPESCRIPT_CONFIG_CONTENT,\n          );\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (formatters) {\n      for (const formatter of formatters) {\n        switch (formatter) {\n          case CodeFormatter.Prettier:\n            await fs.writeFile(\n              path.resolve('./.prettierrc.cjs'),\n              PRETTIER_CONFIG_CONTENT,\n            );\n            // console.info(`${chalk.green('\u2714')} added Prettier config`);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n\n    if (linters) {\n      const ui =\n        project.type === ProjectType.WebApplication ||\n        project.type === ProjectType.ComponentLibrary ||\n        ProjectType.IconLibrary ||\n        ProjectType.ThemeLibrary;\n\n      for (const linter of linters) {\n        switch (linter) {\n          case CodeLinter.ESLint:\n            await fs.writeFile(\n              path.resolve('./.eslintrc.cjs'),\n              ui ? ESLINT_UI_CONFIG_CONTENT : ESLINT_CONFIG_CONTENT,\n            );\n            // console.info(`${chalk.green('\u2714')} added ESLint config`);\n            break;\n          case CodeLinter.Stylelint:\n            await fs.writeFile(\n              path.resolve('./.stylelintrc.js'),\n              ui ? STYLELINT_UI_CONFIG_CONTENT : STYLELINT_CONFIG_CONTENT,\n            );\n            // console.info(`${chalk.green('\u2714')} added Stylelint config`);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }\n}\n", "// .prettierrc.cjs\nexport const PRETTIER_CONFIG_CONTENT = `const base = require('@srclaunch/dx/.prettierrc');\n\nmodule.exports = {\n  ...base,\n};\n`;\n", "// .eslintrc.cjs\nexport const ESLINT_CONFIG_CONTENT = `const base = require('@srclaunch/dx/.eslintrc');\n\nmodule.exports = {\n  ...base\n};`;\n\n// .eslintrc.cjs\nexport const ESLINT_UI_CONFIG_CONTENT = `const base = require('@srclaunch/dx/.eslintrc');\n\nmodule.exports = {\n  ...base\n};`;\n\n// .stylelintrc.js\nexport const STYLELINT_CONFIG_CONTENT = `import base from '@srclaunch/dx/.stylelintrc';\n\nexport default {\n  ...base\n};`;\n\n// .stylelintrc.js\nexport const STYLELINT_UI_CONFIG_CONTENT = `import base from '@srclaunch/dx/.stylelintrc.ui';\n\nexport default {\n  ...base\n};`;\n", "// tsconfig.json\nexport const TYPESCRIPT_CONFIG_CONTENT = `{\n  \"extends\": \"@srclaunch/dx/tsconfig.json\",\n  \"include\": [\"src\"] \n}`;\n\n// tsconfig.ui.json\nexport const TYPESCRIPT_UI_CONFIG_CONTENT = `{\n  \"extends\": \"@srclaunch/dx/tsconfig.ui.json\",\n  \"include\": [\"src\"] \n}`;\n", "import { ChangeType, ProjectConfig } from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\n// import { readFile, writeFile } from '@srclaunch/logic';\nimport path from 'node:path';\nimport pc from 'picocolors';\n\nimport { createChangeset } from '../lib/changesets';\nimport { Command, CommandType } from '../lib/command';\nimport { InteractiveModeFlag, InteractiveModeFlagType } from '../lib/flags';\nimport { getBranchName, push } from '../lib/git';\nimport { createSemanticRelease } from '../lib/release';\nimport { createRelease } from '../lib/release/standard-version';\n\ntype ReleaseFlags = TypedFlags<{\n  readonly debug: {\n    readonly default: false;\n    readonly description: 'Runs a dry run of the release process';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly dryRun: {\n    readonly alias: 'dry-run';\n    readonly default: false;\n    readonly description: 'Runs a dry run of the release process';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly force: {\n    readonly alias: 'force';\n    readonly default: false;\n    readonly description: 'Force a release even if there are no changes';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly local: {\n    readonly alias: 'l';\n    readonly default: true;\n    readonly description: 'Bypasses the CI checks';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n  readonly push: {\n    readonly alias: 'p';\n    readonly default: false;\n    readonly description: 'Pushes changes to remote repository';\n    readonly isRequired: false;\n    readonly type: 'boolean';\n  };\n}>;\n\nexport default new Command<ProjectConfig, ReleaseFlags>({\n  commands: [\n    new Command<ProjectConfig, ReleaseFlags>({\n      description: 'Shows help for release commands',\n      name: 'help',\n      run: async () => {\n        console.info('Available release commands are: create, help');\n      },\n      type: CommandType.Project,\n    }),\n  ],\n  description: 'Create a release',\n  name: 'release',\n  run: async ({ config, flags }) => {\n    try {\n      // const result = await createRelease({\n      //   changesets: config.changesets,\n      //   push: flags.push,\n      // });\n\n      const result = await createSemanticRelease({\n        ...config.release,\n        ...flags,\n      });\n\n      if (result) {\n        console.log(\n          `${pc.green('\u2714')} published ${result.type} release version ${\n            result.version\n          } containing ${result.commits} commits.`,\n        );\n      }\n\n      // console.log(\n      //   `${pc.green('\u2714')} created release ${pc.bold(result.version)} ${\n      //     flags.push ? `and pushed to ${pc.bold(result.repo)}` : ``\n      //   } on branch ${pc.bold(result.branch)}`,\n      // );\n    } catch (error) {\n      console.error('err', error);\n    }\n  },\n  type: CommandType.Project,\n});\n", "import { ReleaseConfig } from '@srclaunch/types';\nimport { Writable } from 'node:stream';\nimport SemanticRelease from 'semantic-release';\n\n// const isCI = require('is-ci');\n// # !isCI && require('dotenv').config({ path: '../../.env' });\n\nexport async function createSemanticRelease({\n  dryRun,\n  force,\n  local,\n  name,\n}: ReleaseConfig): Promise<\n  | false\n  | {\n      readonly commits?: number;\n      readonly type?: string;\n      readonly version: string;\n    }\n> {\n  class EchoStream extends Writable {\n    public override _write(chunk: Buffer, enc: string, next: () => void) {\n      if (chunk.includes('err ')) {\n        console.error(chunk.toString());\n      }\n      next();\n    }\n  }\n\n  const errorStream = new EchoStream();\n  const outStream = new EchoStream();\n\n  process.env.FORCE_PUBLISH = force ? 'true' : 'false';\n\n  const result = await SemanticRelease(\n    {\n      branches: [{ name: 'main' }],\n      ci: !local,\n      dryRun,\n      extends: ['semantic-release-commit-filter'],\n      pkgRoot: 'dist',\n      plugins: [\n        '@srclaunch/ci-cd',\n        '@semantic-release/commit-analyzer',\n        '@semantic-release/release-notes-generator',\n        [\n          '@semantic-release/npm',\n          {\n            npmPublish: true,\n            pkgRoot: process.cwd(),\n          },\n        ],\n        // '@semantic-release/github',\n      ],\n      tagFormat: `${name}@\\${version}`,\n    },\n    {\n      cwd: process.cwd(),\n      env: (process.env as { [name: string]: string }) ?? {},\n      stderr: errorStream as SemanticRelease.Config['stderr'],\n      stdout: outStream as SemanticRelease.Config['stdout'],\n    },\n  );\n\n  if (result) {\n    const { commits, nextRelease } = result;\n\n    return {\n      commits: commits.length,\n      type: nextRelease.type,\n      version: nextRelease.version,\n    };\n  } else {\n    console.info('no release published.');\n    return false;\n  }\n}\n", "import { ProjectConfig } from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\n\nimport { Command } from '../lib/command.js';\n\ntype RunFlags = TypedFlags<{\n  readonly workspace: {\n    readonly default: false;\n    readonly description: 'Run the script in all projects in the workspace';\n    readonly type: 'boolean';\n  };\n}>;\nexport default new Command<ProjectConfig, RunFlags>({\n  description: 'Runs a script from the project or workspace package.json file',\n  name: 'run',\n  run: async ({ cli, flags }) => {\n    if (flags.workspace) {\n    }\n  },\n});\n", "import { ProjectConfig, TestTool } from '@srclaunch/types';\nimport { TypedFlags } from 'meow';\n\nimport { Command, CommandType } from '../lib/command';\nimport { run as runAvaTests } from '../lib/test/ava';\nimport { run as runC8Coverage } from '../lib/test/coverage';\nimport { run as runJestTests } from '../lib/test/jest';\nimport { run as runTapeTests } from '../lib/test/tape';\nimport { run as runVitestTests } from '../lib/test/vitest';\n\ntype TestFlags = TypedFlags<{\n  readonly coverage: {\n    readonly alias: 'c';\n    readonly default: false;\n    readonly description: 'Collect test coverage after test run';\n    readonly type: 'boolean';\n  };\n  readonly match: {\n    readonly alias: 'm';\n    readonly description: 'Run tests matching the specified pattern';\n    readonly type: 'string';\n  };\n  readonly watch: {\n    readonly alias: 'w';\n    readonly description: 'Watch for changes and run tests automatically';\n    readonly type: 'boolean';\n  };\n}>;\n\nexport default new Command<ProjectConfig, TestFlags>({\n  commands: [\n    new Command<ProjectConfig, TestFlags>({\n      description: 'Run tests using Ava',\n      name: 'ava',\n      run: async ({\n        config,\n        flags,\n      }: {\n        readonly config: ProjectConfig;\n        readonly flags: TestFlags;\n      }) => {\n        if (typeof config.test === 'object' && !Array.isArray(config.test)) {\n          await runAvaTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n        } else if (Array.isArray(config.test)) {\n          for (const test of config.test) {\n            await runAvaTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n          }\n        }\n      },\n    }),\n    new Command<ProjectConfig, TestFlags>({\n      description: 'Runs tests using Jest',\n      name: 'jest',\n      run: async ({ config, flags }) => {\n        if (typeof config.test === 'object' && !Array.isArray(config.test)) {\n          await runJestTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n        } else if (Array.isArray(config.test)) {\n          for (const test of config.test) {\n            await runJestTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n          }\n        }\n      },\n      type: CommandType.Project,\n    }),\n    new Command<ProjectConfig, TestFlags>({\n      description: 'Run tests using Tape',\n      name: 'tape',\n      run: async ({\n        config,\n        flags,\n      }: {\n        readonly config: ProjectConfig;\n        readonly flags: TestFlags;\n      }) => {\n        if (typeof config.test === 'object' && !Array.isArray(config.test)) {\n          await runTapeTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n        } else if (Array.isArray(config.test)) {\n          for (const test of config.test) {\n            await runTapeTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n          }\n        }\n      },\n    }),\n    new Command<ProjectConfig, TestFlags>({\n      description: 'Run tests using Vitest',\n      name: 'vitest',\n      run: async ({\n        config,\n        flags,\n      }: {\n        readonly config: ProjectConfig;\n        readonly flags: TestFlags;\n      }) => {\n        if (typeof config.test === 'object' && !Array.isArray(config.test)) {\n          await runVitestTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n        } else if (Array.isArray(config.test)) {\n          for (const test of config.test) {\n            await runVitestTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n          }\n        }\n      },\n    }),\n    new Command<ProjectConfig, TestFlags>({\n      description: 'Generates coverage reports',\n      name: 'coverage',\n      run: async ({ config }) => {\n        if (typeof config.test === 'object' && !Array.isArray(config.test)) {\n          await runC8Coverage(config.test);\n        } else if (Array.isArray(config.test)) {\n          for (const test of config.test) {\n            await runC8Coverage(test);\n          }\n        }\n      },\n      type: CommandType.Project,\n    }),\n    new Command<ProjectConfig, TestFlags>({\n      description: 'Shows help for test commands',\n      name: 'help',\n      run: async () => {\n        console.info('Available test commands are: ava, jest');\n      },\n      type: CommandType.Project,\n    }),\n  ],\n  description: 'Commands for running tests',\n  name: 'test',\n  run: async ({\n    config,\n    flags,\n  }: {\n    readonly config: ProjectConfig;\n    readonly flags: TestFlags;\n  }) => {\n    if (typeof config.test === 'object' && !Array.isArray(config.test)) {\n      switch (config.test.tool) {\n        case TestTool.Ava:\n          await runAvaTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n          break;\n        case TestTool.Jest:\n          await runJestTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n          break;\n        case TestTool.Tape:\n          await runTapeTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n          break;\n        case TestTool.Vitest:\n          await runVitestTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n          break;\n        default:\n          await runAvaTests({\n            config: config.test,\n            match: flags.match,\n            watch: flags.watch,\n          });\n      }\n\n      if (config.test.coverage || flags.coverage) {\n        await runC8Coverage(config.test);\n      }\n    } else if (Array.isArray(config.test)) {\n      for (const test of config.test) {\n        switch (test.tool) {\n          case TestTool.Ava:\n            await runAvaTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n            break;\n          case TestTool.Jest:\n            await runJestTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n            break;\n          case TestTool.Tape:\n            await runTapeTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n            break;\n          case TestTool.Vitest:\n            await runVitestTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n            break;\n          default:\n            await runAvaTests({\n              config: test,\n              match: flags.match,\n              watch: flags.watch,\n            });\n            break;\n        }\n\n        if (test.coverage || flags.coverage) {\n          await runC8Coverage(test);\n        }\n      }\n    }\n  },\n});\n", "import {\n  chunksToLinesAsync,\n  onExit,\n  streamEnd,\n  streamWrite,\n} from '@rauschma/stringio';\nimport { TestConfig } from '@srclaunch/types';\nimport { exec, execSync, spawn } from 'node:child_process';\n\nimport { DEFAULT_TEST_OPTIONS } from './index';\n\nfunction logOutput(output?: Buffer) {\n  if (!output) {\n    return;\n  }\n\n  if (output.length <= 1) {\n    return;\n  }\n\n  console.log(output.toString());\n}\n\nfunction logError(output?: Buffer) {\n  const outputStr = output?.toString();\n\n  if (!output || !outputStr) {\n    return;\n  }\n\n  if (outputStr.length <= 1) {\n    return;\n  }\n\n  if (outputStr.includes('ExperimentalWarning')) {\n    return;\n  }\n\n  if (outputStr.includes('node --trace-warnings')) {\n    return;\n  }\n\n  console.error(outputStr);\n}\n\nexport async function run({\n  config,\n  match,\n  watch,\n}: {\n  readonly config: TestConfig;\n  readonly match?: string;\n  readonly watch?: boolean;\n}): Promise<void> {\n  try {\n    const all = ['--all'];\n    const color = ['--color'];\n    const concurrencyArg = config?.concurrency\n      ? ['--concurrency', config.concurrency.toString()]\n      : [];\n    const configArg = ['--config', 'node_modules/@srclaunch/dx/ava.config.mjs'];\n    const failFast = config?.fail?.fast ? ['--fail-fast'] : [];\n    const failWithNoTests =\n      config?.fail?.noTests ?? DEFAULT_TEST_OPTIONS.fail.noTests\n        ? []\n        : ['--failWithoutAssertions'];\n    const matchFlag = match ? [`--match='${match.toString()}'`] : [];\n    // const tapReporter = ['--tap'];\n    const verbose = config?.verbose ? ['--verbose'] : [];\n    const watchFlag = watch ? ['--watch'] : [];\n\n    const args = [\n      ...all,\n      ...color,\n      ...concurrencyArg,\n      ...configArg,\n      ...failFast,\n      ...failWithNoTests,\n      ...matchFlag,\n      ...verbose,\n      ...watchFlag,\n    ];\n\n    const shellCommand = `ava ${args.join(' ')}`;\n\n    const childProcess = spawn(shellCommand, {\n      env: process.env,\n      shell: true,\n    });\n    // console.log(childProcess);\n    //  args, {\n    // stdio: [process.stdin, process.stdout, process.stderr],\n    // }\n    // );\n\n    // if (childProcess) {\n\n    childProcess.stdout.on('data', data => {\n      logOutput(data.toString());\n    });\n\n    // // // if (childProcess.stderr) {\n    childProcess.stderr.on('data', data => {\n      logError(data.toString());\n    });\n    // // // }\n\n    // childProcess.on('exit', code => {\n    //   if (code && code > 0) {\n    //     process.exit(code);\n    //   }\n    // });\n\n    // childProcess.on('error', err => {\n    //   console.log('child process error:');\n    //   console.error(err);\n    // });\n\n    // childProcess.on('close', code => {\n    //   console.log('child process closed');\n    // });\n\n    await onExit(childProcess);\n\n    // }\n  } catch (error) {\n    // logError(error);\n    // console.log('Error caught while spawning ava process:');\n    console.log('error:');\n    console.error(error);\n    throw error;\n  }\n}\n", "import { TestReporter, TestTool } from '@srclaunch/types';\n\nexport const DEFAULT_TEST_OPTIONS = {\n  concurrency: 1,\n  coverage: {\n    directory: 'coverage',\n    reporters: [TestReporter.Lcov, TestReporter.JSONSummary],\n    thresholds: {\n      global: {\n        branches: 0,\n        functions: 0,\n        lines: 0,\n        statements: 0,\n      },\n    },\n  },\n  fail: {\n    fast: true,\n    noTests: false,\n  },\n  tool: TestTool.Ava,\n  verbose: true,\n};\n", "import { TestConfig } from '@srclaunch/types';\nimport { Report } from 'c8';\nimport { emptyDir, ensureDir } from 'fs-extra';\nimport path from 'node:path';\nimport pc from 'picocolors';\n\nimport { DEFAULT_TEST_OPTIONS } from './index';\n\nexport async function run(config: TestConfig): Promise<Report> {\n  try {\n    const coverageDir = path.join(\n      process.cwd(),\n      config.coverage?.directory ?? DEFAULT_TEST_OPTIONS.coverage.directory,\n    );\n\n    await ensureDir(coverageDir);\n    await emptyDir(coverageDir);\n\n    const report = new Report({\n      all: true,\n      reporter: (config.coverage?.reporters ??\n        DEFAULT_TEST_OPTIONS.coverage.reporters) as string[],\n      reportsDirectory: coverageDir,\n      src: [path.join(process.cwd(), 'src')],\n      tempDirectory: coverageDir,\n    });\n\n    await report.run();\n\n    console.log(\n      `${pc.green('\u2714')} generated coverage report in ${pc.bold(coverageDir)}`,\n    );\n\n    return report;\n  } catch (error) {\n    console.warn('Error encountered while generating coverage reports');\n    console.error(error);\n    throw error;\n  }\n}\n", "import { TestConfig } from '@srclaunch/types';\nimport jest from 'jest';\nimport path from 'node:path';\n\nimport { DEFAULT_TEST_OPTIONS } from './index';\n\nexport async function run({\n  config,\n  match,\n  watch,\n}: {\n  readonly config: TestConfig;\n  readonly match?: string;\n  readonly watch?: boolean;\n}) {\n  try {\n    const colors = ['--colors'];\n    const concurrencyArg = config?.concurrency\n      ? ['--maxConcurrency', config.concurrency?.toString() ?? '5']\n      : [];\n    const configArg = [\n      '--config',\n      'node_modules/@srclaunch/dx/jest.config.mjs',\n    ];\n    const coverageProvider = ['--coverageProvider', 'v8'];\n    const failFast = config?.fail?.fast ? ['--bail'] : [];\n    const failWithNoTests =\n      config?.fail?.noTests ?? DEFAULT_TEST_OPTIONS.fail.noTests\n        ? []\n        : ['--passWithNoTests'];\n    const matchFlag = match ? [`--t ${match.toString()}`] : [];\n    // const tapReporter = ['--tap'];\n    // const preset = ['--preset', 'ts-jest'];\n    const rootDir = ['--rootDir', path.resolve(process.cwd())];\n    const verbose = config?.verbose ? ['--verbose'] : [];\n    const watchFlag = watch ? ['--watch'] : [];\n\n    const args = [\n      ...colors,\n      ...concurrencyArg,\n      ...configArg,\n      ...coverageProvider,\n      ...failWithNoTests,\n      ...failFast,\n      ...matchFlag,\n      // ...preset,\n      ...rootDir,\n      ...verbose,\n      ...watchFlag,\n    ];\n\n    await jest.run(args, path.resolve());\n  } catch (error) {\n    console.error(error);\n  }\n}\n", "import { TestConfig } from '@srclaunch/types';\nimport { globby } from 'globby';\nimport path from 'node:path';\nimport tape from 'tape';\nimport { create } from 'ts-node';\n// import { DEFAULT_TEST_OPTIONS } from './index';\n\nexport async function run({\n  config,\n  match,\n  watch,\n}: {\n  readonly config: TestConfig;\n  readonly match?: string;\n  readonly watch?: boolean;\n}) {\n  try {\n    // const colors = ['--colors'];\n    // const concurrencyArg = config?.concurrency\n    //   ? ['--maxConcurrency', config.concurrency?.toString() ?? '5']\n    //   : [];\n    // const coverageProvider = ['--coverageProvider', 'v8'];\n    // const failFast = config?.fail?.fast ? ['--bail'] : [];\n    // const failWithNoTests =\n    //   config?.fail?.noTests ?? DEFAULT_TEST_OPTIONS.fail.noTests\n    //     ? []\n    //     : ['--passWithNoTests'];\n    // const matchFlag = match ? [`--t ${match.toString()}`] : [];\n    // // const tapReporter = ['--tap'];\n    // const preset = ['--preset', 'ts-jest'];\n    // const rootDir = ['--rootDir', path.resolve(process.cwd())];\n    // const verbose = config?.verbose ? ['--verbose'] : [];\n    // const watchFlag = watch ? ['--watch'] : [];\n\n    // const args = [\n    //   ...colors,\n    //   ...concurrencyArg,\n    //   ...coverageProvider,\n    //   ...failWithNoTests,\n    //   ...failFast,\n    //   ...matchFlag,\n    //   ...preset,\n    //   ...rootDir,\n    //   ...verbose,\n    //   ...watchFlag,\n    // ];\n    // await jest.run(args, path.resolve());\n    // const api = new Vitest();\n\n    // api.start();\n\n    tape.createStream({ objectMode: true }).on('data', function (row) {\n      console.log(JSON.stringify(row));\n    });\n\n    const paths = await globby(['**/*.test.ts'], { expandDirectories: true });\n\n    for (const file of paths) {\n      import(path.resolve(file));\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n", "import { TestConfig } from '@srclaunch/types';\n// import path from 'node:path';\nimport { createVitest, startVitest } from 'vitest/node';\n\n// import { DEFAULT_TEST_OPTIONS } from './index';\n\nexport async function run({\n  config,\n  match,\n  watch,\n}: {\n  readonly config: TestConfig;\n  readonly match?: string;\n  readonly watch?: boolean;\n}) {\n  try {\n    // const colors = ['--colors'];\n    // const concurrencyArg = config?.concurrency\n    //   ? ['--maxConcurrency', config.concurrency?.toString() ?? '5']\n    //   : [];\n    // const coverageProvider = ['--coverageProvider', 'v8'];\n    // const failFast = config?.fail?.fast ? ['--bail'] : [];\n    // const failWithNoTests =\n    //   config?.fail?.noTests ?? DEFAULT_TEST_OPTIONS.fail.noTests\n    //     ? []\n    //     : ['--passWithNoTests'];\n    // const matchFlag = match ? [`--t ${match.toString()}`] : [];\n    // // const tapReporter = ['--tap'];\n    // const preset = ['--preset', 'ts-jest'];\n    // const rootDir = ['--rootDir', path.resolve(process.cwd())];\n    // const verbose = config?.verbose ? ['--verbose'] : [];\n    // const watchFlag = watch ? ['--watch'] : [];\n\n    // const args = [\n    //   ...colors,\n    //   ...concurrencyArg,\n    //   ...coverageProvider,\n    //   ...failWithNoTests,\n    //   ...failFast,\n    //   ...matchFlag,\n    //   ...preset,\n    //   ...rootDir,\n    //   ...verbose,\n    //   ...watchFlag,\n    // ];\n    // await jest.run(args, path.resolve());\n    // const api = new Vitest();\n\n    // api.start();\n\n    const result = await createVitest({});\n    console.log('resut', result);\n  } catch (error) {\n    console.error(error);\n  }\n}\n", "import { Flag, FlagType } from 'meow';\n\nexport type InteractiveModeFlagType = {\n  readonly interactive: Flag<'boolean', true, false>;\n};\n\nexport const InteractiveModeFlag: InteractiveModeFlagType = {\n  interactive: {\n    alias: 'i',\n    default: true,\n    type: 'boolean',\n  },\n};\n"],
  "mappings": "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AUA,EAAM,CACxB,OAAOR,EAAU,cAAcQ,EAAK,GAAIA,EAAK,EAAE,CACjD,CAAC,EAKD,CACE,CAAC,MAAO,EAAE,EACV,CAAC,SAAU,IAAI,EACf,CAAC,gEAAiE,MAAM,EACxE,CAAC,kCAAmC,KAAK,EACzC,CAAC,QAAS,GAAG,EACb,CAAC,uFAAwF,MAAM,EAC/F,CAAC,oBAAqB,MAAM,EAC5B,CAAC,uBAAwB,QAAQ,EACjC,CAAC,sBAAuB,IAAI,EAC5B,CAAC,2FAA4F,IAAI,EACjG,CAAC,qEAAsE,OAAO,EAC9E,CAAC,iCAAkC,IAAI,EACvC,CAAC,oBAAqB,MAAM,EAC5B,CAAC,4FAA6F,MAAM,EACpG,CAAC,yGAA0G,MAAM,EACjH,CAAC,8FAA+F,MAAM,EACtG,CAAC,0BAA2B,KAAK,EACjC,CAAC,+BAAgC,MAAM,EACvC,CAAC,sBAAuB,MAAM,EAC9B,CAAC,oBAAqB,QAAQ,EAC9B,CAAC,eAAgB,IAAI,EACrB,CAAC,YAAa,IAAI,EAClB,CAAC,QAAS,KAAK,CACjB,EAAE,QAAQ,SAAUA,EAAM,CACxB,OAAOR,EAAU,gBAAgBQ,EAAK,GAAIA,EAAK,EAAE,CACnD,CAAC,EAKD,CAEE,YACA,SACA,SACA,MACA,WACA,UACA,OACA,YACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,WACA,MACA,UACA,UACA,WACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,OACA,YACA,OACA,WACA,SACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,UACA,QACA,QACA,SACA,UACA,iBACA,QACA,OACA,SACA,UACA,UACA,aACA,WACA,MACA,eAEA,gBACA,SACA,SACA,YACA,WACA,QACA,SACF,EAAE,QAAQR,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4BACf,CACF,EACA,CACE,KAAM,SACN,KAAM,4DACN,KAAM,CACJ,aAAc,8BACd,UAAW,kCACX,WAAY,4BACZ,YAAa,4BACf,CACF,CACF,CACF,CACF,EACA,KAAM,mBACN,QAAS,CACP,SAAU,CAAC,MAAM,EACjB,SACF,CACF,CAAC,CACH,EACC,gBAAgB,MAAM,EACtB,gBAAgB,YAAY,EAC5B,gBAAgB,OAAO,EACvB,gBAAgB,QAAQ,EACxB,QACC,mBACAC,GAA0B,CACxB,OAAQ,CACN,UAAW,CACT,MAAO,YACP,KAAMC,EAAW,MACnB,EACA,KAAM,CACJ,MAAO,OACP,KAAMA,EAAW,MACnB,CACF,EACA,KAAM,MACR,CAAC,CACH,EACC,gBAAgB,KAAK,EACrB,gBAAgB,UAAU,EAC1B,gBAAgB,OAAO,EACvB,QACC,kBACAC,GAAoC,CAClC,OAAQ,CACN,UAAW,UACX,KAAM,QACR,EACA,KAAM,MACR,CAAC,CACH,EACC,QAAQ,gBAAiBC,GAAwB,CAAC,EAClD,QACC,gBACAC,GAAwB,CACtB,MAAO,CACL,kBACA,cACA,UACA,OACA,UACA,QACA,WACA,YACA,cACF,CACF,CAAC,CACH,EACC,QACC,gBACAC,GAAwB,CAAE,SAAUC,EAAS,SAAU,CAAC,CAC1D,EACC,QACC,aACAC,GAAqB,CACnB,MAAO,CACL,OACA,YACA,eACA,WACA,gBACA,mBACA,kBACA,QACF,CACF,CAAC,CACH,EACC,QACC,kBACAC,GAA0B,CACxB,MAAO,CACL,YACA,YACA,WACA,YACA,eACA,cACA,UACA,UACA,kBACA,gBACF,CACF,CAAC,CACH,EACC,QAAQ,kBAAmBC,GAA0B,CAAC,EACtD,QACC,kBACAC,GAAoC,CAAE,KAAAb,EAAM,MAAAC,CAAM,CAAC,CACrD,EACC,QAAQ,kBAAmBa,GAA2B,CAAC,EACvD,QAAQ,eAAgBC,GAAqB,CAAC,EAE9C,QAAQ,UAAWC,GAAmB,CAAC,EACvC,QACC,eACAC,GAAyB,CACvB,YAAAlB,EACA,KAAAC,EACA,MAAAC,CACF,CAAC,CACH,EACC,QACC,sBACAiB,GAA+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",
  "names": ["StringChecks", "tagName", "explanation", "url", "htmlName", "packageName", "importPath", "prefixedByPackageName", "selector", "identifier", "exports", "StringChecks_1", "DocNodeManager", "packageName", "definitions", "packageNameError", "_i", "definitions_1", "definition", "existingDefinition", "newDefinition", "docNodeKind", "parentKind", "childKinds", "parentDefinition", "childKinds_1", "childKind", "exports", "Standardization", "exports", "StringChecks_1", "Standardization_1", "TSDocTagSyntaxKind", "exports", "TSDocTagDefinition", "parameters", "tagName", "TSDocTagDefinition_1", "Standardization_1", "StandardTags", "parameters", "exports", "TSDocValidationConfiguration", "exports", "DocNodeKind", "exports", "DocNode", "parameters", "x", "DocNode_1", "nodes", "__importStar", "BuiltInDocNodes", "configuration", "docNodeManager", "exports", "TSDocMessageId", "exports", "StandardTags_1", "TSDocValidationConfiguration_1", "DocNodeManager_1", "BuiltInDocNodes_1", "TSDocMessageId_1", "TSDocConfiguration", "noStandardTags", "_this", "x", "tagName", "alreadyUpperCaseTagName", "tagDefinition", "existingDefinition", "tagDefinitions", "supported", "_i", "tagDefinitions_1", "tagDefinitions_2", "htmlTags", "htmlTags_1", "htmlTag", "messageId", "matching", "exports", "TSDocTagDefinition_1", "ModifierTagSet", "modifierTagName", "modifierTagDefinition", "blockTag", "exports", "ModifierTagSet_1", "StandardTags_1", "StandardModifierTagSet", "_super", "__extends", "exports", "DocNode_1", "DocNodeContainer", "_super", "__extends", "parameters", "childNodes", "_this", "docNode", "docNodes", "_i", "docNodes_1", "exports", "DocNode_1", "DocNodeContainer_1", "DocParagraph", "_super", "__extends", "parameters", "childNodes", "exports", "DocNode_1", "DocParagraph_1", "DocNodeContainer_1", "DocSection", "_super", "__extends", "parameters", "childNodes", "docNode", "paragraphNode", "lastNode", "docNodes", "_i", "docNodes_1", "exports", "DocNode_1", "DocSection_1", "DocBlock", "_super", "__extends", "parameters", "_this", "exports", "TokenKind", "exports", "Token", "kind", "range", "line", "DocNode_1", "Token_1", "ExcerptKind", "exports", "DocExcerpt", "_super", "__extends", "parameters", "_this", "_i", "_a", "token", "DocNode_1", "StringChecks_1", "DocExcerpt_1", "DocBlockTag", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "DocCodeSpan", "_super", "__extends", "parameters", "_this", "exports", "StringBuilder", "text", "joined", "exports", "DocNode_1", "DocParamCollection", "_super", "__extends", "parameters", "_this", "docParamBlock", "parameterName", "exports", "nodes_1", "TrimSpacesTransform", "docParagraph", "transformedNodes", "pendingSpace", "accumulatedTextChunks", "accumulatedNodes", "finishedSkippingLeadingSpaces", "_i", "_a", "node", "docPlainText", "text", "startedWithSpace", "endedWithSpace", "collapsedText", "transformedParagraph", "exports", "TrimSpacesTransform_1", "DocNodeTransforms", "docParagraph", "exports", "nodes_1", "DocNodeTransforms_1", "StandardTags_1", "LineState", "TSDocEmitter", "output", "docComment", "htmlTag", "declarationReference", "docNode", "_this", "docBlock", "docBlockTag", "docCodeSpan", "__spreadArrays", "docDeclarationReference", "docErrorText", "docEscapedText", "docFencedCode", "docHtmlAttribute", "docHtmlEndTag", "docHtmlStartTag", "needsSpace", "_i", "_a", "attribute", "docInheritDocTag_1", "docInlineTag_1", "docLinkTag_1", "docMemberIdentifier", "docMemberReference", "docMemberSelector", "docMemberSymbol", "docSection", "trimmedParagraph", "docParamBlock", "docParamCollection", "docPlainText", "docInlineTagBase", "writeInlineTagContent", "docNodes", "docNodes_1", "content", "splitLines", "firstLine", "splitLines_1", "line", "exports", "DocNode_1", "DocSection_1", "StandardModifierTagSet_1", "StringBuilder_1", "DocParamCollection_1", "DocComment", "_super", "__extends", "parameters", "_this", "block", "__spreadArrays", "stringBuilder", "emitter", "TSDocEmitter_1", "exports", "DocNode_1", "DocExcerpt_1", "StringBuilder_1", "DocDeclarationReference", "_super", "__extends", "parameters", "_this", "_a", "stringBuilder", "emitter", "TSDocEmitter_1", "__spreadArrays", "exports", "DocNode_1", "DocExcerpt_1", "DocErrorText", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "EscapeStyle", "exports", "DocEscapedText", "_super", "__extends", "parameters", "_this", "DocNode_1", "DocExcerpt_1", "DocFencedCode", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "DocHtmlAttribute", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "StringBuilder_1", "DocHtmlEndTag", "_super", "__extends", "parameters", "_this", "stringBuilder", "emitter", "TSDocEmitter_1", "exports", "DocNode_1", "DocExcerpt_1", "StringBuilder_1", "DocHtmlStartTag", "_super", "__extends", "parameters", "_this", "_a", "stringBuilder", "emitter", "TSDocEmitter_1", "__spreadArrays", "exports", "DocNode_1", "StringChecks_1", "DocExcerpt_1", "DocInlineTagBase", "_super", "__extends", "parameters", "_this", "__spreadArrays", "exports", "DocNode_1", "DocInlineTagBase_1", "DocInheritDocTag", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "DocInlineTagBase_1", "DocInlineTag", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocInlineTagBase_1", "DocExcerpt_1", "DocLinkTag", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "StringChecks_1", "DocExcerpt_1", "DocMemberIdentifier", "_super", "__extends", "parameters", "_this", "identifier", "exports", "DocNode_1", "DocExcerpt_1", "DocMemberReference", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "StringChecks_1", "DocExcerpt_1", "SelectorKind", "exports", "DocMemberSelector", "_super", "__extends", "parameters", "_this", "DocNode_1", "DocExcerpt_1", "DocMemberSymbol", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocBlock_1", "DocExcerpt_1", "DocParamBlock", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "DocPlainText", "_super", "__extends", "parameters", "_this", "exports", "DocNode_1", "DocExcerpt_1", "DocSoftBreak", "_super", "__extends", "parameters", "_this", "exports", "__exportStar", "exports", "nodes_1", "PlainTextEmitter", "nodeOrNodes", "requiredCharacters", "nodes", "foundCharacters", "_i", "nodes_2", "node", "docFencedCode", "docCodeSpan", "docEscapedText", "docLinkTag", "docPlainText", "s", "count", "length", "exports", "TextRange", "buffer", "pos", "end", "posDelimiter", "endDelimiter", "index", "line", "column", "currentIndex", "current", "exports", "ParserMessage", "parameters", "message", "range", "location_1", "exports", "ParserMessage_1", "ParserMessageLog", "parserMessage", "messageId", "messageText", "textRange", "tokenSequence", "docNode", "docErrorText", "exports", "TextRange_1", "nodes_1", "ParserMessageLog_1", "ParserContext", "configuration", "sourceRange", "exports", "TextRange_1", "TokenSequence", "parameters", "parserContext", "startIndex", "endIndex", "x", "exports", "TSDocMessageId_1", "State", "LineExtractor", "parserContext", "range", "buffer", "commentRangeStart", "commentRangeEnd", "collectingLineStart", "collectingLineEnd", "nextIndex", "state", "lines", "current", "currentIndex", "next", "exports", "TextRange_1", "Token_1", "Tokenizer", "lines", "tokens", "lastLine", "_i", "lines_1", "line", "tokenKind", "buffer", "end", "bufferIndex", "tokenPos", "charCode", "characterKind", "kind", "punctuation", "i", "specialMap", "_a", "key", "word", "exports", "Token_1", "TokenSequence_1", "TokenReader", "parserContext", "embeddedTokenSequence", "sequence", "tokenStrings", "x", "token", "marker", "exports", "Token_1", "Tokenizer_1", "nodes_1", "TokenSequence_1", "TokenReader_1", "StringChecks_1", "TSDocTagDefinition_1", "StandardTags_1", "PlainTextEmitter_1", "TSDocMessageId_1", "isFailure", "resultOrFailure", "NodeParser", "parserContext", "tokenReader", "done", "marker", "docNode", "docComment", "tagEndMarker", "tagDefinition", "tagName", "expectingInlineTag", "tokenSequenceForErrorContext", "nodeForErrorContext", "isInlineTag", "configuration", "modifierTagSet", "parsedBlockTag", "docBlockTag", "docParamBlock", "newBlock", "block", "openKind", "closeKind", "startMarker", "quoteKind", "openCount", "tokenKind", "jsdocTypeExcerpt", "spacingAfterJsdocTypeExcerpt", "spacingBeforeParameterNameExcerpt", "unsupportedJsdocTypeBeforeParameterNameExcerpt", "unsupportedJsdocOptionalNameOpenBracketExcerpt", "parameterName", "explanation", "errorParamBlock", "errorMessage", "parameterNameExcerpt", "unsupportedJsdocOptionalNameRestExcerpt", "errorSequence", "spacingAfterParameterNameExcerpt", "unsupportedJsdocTypeAfterParameterNameExcerpt", "hyphenExcerpt", "spacingAfterHyphenExcerpt", "unsupportedJsdocTypeAfterHyphenExcerpt", "escapedToken", "encodedTextExcerpt", "tagNameMarker", "badCharacter", "failure", "openingDelimiterExcerpt", "atSignMarker", "tagNameExcerpt", "spacingAfterTagNameExcerpt", "tagContentExcerpt", "closingDelimiterExcerpt", "docInlineTagParsedParameters", "tagNameWithUpperCase", "embeddedTokenReader", "errorTag", "parameters", "__assign", "looksLikeUrl", "spacingAfterLinkTextMarker", "linkTextAndSpacing", "urlDestination", "urlDestinationExcerpt", "invalidUrlExplanation", "hasHash", "lookingForImportCharacters", "sawImportCharacters", "packageNameExcerpt", "importPathExcerpt", "importHashExcerpt", "spacingAfterImportHashExcerpt", "scopedPackageName", "finishedScope", "memberReferences", "expectingDot", "memberReference", "leftBracketExcerpt", "spacingAfterLeftBracketExcerpt", "declarationReference", "rightBracketExcerpt", "leftQuoteExcerpt", "rightQuoteExcerpt", "identifierExcerpt", "identifier", "selector", "selectorExcerpt", "docMemberSelector", "lessThanToken", "nameExcerpt", "spacingAfterNameExcerpt", "htmlAttributes", "attributeNode", "endDelimiterMarker", "selfClosingTag", "equalsExcerpt", "spacingAfterEqualsExcerpt", "attributeValue", "valueExcerpt", "spacingAfterValueExcerpt", "quoteTokenKind", "textWithoutQuotes", "peekedTokenKind", "slashToken", "excerpt", "htmlName", "endOfOpeningDelimiterMarker", "openingDelimiter", "openingFenceExcerpt", "spacingAfterOpeningFenceExcerpt", "startOfPaddingMarker", "failure2", "restOfLineExcerpt", "languageExcerpt", "spacingAfterLanguageExcerpt", "codeEndMarker", "closingFenceStartMarker", "tokenBeforeDelimiter", "codeAndDelimiterExcerpt", "codeExcerpt", "spacingBeforeClosingFenceExcerpt", "closingFenceExcerpt", "spacingAfterClosingFenceExcerpt", "messageId", "textExcerpt", "docErrorText", "errorStartMarker", "errorInclusiveEndMarker", "errorMessagePrefix", "failureMessageId", "failureMessage", "tokenMarker", "tokenSequence", "endMarker", "exports", "nodes_1", "ParagraphSplitter", "node", "_i", "_a", "childNode", "docSection", "inputNodes", "outputNodes", "inputNodes_1", "oldNode", "oldParagraph", "inputParagraphNodes", "currentParagraph", "state", "currentIndex", "isBlankLine", "lineEndIndex", "i", "docPlainText", "exports", "TextRange_1", "ParserContext_1", "LineExtractor_1", "Tokenizer_1", "NodeParser_1", "TSDocConfiguration_1", "ParagraphSplitter_1", "TSDocParser", "configuration", "text", "range", "parserContext", "nodeParser", "exports", "DocNodeManager_1", "exports", "TSDocConfiguration_1", "TSDocTagDefinition_1", "TSDocValidationConfiguration_1", "StandardTags_1", "Standardization_1", "StandardModifierTagSet_1", "ModifierTagSet_1", "PlainTextEmitter_1", "StringBuilder_1", "TSDocEmitter_1", "__exportStar", "ParserContext_1", "ParserMessage_1", "ParserMessageLog_1", "TextRange_1", "Token_1", "TokenSequence_1", "TSDocMessageId_1", "TSDocParser_1", "DocNodeTransforms_1", "require_tslib", "__commonJSMin", "exports", "module", "init_define_navigator", "__extends", "__assign", "__rest", "__decorate", "__param", "__metadata", "__awaiter", "__generator", "__exportStar", "__values", "__read", "__spread", "__spreadArrays", "__spreadArray", "__await", "__asyncGenerator", "__asyncDelegator", "__asyncValues", "__makeTemplateObject", "__importStar", "__importDefault", "__classPrivateFieldGet", "__classPrivateFieldSet", "__classPrivateFieldIn", "__createBinding", "factory", "root", "createExporter", "previous", "id", "v", "exporter", "extendStatics", "d", "b", "p", "__", "t", "s", "i", "n", "e", "decorators", "target", "key", "desc", "c", "r", "paramIndex", "decorator", "metadataKey", "metadataValue", "thisArg", "_arguments", "P", "generator", "adopt", "value", "resolve", "reject", "fulfilled", "step", "rejected", "result", "body", "_", "f", "y", "g", "verb", "op", "m", "o", "k", "k2", "ar", "error", "il", "a", "j", "jl", "to", "from", "pack", "l", "q", "resume", "settle", "fulfill", "cooked", "raw", "__setModuleDefault", "mod", "receiver", "state", "kind", "SUPPORTED_LOCALE", "localeLowerCase", "str", "locale", "lang", "lowerCase", "m", "exports", "lower_case_1", "DEFAULT_SPLIT_REGEXP", "DEFAULT_STRIP_REGEXP", "noCase", "input", "options", "_a", "splitRegexp", "_b", "stripRegexp", "_c", "transform", "_d", "delimiter", "result", "replace", "start", "end", "exports", "re", "value", "no_case_1", "pascalCaseTransform", "input", "index", "firstChar", "lowerChars", "exports", "pascalCaseTransformMerge", "pascalCase", "options", "tslib_1", "pascal_case_1", "camelCaseTransform", "input", "index", "exports", "camelCaseTransformMerge", "camelCase", "options", "tslib_1", "upperCaseFirst", "input", "exports", "no_case_1", "upper_case_first_1", "capitalCaseTransform", "input", "exports", "capitalCase", "options", "tslib_1", "SUPPORTED_LOCALE", "localeUpperCase", "str", "locale", "lang", "upperCase", "m", "exports", "no_case_1", "upper_case_1", "constantCase", "input", "options", "tslib_1", "exports", "no_case_1", "dotCase", "input", "options", "tslib_1", "exports", "capital_case_1", "headerCase", "input", "options", "tslib_1", "exports", "dot_case_1", "paramCase", "input", "options", "tslib_1", "exports", "dot_case_1", "pathCase", "input", "options", "tslib_1", "exports", "no_case_1", "upper_case_first_1", "sentenceCaseTransform", "input", "index", "result", "exports", "sentenceCase", "options", "tslib_1", "dot_case_1", "snakeCase", "input", "options", "tslib_1", "exports", "tslib_1", "exports", "require_pluralize", "__commonJSMin", "exports", "module", "init_define_navigator", "root", "pluralize", "__require", "pluralRules", "singularRules", "uncountables", "irregularPlurals", "irregularSingles", "sanitizeRule", "rule", "restoreCase", "word", "token", "interpolate", "str", "args", "match", "index", "replace", "result", "sanitizeWord", "rules", "len", "replaceWord", "replaceMap", "keepMap", "checkWord", "bool", "count", "inclusive", "pluralized", "replacement", "single", "plural", "init_define_navigator", "meow", "updateNotifier", "init_define_navigator", "init_define_navigator", "Activities", "PageLeaveMethod", "Analytics", "BuildFormat", "Platform", "BuildTarget", "BuildTool", "PaymentIntentStatus", "SubscriptionStatus", "SubscriptionPlanDuration", "ChangeType", "ChatMessageStatus", "ChatMessageType", "ChatMessageAttachmentType", "ChatMessageReactionType", "CommunicationMedium", "AlgorithmHashCondition", "SemanticVersionCondition", "UUIDCondition", "MD5Condition", "BooleanCondition", "ColorCondition", "DateCondition", "DateRangeCondition", "DateTimeCondition", "DayOfMonthCondition", "MonthCondition", "TimeCondition", "TimeRangeCondition", "TimeOfDayCondition", "WeekdayCondition", "YearCondition", "HexadecimalCondition", "JSONCondition", "MarkdownCondition", "CurrencyCondition", "BitcoinAddressCondition", "EthereumAddressCondition", "LanguageCondition", "CityCondition", "CountryCondition", "LatitudeCondition", "LongitudeCondition", "PostalCodeCondition", "ProvinceCondition", "StateCondition", "StreetAddressCondition", "MenuCondition", "TagsCondition", "DataURICondition", "DomainNameCondition", "EmailCondition", "IPAddressCondition", "IPAddressRangeCondition", "PortCondition", "MACAddressCondition", "MagnetURICondition", "MimeTypeCondition", "SlugCondition", "URLCondition", "NumberCondition", "FloatCondition", "IntegerCondition", "CreditCardCondition", "EmailAddressCondition", "LicensePlateNumberCondition", "PassportNumberCondition", "PasswordCondition", "PhoneNumberCondition", "SocialSecurityNumberCondition", "AirportCondition", "BICCondition", "EANCondition", "EINCondition", "IBANCondition", "ISBNCondition", "ISINCondition", "ISMNCondition", "ISSNCondition", "TaxIDNumberCondition", "VATCondition", "StringCondition", "LongTextCondition", "Condition", "AuthenticationCondition", "DataPointMetric", "DefaultValue", "ModelType", "Primitives", "CloudProviders", "InfrastuctureClass", "DeploymentPlatform", "DeploymentStrategy", "CodeFormatter", "CodeLinter", "SrcLaunchSDK", "StaticTyping", "DocumentationType", "EnvironmentType", "RetryStrategy", "CountryCode", "CurrencyCode", "CryptoCurrency", "LanguageCode", "TimezoneRegions", "TimezoneOffset", "Timezones", "Region", "SubRegion", "LocaleCode", "License", "LogLevel", "HttpRequestMethod", "HttpResponseCode", "OnboardingStatus", "BrowserPackage", "NodePackage", "UniversalPackage", "TypesPackage", "PackageType", "PackageManager", "DesktopPlatform", "MobilePlatform", "ProblemSeverity", "ProblemType", "ProjectType", "Status", "PublishAccess", "RouteRole", "Runner", "ServiceType", "FileType", "TestTool", "TestReporter", "DeviceType", "ModalType", "NotificationType", "UserVerificationStatus", "UserAuthenticationVerificationType", "UserRole", "fs", "init_define_navigator", "buildCommand", "fs", "path", "init_define_navigator", "BUILD_DIR", "init_define_navigator", "getFormatFileSubExtension", "format", "Y", "getViteFormatFileExtension", "build", "bundle", "clean", "format", "formats", "Y", "input", "minify", "output", "platform", "Q", "sourcemap", "splitting", "target", "$", "treeShaking", "getEntryPoints", "path", "getPlatform", "buildFormat", "formatType", "buildOptions", "getFormatFileSubExtension", "BUILD_DIR", "result", "buildCommand", "warning", "error", "init_define_navigator", "fs", "path", "ts", "build", "input", "types", "output", "configPath", "tsConfigContents", "tsConfig", "tsOptions", "buildFiles", "f", "file", "program", "emitResult", "allDiagnostics", "init_define_navigator", "path", "pc", "buildCommand", "init_define_navigator", "SOURCE_DIR", "SOURCE_MAIN_FILE", "init_define_navigator", "react", "pc", "VitePWA", "init_define_navigator", "childProcess", "EventEmitter", "Process", "command", "args", "eventName", "error", "code", "data", "getVitePlugins", "reactApp", "pwa", "styledComponents", "plugins", "react", "VitePWA", "WebApplicationRunner", "props", "environment", "Process", "error", "pc", "data", "build", "assetsDir", "bundle", "clean", "format", "Y", "formats", "input", "library", "manifest", "minify", "optimize", "output", "pwa", "react", "rootDir", "sourcemap", "ssr", "styledComponents", "target", "$", "viteFormats", "f", "getLibraryOptions", "path", "SOURCE_DIR", "SOURCE_MAIN_FILE", "fmt", "getViteFormatFileExtension", "getRollupOptions", "options", "buildCommand", "BUILD_DIR", "getVitePlugins", "pc", "error", "init_define_navigator", "CommandType", "Command", "options", "cli", "config", "flags", "handleCommand", "command", "commands", "commandName", "matchingCommand", "cmd", "build_default", "Command", "config", "options", "build", "BuildOptions", "flags", "X", "init_define_navigator", "pc", "init_define_navigator", "path", "init_define_navigator", "Git", "add", "path", "commit", "message", "createChangeset", "files", "message", "scope", "type", "paths", "file", "path", "add", "commitMessage", "commit", "changesets_default", "Command", "cli", "flags", "message", "scope", "type", "commitMessage", "createChangeset", "pc", "error", "config", "init_define_navigator", "pc", "config_default", "Command", "pc", "init_define_navigator", "init_define_navigator", "init_define_navigator", "init_define_navigator", "fs", "init_define_navigator", "objectToString", "isArray", "object", "isFunction", "typeStr", "obj", "escapeRegExp", "string", "hasProperty", "propName", "primitiveHasOwnProperty", "primitive", "regExpTest", "testRegExp", "re", "nonSpaceRe", "isWhitespace", "entityMap", "escapeHtml", "s", "whiteRe", "spaceRe", "equalsRe", "curlyRe", "tagRe", "parseTemplate", "template", "tags", "lineHasNonSpace", "sections", "tokens", "spaces", "hasTag", "nonSpace", "indentation", "tagIndex", "stripSpace", "openingTagRe", "closingTagRe", "closingCurlyRe", "compileTags", "tagsToCompile", "mustache", "scanner", "Scanner", "start", "type", "value", "chr", "token", "openSection", "i", "valueLength", "nestTokens", "squashTokens", "squashedTokens", "lastToken", "numTokens", "nestedTokens", "collector", "section", "match", "index", "Context", "view", "parentContext", "name", "cache", "context", "intermediateValue", "names", "lookupHit", "Writer", "key", "cacheKey", "isCacheEnabled", "partials", "config", "originalTemplate", "buffer", "symbol", "self", "subRender", "j", "partial", "filteredIndentation", "partialByNl", "indentedValue", "escape", "defaultWriter", "mustache_default", "CodeGenWorkflow", "path", "content", "props", "mustache_default", "operation", "fs", "init_define_navigator", "getESLintConfigTemplate", "platform", "tsconfigPath", "init_define_navigator", "getPrettierConfigTemplate", "init_define_navigator", "getPrettierIgnoreTemplate", "paths", "init_define_navigator", "getStyleLintConfigTemplate", "init_define_navigator", "getTurboConfigTemplate", "init_define_navigator", "getTypeScriptConfigTemplate", "init_define_navigator", "getGitIgnoreTemplate", "paths", "init_define_navigator", "getPackageConfigTemplate", "owner", "name", "description", "init_define_navigator", "getChangeLogTemplate", "init_define_navigator", "getLicenseTemplate", "init_define_navigator", "getReadmeTemplate", "name", "owner", "init_define_navigator", "getSrcLaunchWorkspaceConfigTemplate", "owner", "name", "init_define_navigator", "getPnpmWorkspaceConfigTemplate", "paths", "path", "SrcLaunchWebApplicationGenerator", "CodeGenWorkflow", "options", "description", "name", "owner", "getESLintConfigTemplate", "Q", "getGitIgnoreTemplate", "getPrettierIgnoreTemplate", "getPrettierConfigTemplate", "getSrcLaunchWorkspaceConfigTemplate", "getStyleLintConfigTemplate", "getChangeLogTemplate", "getLicenseTemplate", "getPackageConfigTemplate", "getPnpmWorkspaceConfigTemplate", "getTypeScriptConfigTemplate", "getTurboConfigTemplate", "getReadmeTemplate", "init_define_navigator", "init_define_navigator", "getGitHubActionTemplate", "name", "jobs", "trigger", "branch", "jobName", "index", "job", "step", "stepName", "stepRun", "stepUses", "stepWith", "key", "init_define_navigator", "getEditorConfigTemplate", "init_define_navigator", "getESLintIgnoreTemplate", "paths", "init_define_navigator", "getTypescriptTypeDefinitionTemplate", "fields", "name", "fieldName", "init_define_navigator", "getSrcLaunchModelTemplate", "fields", "name", "fieldName", "field", "SrcLaunchWorkspaceGenerator", "CodeGenWorkflow", "options", "description", "name", "owner", "getGitHubActionTemplate", "getSrcLaunchModelTemplate", "Ue", "getTypescriptTypeDefinitionTemplate", "getEditorConfigTemplate", "getESLintIgnoreTemplate", "getESLintConfigTemplate", "Q", "getGitIgnoreTemplate", "getPrettierIgnoreTemplate", "getPrettierConfigTemplate", "getSrcLaunchWorkspaceConfigTemplate", "getStyleLintConfigTemplate", "getChangeLogTemplate", "getLicenseTemplate", "getPackageConfigTemplate", "getPnpmWorkspaceConfigTemplate", "getTypeScriptConfigTemplate", "getTurboConfigTemplate", "getReadmeTemplate", "create_default", "Command", "config", "flags", "SrcLaunchWorkspaceGenerator", "Ce", "SrcLaunchWebApplicationGenerator", "init_define_navigator", "init_define_navigator", "publish", "pc", "deployToGitHubPages", "input", "output", "deploy_default", "Command", "config", "deploymentConfig", "platform", "input", "output", "Le", "deployToGitHubPages", "options", "deployment", "init_define_navigator", "render", "React", "init_define_navigator", "globby", "Box", "Text", "useEffect", "useState", "init_define_navigator", "Box", "measureElement", "Text", "useInput", "createRef", "useEffect", "useState", "Scrollable", "items", "cursor", "setCursor", "lineCount", "setLineCount", "lines", "setLines", "isScrollable", "setScrollable", "autoScroll", "setAutoScroll", "scrollbarHeight", "setScrollbarHeight", "scrollbarOffset", "setScrollbarOffset", "input", "key", "ref", "height", "message", "k", "visible", "getCursor", "index", "offset", "getFormattedMessage", "line", "init_define_navigator", "init_define_navigator", "Box", "Text", "useFocus", "useFocusManager", "useInput", "useEffect", "Button", "backgroundColor", "label", "onSelect", "onFocus", "textColor", "enableFocus", "focusNext", "isFocused", "input", "key", "Button_default", "init_define_navigator", "Text", "StatusOrb", "status", "Text", "StatusButton", "label", "status", "props", "Button_default", "StatusOrb", "StatusButton_default", "init_define_navigator", "Box", "Text", "Children", "useEffect", "useState", "Tabs", "children", "title", "props", "activeTab", "setActiveTab", "useState", "useEffect", "child", "index", "Box", "Button_default", "Text", "child1", "Children", "child2", "Tab", "init_define_navigator", "loadConfig", "loadSrcLaunchConfig", "basePath", "config", "cfg", "Ce", "init_define_navigator", "chokidar", "globby", "path", "init_define_navigator", "import_tsdoc", "fs", "globby", "os", "path", "pc", "parse", "ComponentLibraryDocsGenerator", "options", "componentLibraryDocsDir", "componentDocsDir", "componentDocsPath", "routeDocsPath", "documentComment", "parserContext", "route", "component", "routesFilePath", "componentFilePath", "componentFileNamePath", "matchFiles", "cwd", "match", "readmeFilePath", "readmeFileContents", "componentMatches", "file", "markdownMatches", "fileName", "filePath", "hierarchy", "docs", "document", "markdownFileName", "markdownFilePath", "hasMarkdownFile", "markdownContent", "componentDocument", "nonComponentRoutes", "c", "runProject", "config", "Ce", "docOptions", "inputDirectory", "componentFiles", "globby", "file", "path", "markdownFiles", "readmeFilePath", "watcher", "chokidar", "runOptions", "runner", "WebApplicationRunner", "De", "documentGenerator", "ComponentLibraryDocsGenerator", "filePath", "error", "ni", "init_define_navigator", "useEffect", "useState", "init_define_navigator", "Box", "useEffect", "useState", "FullScreen", "children", "props", "size", "setSize", "onResize", "AppContainer", "children", "cliVersion", "mainOutput", "setMainOutput", "useState", "serviceStatus", "setServiceStatus", "addToLogs", "string_", "currentState", "useEffect", "FullScreen", "DevelopmentContainer", "children", "config", "initialTab", "mainOutput", "setMainOutput", "useState", "serviceStatus", "setServiceStatus", "runnableApps", "setRunnableApps", "runnableServices", "setRunnableServices", "coreApiStatus", "addToLogs", "string_", "currentState", "start", "apps", "globby", "app", "appConfig", "loadSrcLaunchConfig", "services", "service", "serviceConfig", "packages", "useEffect", "run", "project", "result", "runProject", "AppContainer", "Tabs", "Tab", "Box", "StatusButton_default", "Text", "index", "newState", "appToRun", "Scrollable", "dev_default", "Command", "config", "flags", "waitUntilExit", "render", "React", "DevelopmentContainer", "error", "init_define_navigator", "globby", "path", "pc", "docs_default", "Command", "config", "options", "Be", "inputDirectory", "componentFiles", "globby", "file", "path", "markdownFiles", "readmeFilePath", "ComponentLibraryDocsGenerator", "pc", "flags", "init_define_navigator", "init_define_navigator", "init_define_navigator", "generateModelsSDK", "generateSDKs", "generateModelsSDK", "init_define_navigator", "pc", "init_define_navigator", "prompts", "promptForProjectCreate", "prompts", "promptForProjectName", "value", "promptForProjectDescription", "promptForProjectType", "Ce", "type", "createNewProjectInteractive", "name", "description", "type", "promptForProjectCreate", "projectName", "promptForProjectName", "projectDescription", "promptForProjectDescription", "Ce", "pc", "projectType", "promptForProjectType", "generate_default", "Command", "config", "repositoryWorkflows", "_workflow", "name", "workflow", "flags", "createNewProjectInteractive", "generateSDKs", "init_define_navigator", "help_default", "Command", "cli", "init_define_navigator", "infrastructure_default", "Command", "config", "flags", "init_define_navigator", "install_default", "Command", "cli", "flags", "init_define_navigator", "init_define_navigator", "path", "cleanModels", "MODEL_DEPS_PATH", "error", "init_define_navigator", "ora", "init_define_navigator", "fs", "path", "buildCoreAPI", "sequelizeModelsProject", "BUILD_PATH", "DIST_PATH", "indexFileString", "init_define_navigator", "import_change_case", "import_pluralize", "fs", "path", "constructHttpClientIndexScript", "environments", "models", "imports", "name", "hosts", "getHttpClientEndpoints", "modelName", "typesProjectName", "lowercase", "lowercasePlural", "pluralize", "capitalizedPlural", "urlParameter", "buildHttpClient", "workspaceConfig", "MODELS_PATH", "BUILD_PATH", "DIST_PATH", "files", "file", "modelHttpClientEndpoints", "indexFileContent", "f", "error", "init_define_navigator", "import_pluralize", "fs", "path", "constructReduxReducersIndexScript", "models", "imports", "name", "pluralizedCamel", "pluralize", "exports", "getModelSlice", "httpClientProjectName", "modelName", "typesProjectName", "lowercase", "lowercasePlural", "pluralCamel", "capitalizedPlural", "singularCamel", "buildRtkSlices", "config", "MODELS_PATH", "BUILD_PATH", "DIST_PATH", "files", "file", "reduxSlice", "indexFileContent", "f", "error", "init_define_navigator", "fs", "path", "init_define_navigator", "constructModelExportIndexScript", "models", "modelFormat", "indexFileExports", "indexFileImports", "sequelizeDefaultExports", "fileExtension", "model", "modelName", "error", "constructSrcLaunchModelExports", "init_define_navigator", "getTypescriptTypeFromPrimitive", "type", "Ue", "init_define_navigator", "import_pluralize", "fs", "path", "snakeToPascal", "string_", "snake", "substr", "getPrimitiveImports", "fields", "imports", "f", "Ue", "constructModelTypeFromModel", "model", "fieldStrs", "fieldName", "field", "pluralize", "getTypescriptTypeFromPrimitive", "enumString", "regex", "item", "getModelExports", "buildModelTypes", "MODELS_BUILD_PATH", "path", "BUILD_PATH", "DIST_PATH", "TYPES_DIR_PATH", "fs", "files", "file", "fileContents", "Models", "exportString", "modelName", "types", "fileName", "filePath", "error", "getSequelizeTypeFromPrimitive", "type", "Ue", "constructSequelizeModelClassStr", "model", "typePropertiesString", "constructTypePropsFromFields", "classPropertiesString", "constructSequelizeClassPropsWithTypes", "fields", "sequelize", "fieldsString", "field", "a", "b", "getTypescriptTypeFromPrimitive", "constructSequelizeFieldString", "fieldName", "fieldType", "index", "getSequelizeFieldsString", "constructSequelizeModelRelationships", "modelName", "relationships", "belongsTo", "hasOne", "hasMany", "belongsToString", "hasOneString", "hasManyString", "constructSequelizeModelDependencies", "constructSequelizeModelFromModel", "classString", "dependentModels", "modelImports", "m", "dependentModelsString", "getPrimitiveImports", "buildSequelizeModels", "MODELS_BUILD_PATH", "path", "BUILD_PATH", "DIST_PATH", "fs", "Models", "sequelizeModel", "fileName", "filePath", "indexFileContent", "constructModelExportIndexScript", "error", "init_define_navigator", "fs", "path", "init_define_navigator", "fs", "path", "buildSrcLaunchModels", "modelsPath", "projectPath", "BUILD_PATH", "path", "MODELS_PATH", "files", "fs", "file", "fileContents", "entityFields", "relationshipsStart", "relationshipsEnd", "relationships", "belongsToStart", "belongsToEnd", "belongsTo", "transformed", "belongsToFields", "relationship", "updatedFileContents", "models", "indexFileContent", "constructModelExportIndexScript", "error", "init_define_navigator", "getDocumentModel", "getMessageModel", "getInvoiceModel", "getOrganizationModel", "getPaymentModel", "getPaymentMethodModel", "getPersonModel", "getSubscriptionModel", "getTeamModel", "getUserModel", "getUserGroupModel", "getUserRoleModel", "copyStubModels", "BUILD_PATH", "path", "fs", "modelsPath", "modelExportsIndexFile", "constructSrcLaunchModelExports", "getMessageModel", "getOrganizationModel", "getTeamModel", "getDocumentModel", "getPaymentModel", "getInvoiceModel", "getPaymentMethodModel", "getPersonModel", "getSubscriptionModel", "getUserModel", "getUserGroupModel", "getUserRoleModel", "buildSrcLaunchModels", "error", "buildModels", "config", "spinner", "ora", "copyStubModels", "build", "Y", "buildModelTypes", "Q", "buildSequelizeModels", "buildHttpClient", "buildRtkSlices", "buildCoreAPI", "init_define_navigator", "path", "listModels", "modelsPath", "models_default", "Command", "config", "flags", "cleanModels", "buildModels", "listModels", "init_define_navigator", "pc", "init_define_navigator", "exec", "shellExec", "command", "resolve", "reject", "error", "stdout", "stderr", "init_define_navigator", "cleanDependencies", "cleanBuild", "cleanTestCoverage", "init_define_navigator", "latestVersion", "SemVer", "init_define_navigator", "init_define_navigator", "AVA_TESTING_DEV_DEPENDENCIES", "ESLINT_DEV_DEPENDENCIES", "GITHUB_DEV_DEPENDENCIES", "JEST_TESTING_DEV_DEPENDENCIES", "JEST_REACT_TESTING_DEV_DEPENDENCIES", "PRETTIER_DEV_DEPENDENCIES", "REACT_DEV_DEPENDENCIES", "REACT_ROUTER_DEV_DEPENDENCIES", "STYLED_COMPONENTS_DEV_DEPENDENCIES", "SRCLAUNCH_CLI_DEV_DEPENDENCIES", "SRCLAUNCH_DX_DEV_DEPENDENCIES", "SRCLAUNCH_TYPES_DEV_DEPENDENCIES", "STYLELINT_DEV_DEPEENDENCIES", "TEST_COVERAGE_DEV_DEPENDENCIES", "TYPESCRIPT_DEV_DEPENDENCIES", "getDependencyLatestVersion", "dependency", "version", "versions", "shellExec", "parsedVersions", "maxVersion", "SemVer", "latestVersion", "getDependenciesLatestVersions", "dependencies", "depsArray", "k", "v", "getDeps", "deps", "dep", "depsDict", "error", "getDevDependencies", "ava", "eslint", "github", "jest", "jestReact", "prettier", "react", "reactRouter", "srclaunch", "styledComponents", "stylelint", "testCoverage", "typescript", "getDependenciesLatestVersions", "AVA_TESTING_DEV_DEPENDENCIES", "ESLINT_DEV_DEPENDENCIES", "GITHUB_DEV_DEPENDENCIES", "JEST_TESTING_DEV_DEPENDENCIES", "JEST_REACT_TESTING_DEV_DEPENDENCIES", "PRETTIER_DEV_DEPENDENCIES", "REACT_DEV_DEPENDENCIES", "REACT_ROUTER_DEV_DEPENDENCIES", "SRCLAUNCH_CLI_DEV_DEPENDENCIES", "SRCLAUNCH_DX_DEV_DEPENDENCIES", "SRCLAUNCH_TYPES_DEV_DEPENDENCIES", "STYLED_COMPONENTS_DEV_DEPENDENCIES", "STYLELINT_DEV_DEPEENDENCIES", "TEST_COVERAGE_DEV_DEPENDENCIES", "TYPESCRIPT_DEV_DEPENDENCIES", "init_define_navigator", "fs", "path", "init_define_navigator", "PRETTIER_CONFIG_CONTENT", "init_define_navigator", "ESLINT_CONFIG_CONTENT", "ESLINT_UI_CONFIG_CONTENT", "STYLELINT_CONFIG_CONTENT", "STYLELINT_UI_CONFIG_CONTENT", "init_define_navigator", "TYPESCRIPT_CONFIG_CONTENT", "TYPESCRIPT_UI_CONFIG_CONTENT", "writeToolingConfiguration", "formatters", "linters", "project", "staticTyping", "tool", "ze", "uiConfig", "Ce", "fs", "path", "TYPESCRIPT_UI_CONFIG_CONTENT", "TYPESCRIPT_CONFIG_CONTENT", "formatter", "ke", "PRETTIER_CONFIG_CONTENT", "ui", "linter", "Me", "ESLINT_UI_CONFIG_CONTENT", "ESLINT_CONFIG_CONTENT", "STYLELINT_UI_CONFIG_CONTENT", "STYLELINT_CONFIG_CONTENT", "project_default", "Command", "config", "flags", "pc", "build", "test", "coreDevDependencies", "getDevDependencies", "ti", "Me", "Ce", "ke", "ze", "cleanDependencies", "cleanBuild", "cleanTestCoverage", "createChangeset", "ia", "shellExec", "writeToolingConfiguration", "error", "init_define_navigator", "pc", "init_define_navigator", "Writable", "SemanticRelease", "createSemanticRelease", "dryRun", "force", "local", "name", "EchoStream", "chunk", "enc", "next", "errorStream", "outStream", "result", "commits", "nextRelease", "release_default", "Command", "config", "flags", "result", "createSemanticRelease", "pc", "error", "init_define_navigator", "run_default", "Command", "cli", "flags", "init_define_navigator", "init_define_navigator", "onExit", "spawn", "init_define_navigator", "DEFAULT_TEST_OPTIONS", "oi", "ti", "logOutput", "output", "logError", "outputStr", "run", "config", "match", "watch", "all", "color", "concurrencyArg", "configArg", "failFast", "failWithNoTests", "DEFAULT_TEST_OPTIONS", "matchFlag", "verbose", "watchFlag", "shellCommand", "childProcess", "spawn", "data", "onExit", "error", "init_define_navigator", "Report", "emptyDir", "ensureDir", "path", "pc", "run", "config", "coverageDir", "path", "DEFAULT_TEST_OPTIONS", "ensureDir", "emptyDir", "report", "Report", "pc", "error", "init_define_navigator", "jest", "path", "run", "config", "match", "watch", "colors", "concurrencyArg", "configArg", "coverageProvider", "failFast", "failWithNoTests", "DEFAULT_TEST_OPTIONS", "matchFlag", "rootDir", "path", "verbose", "watchFlag", "args", "jest", "error", "init_define_navigator", "globby", "path", "tape", "run", "config", "match", "watch", "row", "paths", "file", "error", "init_define_navigator", "createVitest", "run", "config", "match", "watch", "result", "error", "test_default", "Command", "config", "flags", "run", "test", "ti", "init_define_navigator", "InteractiveModeFlag", "helpMessage", "cli", "meow", "InteractiveModeFlag", "main", "command", "flags", "config", "loadSrcLaunchConfig", "updateNotifier", "handleCommand", "build_default", "changesets_default", "config_default", "create_default", "deploy_default", "dev_default", "docs_default", "generate_default", "help_default", "infrastructure_default", "install_default", "models_default", "project_default", "release_default", "run_default", "test_default", "error", "src_default"]
}
